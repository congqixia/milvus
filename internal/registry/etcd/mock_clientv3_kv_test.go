// Code generated by mockery v2.16.0. DO NOT EDIT.

package etcd

import (
	context "context"

	clientv3 "go.etcd.io/etcd/client/v3"

	mock "github.com/stretchr/testify/mock"
)

// MockV3KV is an autogenerated mock type for the KV type
type MockV3KV struct {
	mock.Mock
}

type MockV3KV_Expecter struct {
	mock *mock.Mock
}

func (_m *MockV3KV) EXPECT() *MockV3KV_Expecter {
	return &MockV3KV_Expecter{mock: &_m.Mock}
}

// Compact provides a mock function with given fields: ctx, rev, opts
func (_m *MockV3KV) Compact(ctx context.Context, rev int64, opts ...clientv3.CompactOption) (*clientv3.CompactResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, rev)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *clientv3.CompactResponse
	if rf, ok := ret.Get(0).(func(context.Context, int64, ...clientv3.CompactOption) *clientv3.CompactResponse); ok {
		r0 = rf(ctx, rev, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientv3.CompactResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64, ...clientv3.CompactOption) error); ok {
		r1 = rf(ctx, rev, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockV3KV_Compact_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Compact'
type MockV3KV_Compact_Call struct {
	*mock.Call
}

// Compact is a helper method to define mock.On call
//  - ctx context.Context
//  - rev int64
//  - opts ...clientv3.CompactOption
func (_e *MockV3KV_Expecter) Compact(ctx interface{}, rev interface{}, opts ...interface{}) *MockV3KV_Compact_Call {
	return &MockV3KV_Compact_Call{Call: _e.mock.On("Compact",
		append([]interface{}{ctx, rev}, opts...)...)}
}

func (_c *MockV3KV_Compact_Call) Run(run func(ctx context.Context, rev int64, opts ...clientv3.CompactOption)) *MockV3KV_Compact_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]clientv3.CompactOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(clientv3.CompactOption)
			}
		}
		run(args[0].(context.Context), args[1].(int64), variadicArgs...)
	})
	return _c
}

func (_c *MockV3KV_Compact_Call) Return(_a0 *clientv3.CompactResponse, _a1 error) *MockV3KV_Compact_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// Delete provides a mock function with given fields: ctx, key, opts
func (_m *MockV3KV) Delete(ctx context.Context, key string, opts ...clientv3.OpOption) (*clientv3.DeleteResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, key)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *clientv3.DeleteResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, ...clientv3.OpOption) *clientv3.DeleteResponse); ok {
		r0 = rf(ctx, key, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientv3.DeleteResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, ...clientv3.OpOption) error); ok {
		r1 = rf(ctx, key, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockV3KV_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockV3KV_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//  - ctx context.Context
//  - key string
//  - opts ...clientv3.OpOption
func (_e *MockV3KV_Expecter) Delete(ctx interface{}, key interface{}, opts ...interface{}) *MockV3KV_Delete_Call {
	return &MockV3KV_Delete_Call{Call: _e.mock.On("Delete",
		append([]interface{}{ctx, key}, opts...)...)}
}

func (_c *MockV3KV_Delete_Call) Run(run func(ctx context.Context, key string, opts ...clientv3.OpOption)) *MockV3KV_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]clientv3.OpOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(clientv3.OpOption)
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockV3KV_Delete_Call) Return(_a0 *clientv3.DeleteResponse, _a1 error) *MockV3KV_Delete_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// Do provides a mock function with given fields: ctx, op
func (_m *MockV3KV) Do(ctx context.Context, op clientv3.Op) (clientv3.OpResponse, error) {
	ret := _m.Called(ctx, op)

	var r0 clientv3.OpResponse
	if rf, ok := ret.Get(0).(func(context.Context, clientv3.Op) clientv3.OpResponse); ok {
		r0 = rf(ctx, op)
	} else {
		r0 = ret.Get(0).(clientv3.OpResponse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, clientv3.Op) error); ok {
		r1 = rf(ctx, op)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockV3KV_Do_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Do'
type MockV3KV_Do_Call struct {
	*mock.Call
}

// Do is a helper method to define mock.On call
//  - ctx context.Context
//  - op clientv3.Op
func (_e *MockV3KV_Expecter) Do(ctx interface{}, op interface{}) *MockV3KV_Do_Call {
	return &MockV3KV_Do_Call{Call: _e.mock.On("Do", ctx, op)}
}

func (_c *MockV3KV_Do_Call) Run(run func(ctx context.Context, op clientv3.Op)) *MockV3KV_Do_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(clientv3.Op))
	})
	return _c
}

func (_c *MockV3KV_Do_Call) Return(_a0 clientv3.OpResponse, _a1 error) *MockV3KV_Do_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// Get provides a mock function with given fields: ctx, key, opts
func (_m *MockV3KV) Get(ctx context.Context, key string, opts ...clientv3.OpOption) (*clientv3.GetResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, key)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *clientv3.GetResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, ...clientv3.OpOption) *clientv3.GetResponse); ok {
		r0 = rf(ctx, key, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientv3.GetResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, ...clientv3.OpOption) error); ok {
		r1 = rf(ctx, key, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockV3KV_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockV3KV_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//  - ctx context.Context
//  - key string
//  - opts ...clientv3.OpOption
func (_e *MockV3KV_Expecter) Get(ctx interface{}, key interface{}, opts ...interface{}) *MockV3KV_Get_Call {
	return &MockV3KV_Get_Call{Call: _e.mock.On("Get",
		append([]interface{}{ctx, key}, opts...)...)}
}

func (_c *MockV3KV_Get_Call) Run(run func(ctx context.Context, key string, opts ...clientv3.OpOption)) *MockV3KV_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]clientv3.OpOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(clientv3.OpOption)
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockV3KV_Get_Call) Return(_a0 *clientv3.GetResponse, _a1 error) *MockV3KV_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// Put provides a mock function with given fields: ctx, key, val, opts
func (_m *MockV3KV) Put(ctx context.Context, key string, val string, opts ...clientv3.OpOption) (*clientv3.PutResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, key, val)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *clientv3.PutResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...clientv3.OpOption) *clientv3.PutResponse); ok {
		r0 = rf(ctx, key, val, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clientv3.PutResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, ...clientv3.OpOption) error); ok {
		r1 = rf(ctx, key, val, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockV3KV_Put_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Put'
type MockV3KV_Put_Call struct {
	*mock.Call
}

// Put is a helper method to define mock.On call
//  - ctx context.Context
//  - key string
//  - val string
//  - opts ...clientv3.OpOption
func (_e *MockV3KV_Expecter) Put(ctx interface{}, key interface{}, val interface{}, opts ...interface{}) *MockV3KV_Put_Call {
	return &MockV3KV_Put_Call{Call: _e.mock.On("Put",
		append([]interface{}{ctx, key, val}, opts...)...)}
}

func (_c *MockV3KV_Put_Call) Run(run func(ctx context.Context, key string, val string, opts ...clientv3.OpOption)) *MockV3KV_Put_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]clientv3.OpOption, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(clientv3.OpOption)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockV3KV_Put_Call) Return(_a0 *clientv3.PutResponse, _a1 error) *MockV3KV_Put_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// Txn provides a mock function with given fields: ctx
func (_m *MockV3KV) Txn(ctx context.Context) clientv3.Txn {
	ret := _m.Called(ctx)

	var r0 clientv3.Txn
	if rf, ok := ret.Get(0).(func(context.Context) clientv3.Txn); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(clientv3.Txn)
		}
	}

	return r0
}

// MockV3KV_Txn_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Txn'
type MockV3KV_Txn_Call struct {
	*mock.Call
}

// Txn is a helper method to define mock.On call
//  - ctx context.Context
func (_e *MockV3KV_Expecter) Txn(ctx interface{}) *MockV3KV_Txn_Call {
	return &MockV3KV_Txn_Call{Call: _e.mock.On("Txn", ctx)}
}

func (_c *MockV3KV_Txn_Call) Run(run func(ctx context.Context)) *MockV3KV_Txn_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockV3KV_Txn_Call) Return(_a0 clientv3.Txn) *MockV3KV_Txn_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewMockV3KV interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockV3KV creates a new instance of MockV3KV. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockV3KV(t mockConstructorTestingTNewMockV3KV) *MockV3KV {
	mock := &MockV3KV{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
