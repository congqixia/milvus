// Code generated by mockery v2.16.0. DO NOT EDIT.

package registry

import (
	context "context"

	options "github.com/milvus-io/milvus/internal/registry/options"
	mock "github.com/stretchr/testify/mock"

	types "github.com/milvus-io/milvus/internal/types"
)

// MockServiceDiscovery is an autogenerated mock type for the ServiceDiscovery type
type MockServiceDiscovery struct {
	mock.Mock
}

type MockServiceDiscovery_Expecter struct {
	mock *mock.Mock
}

func (_m *MockServiceDiscovery) EXPECT() *MockServiceDiscovery_Expecter {
	return &MockServiceDiscovery_Expecter{mock: &_m.Mock}
}

// GetDataCoord provides a mock function with given fields: ctx
func (_m *MockServiceDiscovery) GetDataCoord(ctx context.Context) (types.DataCoord, error) {
	ret := _m.Called(ctx)

	var r0 types.DataCoord
	if rf, ok := ret.Get(0).(func(context.Context) types.DataCoord); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.DataCoord)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockServiceDiscovery_GetDataCoord_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDataCoord'
type MockServiceDiscovery_GetDataCoord_Call struct {
	*mock.Call
}

// GetDataCoord is a helper method to define mock.On call
//  - ctx context.Context
func (_e *MockServiceDiscovery_Expecter) GetDataCoord(ctx interface{}) *MockServiceDiscovery_GetDataCoord_Call {
	return &MockServiceDiscovery_GetDataCoord_Call{Call: _e.mock.On("GetDataCoord", ctx)}
}

func (_c *MockServiceDiscovery_GetDataCoord_Call) Run(run func(ctx context.Context)) *MockServiceDiscovery_GetDataCoord_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockServiceDiscovery_GetDataCoord_Call) Return(_a0 types.DataCoord, _a1 error) *MockServiceDiscovery_GetDataCoord_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetQueryCoord provides a mock function with given fields: ctx
func (_m *MockServiceDiscovery) GetQueryCoord(ctx context.Context) (types.QueryCoord, error) {
	ret := _m.Called(ctx)

	var r0 types.QueryCoord
	if rf, ok := ret.Get(0).(func(context.Context) types.QueryCoord); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.QueryCoord)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockServiceDiscovery_GetQueryCoord_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetQueryCoord'
type MockServiceDiscovery_GetQueryCoord_Call struct {
	*mock.Call
}

// GetQueryCoord is a helper method to define mock.On call
//  - ctx context.Context
func (_e *MockServiceDiscovery_Expecter) GetQueryCoord(ctx interface{}) *MockServiceDiscovery_GetQueryCoord_Call {
	return &MockServiceDiscovery_GetQueryCoord_Call{Call: _e.mock.On("GetQueryCoord", ctx)}
}

func (_c *MockServiceDiscovery_GetQueryCoord_Call) Run(run func(ctx context.Context)) *MockServiceDiscovery_GetQueryCoord_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockServiceDiscovery_GetQueryCoord_Call) Return(_a0 types.QueryCoord, _a1 error) *MockServiceDiscovery_GetQueryCoord_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetRootCoord provides a mock function with given fields: ctx
func (_m *MockServiceDiscovery) GetRootCoord(ctx context.Context) (types.RootCoord, error) {
	ret := _m.Called(ctx)

	var r0 types.RootCoord
	if rf, ok := ret.Get(0).(func(context.Context) types.RootCoord); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.RootCoord)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockServiceDiscovery_GetRootCoord_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRootCoord'
type MockServiceDiscovery_GetRootCoord_Call struct {
	*mock.Call
}

// GetRootCoord is a helper method to define mock.On call
//  - ctx context.Context
func (_e *MockServiceDiscovery_Expecter) GetRootCoord(ctx interface{}) *MockServiceDiscovery_GetRootCoord_Call {
	return &MockServiceDiscovery_GetRootCoord_Call{Call: _e.mock.On("GetRootCoord", ctx)}
}

func (_c *MockServiceDiscovery_GetRootCoord_Call) Run(run func(ctx context.Context)) *MockServiceDiscovery_GetRootCoord_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockServiceDiscovery_GetRootCoord_Call) Return(_a0 types.RootCoord, _a1 error) *MockServiceDiscovery_GetRootCoord_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetServices provides a mock function with given fields: ctx, component
func (_m *MockServiceDiscovery) GetServices(ctx context.Context, component string) ([]ServiceEntry, error) {
	ret := _m.Called(ctx, component)

	var r0 []ServiceEntry
	if rf, ok := ret.Get(0).(func(context.Context, string) []ServiceEntry); ok {
		r0 = rf(ctx, component)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]ServiceEntry)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, component)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockServiceDiscovery_GetServices_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetServices'
type MockServiceDiscovery_GetServices_Call struct {
	*mock.Call
}

// GetServices is a helper method to define mock.On call
//  - ctx context.Context
//  - component string
func (_e *MockServiceDiscovery_Expecter) GetServices(ctx interface{}, component interface{}) *MockServiceDiscovery_GetServices_Call {
	return &MockServiceDiscovery_GetServices_Call{Call: _e.mock.On("GetServices", ctx, component)}
}

func (_c *MockServiceDiscovery_GetServices_Call) Run(run func(ctx context.Context, component string)) *MockServiceDiscovery_GetServices_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockServiceDiscovery_GetServices_Call) Return(_a0 []ServiceEntry, _a1 error) *MockServiceDiscovery_GetServices_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// RegisterDataCoord provides a mock function with given fields: ctx, datacoord, addr, opts
func (_m *MockServiceDiscovery) RegisterDataCoord(ctx context.Context, datacoord types.DataCoord, addr string, opts ...options.RegisterOption) (Session, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, datacoord, addr)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 Session
	if rf, ok := ret.Get(0).(func(context.Context, types.DataCoord, string, ...options.RegisterOption) Session); ok {
		r0 = rf(ctx, datacoord, addr, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Session)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, types.DataCoord, string, ...options.RegisterOption) error); ok {
		r1 = rf(ctx, datacoord, addr, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockServiceDiscovery_RegisterDataCoord_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterDataCoord'
type MockServiceDiscovery_RegisterDataCoord_Call struct {
	*mock.Call
}

// RegisterDataCoord is a helper method to define mock.On call
//  - ctx context.Context
//  - datacoord types.DataCoord
//  - addr string
//  - opts ...options.RegisterOption
func (_e *MockServiceDiscovery_Expecter) RegisterDataCoord(ctx interface{}, datacoord interface{}, addr interface{}, opts ...interface{}) *MockServiceDiscovery_RegisterDataCoord_Call {
	return &MockServiceDiscovery_RegisterDataCoord_Call{Call: _e.mock.On("RegisterDataCoord",
		append([]interface{}{ctx, datacoord, addr}, opts...)...)}
}

func (_c *MockServiceDiscovery_RegisterDataCoord_Call) Run(run func(ctx context.Context, datacoord types.DataCoord, addr string, opts ...options.RegisterOption)) *MockServiceDiscovery_RegisterDataCoord_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]options.RegisterOption, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(options.RegisterOption)
			}
		}
		run(args[0].(context.Context), args[1].(types.DataCoord), args[2].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockServiceDiscovery_RegisterDataCoord_Call) Return(_a0 Session, _a1 error) *MockServiceDiscovery_RegisterDataCoord_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// RegisterDataNode provides a mock function with given fields: ctx, datanode, addr, opts
func (_m *MockServiceDiscovery) RegisterDataNode(ctx context.Context, datanode types.DataNode, addr string, opts ...options.RegisterOption) (Session, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, datanode, addr)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 Session
	if rf, ok := ret.Get(0).(func(context.Context, types.DataNode, string, ...options.RegisterOption) Session); ok {
		r0 = rf(ctx, datanode, addr, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Session)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, types.DataNode, string, ...options.RegisterOption) error); ok {
		r1 = rf(ctx, datanode, addr, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockServiceDiscovery_RegisterDataNode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterDataNode'
type MockServiceDiscovery_RegisterDataNode_Call struct {
	*mock.Call
}

// RegisterDataNode is a helper method to define mock.On call
//  - ctx context.Context
//  - datanode types.DataNode
//  - addr string
//  - opts ...options.RegisterOption
func (_e *MockServiceDiscovery_Expecter) RegisterDataNode(ctx interface{}, datanode interface{}, addr interface{}, opts ...interface{}) *MockServiceDiscovery_RegisterDataNode_Call {
	return &MockServiceDiscovery_RegisterDataNode_Call{Call: _e.mock.On("RegisterDataNode",
		append([]interface{}{ctx, datanode, addr}, opts...)...)}
}

func (_c *MockServiceDiscovery_RegisterDataNode_Call) Run(run func(ctx context.Context, datanode types.DataNode, addr string, opts ...options.RegisterOption)) *MockServiceDiscovery_RegisterDataNode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]options.RegisterOption, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(options.RegisterOption)
			}
		}
		run(args[0].(context.Context), args[1].(types.DataNode), args[2].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockServiceDiscovery_RegisterDataNode_Call) Return(_a0 Session, _a1 error) *MockServiceDiscovery_RegisterDataNode_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// RegisterIndexNode provides a mock function with given fields: ctx, indexnode, addr, opts
func (_m *MockServiceDiscovery) RegisterIndexNode(ctx context.Context, indexnode types.IndexNode, addr string, opts ...options.RegisterOption) (Session, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, indexnode, addr)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 Session
	if rf, ok := ret.Get(0).(func(context.Context, types.IndexNode, string, ...options.RegisterOption) Session); ok {
		r0 = rf(ctx, indexnode, addr, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Session)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, types.IndexNode, string, ...options.RegisterOption) error); ok {
		r1 = rf(ctx, indexnode, addr, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockServiceDiscovery_RegisterIndexNode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterIndexNode'
type MockServiceDiscovery_RegisterIndexNode_Call struct {
	*mock.Call
}

// RegisterIndexNode is a helper method to define mock.On call
//  - ctx context.Context
//  - indexnode types.IndexNode
//  - addr string
//  - opts ...options.RegisterOption
func (_e *MockServiceDiscovery_Expecter) RegisterIndexNode(ctx interface{}, indexnode interface{}, addr interface{}, opts ...interface{}) *MockServiceDiscovery_RegisterIndexNode_Call {
	return &MockServiceDiscovery_RegisterIndexNode_Call{Call: _e.mock.On("RegisterIndexNode",
		append([]interface{}{ctx, indexnode, addr}, opts...)...)}
}

func (_c *MockServiceDiscovery_RegisterIndexNode_Call) Run(run func(ctx context.Context, indexnode types.IndexNode, addr string, opts ...options.RegisterOption)) *MockServiceDiscovery_RegisterIndexNode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]options.RegisterOption, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(options.RegisterOption)
			}
		}
		run(args[0].(context.Context), args[1].(types.IndexNode), args[2].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockServiceDiscovery_RegisterIndexNode_Call) Return(_a0 Session, _a1 error) *MockServiceDiscovery_RegisterIndexNode_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// RegisterProxy provides a mock function with given fields: ctx, proxy, addr, opts
func (_m *MockServiceDiscovery) RegisterProxy(ctx context.Context, proxy types.Proxy, addr string, opts ...options.RegisterOption) (Session, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, proxy, addr)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 Session
	if rf, ok := ret.Get(0).(func(context.Context, types.Proxy, string, ...options.RegisterOption) Session); ok {
		r0 = rf(ctx, proxy, addr, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Session)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, types.Proxy, string, ...options.RegisterOption) error); ok {
		r1 = rf(ctx, proxy, addr, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockServiceDiscovery_RegisterProxy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterProxy'
type MockServiceDiscovery_RegisterProxy_Call struct {
	*mock.Call
}

// RegisterProxy is a helper method to define mock.On call
//  - ctx context.Context
//  - proxy types.Proxy
//  - addr string
//  - opts ...options.RegisterOption
func (_e *MockServiceDiscovery_Expecter) RegisterProxy(ctx interface{}, proxy interface{}, addr interface{}, opts ...interface{}) *MockServiceDiscovery_RegisterProxy_Call {
	return &MockServiceDiscovery_RegisterProxy_Call{Call: _e.mock.On("RegisterProxy",
		append([]interface{}{ctx, proxy, addr}, opts...)...)}
}

func (_c *MockServiceDiscovery_RegisterProxy_Call) Run(run func(ctx context.Context, proxy types.Proxy, addr string, opts ...options.RegisterOption)) *MockServiceDiscovery_RegisterProxy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]options.RegisterOption, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(options.RegisterOption)
			}
		}
		run(args[0].(context.Context), args[1].(types.Proxy), args[2].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockServiceDiscovery_RegisterProxy_Call) Return(_a0 Session, _a1 error) *MockServiceDiscovery_RegisterProxy_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// RegisterQueryCoord provides a mock function with given fields: ctx, querycoord, addr, opts
func (_m *MockServiceDiscovery) RegisterQueryCoord(ctx context.Context, querycoord types.QueryCoord, addr string, opts ...options.RegisterOption) (Session, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, querycoord, addr)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 Session
	if rf, ok := ret.Get(0).(func(context.Context, types.QueryCoord, string, ...options.RegisterOption) Session); ok {
		r0 = rf(ctx, querycoord, addr, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Session)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, types.QueryCoord, string, ...options.RegisterOption) error); ok {
		r1 = rf(ctx, querycoord, addr, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockServiceDiscovery_RegisterQueryCoord_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterQueryCoord'
type MockServiceDiscovery_RegisterQueryCoord_Call struct {
	*mock.Call
}

// RegisterQueryCoord is a helper method to define mock.On call
//  - ctx context.Context
//  - querycoord types.QueryCoord
//  - addr string
//  - opts ...options.RegisterOption
func (_e *MockServiceDiscovery_Expecter) RegisterQueryCoord(ctx interface{}, querycoord interface{}, addr interface{}, opts ...interface{}) *MockServiceDiscovery_RegisterQueryCoord_Call {
	return &MockServiceDiscovery_RegisterQueryCoord_Call{Call: _e.mock.On("RegisterQueryCoord",
		append([]interface{}{ctx, querycoord, addr}, opts...)...)}
}

func (_c *MockServiceDiscovery_RegisterQueryCoord_Call) Run(run func(ctx context.Context, querycoord types.QueryCoord, addr string, opts ...options.RegisterOption)) *MockServiceDiscovery_RegisterQueryCoord_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]options.RegisterOption, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(options.RegisterOption)
			}
		}
		run(args[0].(context.Context), args[1].(types.QueryCoord), args[2].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockServiceDiscovery_RegisterQueryCoord_Call) Return(_a0 Session, _a1 error) *MockServiceDiscovery_RegisterQueryCoord_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// RegisterQueryNode provides a mock function with given fields: ctx, index, addr, opts
func (_m *MockServiceDiscovery) RegisterQueryNode(ctx context.Context, index types.QueryNode, addr string, opts ...options.RegisterOption) (Session, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, index, addr)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 Session
	if rf, ok := ret.Get(0).(func(context.Context, types.QueryNode, string, ...options.RegisterOption) Session); ok {
		r0 = rf(ctx, index, addr, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Session)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, types.QueryNode, string, ...options.RegisterOption) error); ok {
		r1 = rf(ctx, index, addr, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockServiceDiscovery_RegisterQueryNode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterQueryNode'
type MockServiceDiscovery_RegisterQueryNode_Call struct {
	*mock.Call
}

// RegisterQueryNode is a helper method to define mock.On call
//  - ctx context.Context
//  - index types.QueryNode
//  - addr string
//  - opts ...options.RegisterOption
func (_e *MockServiceDiscovery_Expecter) RegisterQueryNode(ctx interface{}, index interface{}, addr interface{}, opts ...interface{}) *MockServiceDiscovery_RegisterQueryNode_Call {
	return &MockServiceDiscovery_RegisterQueryNode_Call{Call: _e.mock.On("RegisterQueryNode",
		append([]interface{}{ctx, index, addr}, opts...)...)}
}

func (_c *MockServiceDiscovery_RegisterQueryNode_Call) Run(run func(ctx context.Context, index types.QueryNode, addr string, opts ...options.RegisterOption)) *MockServiceDiscovery_RegisterQueryNode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]options.RegisterOption, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(options.RegisterOption)
			}
		}
		run(args[0].(context.Context), args[1].(types.QueryNode), args[2].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockServiceDiscovery_RegisterQueryNode_Call) Return(_a0 Session, _a1 error) *MockServiceDiscovery_RegisterQueryNode_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// RegisterRootCoord provides a mock function with given fields: ctx, rootcoord, addr, opts
func (_m *MockServiceDiscovery) RegisterRootCoord(ctx context.Context, rootcoord types.RootCoord, addr string, opts ...options.RegisterOption) (Session, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, rootcoord, addr)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 Session
	if rf, ok := ret.Get(0).(func(context.Context, types.RootCoord, string, ...options.RegisterOption) Session); ok {
		r0 = rf(ctx, rootcoord, addr, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Session)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, types.RootCoord, string, ...options.RegisterOption) error); ok {
		r1 = rf(ctx, rootcoord, addr, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockServiceDiscovery_RegisterRootCoord_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterRootCoord'
type MockServiceDiscovery_RegisterRootCoord_Call struct {
	*mock.Call
}

// RegisterRootCoord is a helper method to define mock.On call
//  - ctx context.Context
//  - rootcoord types.RootCoord
//  - addr string
//  - opts ...options.RegisterOption
func (_e *MockServiceDiscovery_Expecter) RegisterRootCoord(ctx interface{}, rootcoord interface{}, addr interface{}, opts ...interface{}) *MockServiceDiscovery_RegisterRootCoord_Call {
	return &MockServiceDiscovery_RegisterRootCoord_Call{Call: _e.mock.On("RegisterRootCoord",
		append([]interface{}{ctx, rootcoord, addr}, opts...)...)}
}

func (_c *MockServiceDiscovery_RegisterRootCoord_Call) Run(run func(ctx context.Context, rootcoord types.RootCoord, addr string, opts ...options.RegisterOption)) *MockServiceDiscovery_RegisterRootCoord_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]options.RegisterOption, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(options.RegisterOption)
			}
		}
		run(args[0].(context.Context), args[1].(types.RootCoord), args[2].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockServiceDiscovery_RegisterRootCoord_Call) Return(_a0 Session, _a1 error) *MockServiceDiscovery_RegisterRootCoord_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// WatchDataNode provides a mock function with given fields: ctx, opts
func (_m *MockServiceDiscovery) WatchDataNode(ctx context.Context, opts ...options.WatchOption) ([]types.DataNode, ServiceWatcher[types.DataNode], error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 []types.DataNode
	if rf, ok := ret.Get(0).(func(context.Context, ...options.WatchOption) []types.DataNode); ok {
		r0 = rf(ctx, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.DataNode)
		}
	}

	var r1 ServiceWatcher[types.DataNode]
	if rf, ok := ret.Get(1).(func(context.Context, ...options.WatchOption) ServiceWatcher[types.DataNode]); ok {
		r1 = rf(ctx, opts...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(ServiceWatcher[types.DataNode])
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, ...options.WatchOption) error); ok {
		r2 = rf(ctx, opts...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockServiceDiscovery_WatchDataNode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WatchDataNode'
type MockServiceDiscovery_WatchDataNode_Call struct {
	*mock.Call
}

// WatchDataNode is a helper method to define mock.On call
//  - ctx context.Context
//  - opts ...options.WatchOption
func (_e *MockServiceDiscovery_Expecter) WatchDataNode(ctx interface{}, opts ...interface{}) *MockServiceDiscovery_WatchDataNode_Call {
	return &MockServiceDiscovery_WatchDataNode_Call{Call: _e.mock.On("WatchDataNode",
		append([]interface{}{ctx}, opts...)...)}
}

func (_c *MockServiceDiscovery_WatchDataNode_Call) Run(run func(ctx context.Context, opts ...options.WatchOption)) *MockServiceDiscovery_WatchDataNode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]options.WatchOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(options.WatchOption)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *MockServiceDiscovery_WatchDataNode_Call) Return(_a0 []types.DataNode, _a1 ServiceWatcher[types.DataNode], _a2 error) *MockServiceDiscovery_WatchDataNode_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

// WatchIndexNode provides a mock function with given fields: ctx, opts
func (_m *MockServiceDiscovery) WatchIndexNode(ctx context.Context, opts ...options.WatchOption) ([]types.IndexNode, ServiceWatcher[types.IndexNode], error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 []types.IndexNode
	if rf, ok := ret.Get(0).(func(context.Context, ...options.WatchOption) []types.IndexNode); ok {
		r0 = rf(ctx, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.IndexNode)
		}
	}

	var r1 ServiceWatcher[types.IndexNode]
	if rf, ok := ret.Get(1).(func(context.Context, ...options.WatchOption) ServiceWatcher[types.IndexNode]); ok {
		r1 = rf(ctx, opts...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(ServiceWatcher[types.IndexNode])
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, ...options.WatchOption) error); ok {
		r2 = rf(ctx, opts...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockServiceDiscovery_WatchIndexNode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WatchIndexNode'
type MockServiceDiscovery_WatchIndexNode_Call struct {
	*mock.Call
}

// WatchIndexNode is a helper method to define mock.On call
//  - ctx context.Context
//  - opts ...options.WatchOption
func (_e *MockServiceDiscovery_Expecter) WatchIndexNode(ctx interface{}, opts ...interface{}) *MockServiceDiscovery_WatchIndexNode_Call {
	return &MockServiceDiscovery_WatchIndexNode_Call{Call: _e.mock.On("WatchIndexNode",
		append([]interface{}{ctx}, opts...)...)}
}

func (_c *MockServiceDiscovery_WatchIndexNode_Call) Run(run func(ctx context.Context, opts ...options.WatchOption)) *MockServiceDiscovery_WatchIndexNode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]options.WatchOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(options.WatchOption)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *MockServiceDiscovery_WatchIndexNode_Call) Return(_a0 []types.IndexNode, _a1 ServiceWatcher[types.IndexNode], _a2 error) *MockServiceDiscovery_WatchIndexNode_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

// WatchProxy provides a mock function with given fields: ctx, opts
func (_m *MockServiceDiscovery) WatchProxy(ctx context.Context, opts ...options.WatchOption) ([]types.Proxy, ServiceWatcher[types.Proxy], error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 []types.Proxy
	if rf, ok := ret.Get(0).(func(context.Context, ...options.WatchOption) []types.Proxy); ok {
		r0 = rf(ctx, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.Proxy)
		}
	}

	var r1 ServiceWatcher[types.Proxy]
	if rf, ok := ret.Get(1).(func(context.Context, ...options.WatchOption) ServiceWatcher[types.Proxy]); ok {
		r1 = rf(ctx, opts...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(ServiceWatcher[types.Proxy])
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, ...options.WatchOption) error); ok {
		r2 = rf(ctx, opts...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockServiceDiscovery_WatchProxy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WatchProxy'
type MockServiceDiscovery_WatchProxy_Call struct {
	*mock.Call
}

// WatchProxy is a helper method to define mock.On call
//  - ctx context.Context
//  - opts ...options.WatchOption
func (_e *MockServiceDiscovery_Expecter) WatchProxy(ctx interface{}, opts ...interface{}) *MockServiceDiscovery_WatchProxy_Call {
	return &MockServiceDiscovery_WatchProxy_Call{Call: _e.mock.On("WatchProxy",
		append([]interface{}{ctx}, opts...)...)}
}

func (_c *MockServiceDiscovery_WatchProxy_Call) Run(run func(ctx context.Context, opts ...options.WatchOption)) *MockServiceDiscovery_WatchProxy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]options.WatchOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(options.WatchOption)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *MockServiceDiscovery_WatchProxy_Call) Return(_a0 []types.Proxy, _a1 ServiceWatcher[types.Proxy], _a2 error) *MockServiceDiscovery_WatchProxy_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

// WatchQueryNode provides a mock function with given fields: ctx, opts
func (_m *MockServiceDiscovery) WatchQueryNode(ctx context.Context, opts ...options.WatchOption) ([]types.QueryNode, ServiceWatcher[types.QueryNode], error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 []types.QueryNode
	if rf, ok := ret.Get(0).(func(context.Context, ...options.WatchOption) []types.QueryNode); ok {
		r0 = rf(ctx, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.QueryNode)
		}
	}

	var r1 ServiceWatcher[types.QueryNode]
	if rf, ok := ret.Get(1).(func(context.Context, ...options.WatchOption) ServiceWatcher[types.QueryNode]); ok {
		r1 = rf(ctx, opts...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(ServiceWatcher[types.QueryNode])
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, ...options.WatchOption) error); ok {
		r2 = rf(ctx, opts...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockServiceDiscovery_WatchQueryNode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WatchQueryNode'
type MockServiceDiscovery_WatchQueryNode_Call struct {
	*mock.Call
}

// WatchQueryNode is a helper method to define mock.On call
//  - ctx context.Context
//  - opts ...options.WatchOption
func (_e *MockServiceDiscovery_Expecter) WatchQueryNode(ctx interface{}, opts ...interface{}) *MockServiceDiscovery_WatchQueryNode_Call {
	return &MockServiceDiscovery_WatchQueryNode_Call{Call: _e.mock.On("WatchQueryNode",
		append([]interface{}{ctx}, opts...)...)}
}

func (_c *MockServiceDiscovery_WatchQueryNode_Call) Run(run func(ctx context.Context, opts ...options.WatchOption)) *MockServiceDiscovery_WatchQueryNode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]options.WatchOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(options.WatchOption)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *MockServiceDiscovery_WatchQueryNode_Call) Return(_a0 []types.QueryNode, _a1 ServiceWatcher[types.QueryNode], _a2 error) *MockServiceDiscovery_WatchQueryNode_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

// WatchServices provides a mock function with given fields: ctx, component, opts
func (_m *MockServiceDiscovery) WatchServices(ctx context.Context, component string, opts ...options.WatchOption) ([]ServiceEntry, ServiceWatcher[ServiceEntry], error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, component)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 []ServiceEntry
	if rf, ok := ret.Get(0).(func(context.Context, string, ...options.WatchOption) []ServiceEntry); ok {
		r0 = rf(ctx, component, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]ServiceEntry)
		}
	}

	var r1 ServiceWatcher[ServiceEntry]
	if rf, ok := ret.Get(1).(func(context.Context, string, ...options.WatchOption) ServiceWatcher[ServiceEntry]); ok {
		r1 = rf(ctx, component, opts...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(ServiceWatcher[ServiceEntry])
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, ...options.WatchOption) error); ok {
		r2 = rf(ctx, component, opts...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockServiceDiscovery_WatchServices_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WatchServices'
type MockServiceDiscovery_WatchServices_Call struct {
	*mock.Call
}

// WatchServices is a helper method to define mock.On call
//  - ctx context.Context
//  - component string
//  - opts ...options.WatchOption
func (_e *MockServiceDiscovery_Expecter) WatchServices(ctx interface{}, component interface{}, opts ...interface{}) *MockServiceDiscovery_WatchServices_Call {
	return &MockServiceDiscovery_WatchServices_Call{Call: _e.mock.On("WatchServices",
		append([]interface{}{ctx, component}, opts...)...)}
}

func (_c *MockServiceDiscovery_WatchServices_Call) Run(run func(ctx context.Context, component string, opts ...options.WatchOption)) *MockServiceDiscovery_WatchServices_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]options.WatchOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(options.WatchOption)
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockServiceDiscovery_WatchServices_Call) Return(_a0 []ServiceEntry, _a1 ServiceWatcher[ServiceEntry], _a2 error) *MockServiceDiscovery_WatchServices_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

type mockConstructorTestingTNewMockServiceDiscovery interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockServiceDiscovery creates a new instance of MockServiceDiscovery. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockServiceDiscovery(t mockConstructorTestingTNewMockServiceDiscovery) *MockServiceDiscovery {
	mock := &MockServiceDiscovery{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
