// This program generates internal/registry/inproc/wrapper_gen.go. Invoked by go generate
package main

import (
	"fmt"
	"html/template"
	"os"
)

var wrapperTpl = template.Must(template.New("").Delims("[[", "]]").Parse(`// Code generated by go generate; DO NOT EDIT
// This file is generated by go generate
package inproc 

import (
	"github.com/milvus-io/milvus/internal/types"
	"github.com/milvus-io/milvus/pkg/util/typeutil"
)
[[range .Services ]][[with .]]
type w[[.]] struct {
	types.[[.]]
}

func (w *w[[.]]) Set(v types.[[.]]) {
	w.[[.]] = v
}

func wrap[[.]](s *inProcServiceDiscovery, v types.[[.]]) types.[[.]] {
	s.serviceMut.Lock()
	defer s.serviceMut.Unlock()
	w := &w[[.]]{[[.]]: v}
	
	s.wrappers[typeutil.[[.]]Role] = append(s.wrappers[typeutil.[[.]]Role], w)
	return w
}
[[end]][[end]]
`))

func main() {
	f, err := os.OpenFile("wrapper_gen.go", os.O_RDWR|os.O_CREATE|os.O_TRUNC, 0755)
	if err != nil {
		fmt.Println(err.Error())
		return
	}
	defer f.Close()
	params := map[string]any{
		"Services": []string{
			"RootCoord",
			"DataCoord",
			"QueryCoord",
		},
	}

	wrapperTpl.Execute(f, params)
}
