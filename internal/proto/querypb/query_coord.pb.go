// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.9.0
// source: query_coord.proto

package querypb

import (
	context "context"
	commonpb "github.com/milvus-io/milvus/internal/proto/commonpb"
	datapb "github.com/milvus-io/milvus/internal/proto/datapb"
	internalpb "github.com/milvus-io/milvus/internal/proto/internalpb"
	milvuspb "github.com/milvus-io/milvus/internal/proto/milvuspb"
	schemapb "github.com/milvus-io/milvus/internal/proto/schemapb"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//-------------------- internal meta proto------------------
type PartitionState int32

const (
	PartitionState_NotExist        PartitionState = 0
	PartitionState_NotPresent      PartitionState = 1
	PartitionState_OnDisk          PartitionState = 2
	PartitionState_PartialInMemory PartitionState = 3
	PartitionState_InMemory        PartitionState = 4
	PartitionState_PartialInGPU    PartitionState = 5
	PartitionState_InGPU           PartitionState = 6
)

// Enum value maps for PartitionState.
var (
	PartitionState_name = map[int32]string{
		0: "NotExist",
		1: "NotPresent",
		2: "OnDisk",
		3: "PartialInMemory",
		4: "InMemory",
		5: "PartialInGPU",
		6: "InGPU",
	}
	PartitionState_value = map[string]int32{
		"NotExist":        0,
		"NotPresent":      1,
		"OnDisk":          2,
		"PartialInMemory": 3,
		"InMemory":        4,
		"PartialInGPU":    5,
		"InGPU":           6,
	}
)

func (x PartitionState) Enum() *PartitionState {
	p := new(PartitionState)
	*p = x
	return p
}

func (x PartitionState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PartitionState) Descriptor() protoreflect.EnumDescriptor {
	return file_query_coord_proto_enumTypes[0].Descriptor()
}

func (PartitionState) Type() protoreflect.EnumType {
	return &file_query_coord_proto_enumTypes[0]
}

func (x PartitionState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PartitionState.Descriptor instead.
func (PartitionState) EnumDescriptor() ([]byte, []int) {
	return file_query_coord_proto_rawDescGZIP(), []int{0}
}

type TriggerCondition int32

const (
	TriggerCondition_UnKnowCondition TriggerCondition = 0
	TriggerCondition_Handoff         TriggerCondition = 1
	TriggerCondition_LoadBalance     TriggerCondition = 2
	TriggerCondition_GrpcRequest     TriggerCondition = 3
	TriggerCondition_NodeDown        TriggerCondition = 4
)

// Enum value maps for TriggerCondition.
var (
	TriggerCondition_name = map[int32]string{
		0: "UnKnowCondition",
		1: "Handoff",
		2: "LoadBalance",
		3: "GrpcRequest",
		4: "NodeDown",
	}
	TriggerCondition_value = map[string]int32{
		"UnKnowCondition": 0,
		"Handoff":         1,
		"LoadBalance":     2,
		"GrpcRequest":     3,
		"NodeDown":        4,
	}
)

func (x TriggerCondition) Enum() *TriggerCondition {
	p := new(TriggerCondition)
	*p = x
	return p
}

func (x TriggerCondition) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TriggerCondition) Descriptor() protoreflect.EnumDescriptor {
	return file_query_coord_proto_enumTypes[1].Descriptor()
}

func (TriggerCondition) Type() protoreflect.EnumType {
	return &file_query_coord_proto_enumTypes[1]
}

func (x TriggerCondition) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TriggerCondition.Descriptor instead.
func (TriggerCondition) EnumDescriptor() ([]byte, []int) {
	return file_query_coord_proto_rawDescGZIP(), []int{1}
}

type LoadType int32

const (
	LoadType_UnKnownType    LoadType = 0
	LoadType_LoadPartition  LoadType = 1
	LoadType_LoadCollection LoadType = 2
)

// Enum value maps for LoadType.
var (
	LoadType_name = map[int32]string{
		0: "UnKnownType",
		1: "LoadPartition",
		2: "LoadCollection",
	}
	LoadType_value = map[string]int32{
		"UnKnownType":    0,
		"LoadPartition":  1,
		"LoadCollection": 2,
	}
)

func (x LoadType) Enum() *LoadType {
	p := new(LoadType)
	*p = x
	return p
}

func (x LoadType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LoadType) Descriptor() protoreflect.EnumDescriptor {
	return file_query_coord_proto_enumTypes[2].Descriptor()
}

func (LoadType) Type() protoreflect.EnumType {
	return &file_query_coord_proto_enumTypes[2]
}

func (x LoadType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LoadType.Descriptor instead.
func (LoadType) EnumDescriptor() ([]byte, []int) {
	return file_query_coord_proto_rawDescGZIP(), []int{2}
}

//--------------------QueryCoord grpc request and response proto------------------
type ShowCollectionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base *commonpb.MsgBase `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	// Not useful for now
	DbID          int64   `protobuf:"varint,2,opt,name=dbID,proto3" json:"dbID,omitempty"`
	CollectionIDs []int64 `protobuf:"varint,3,rep,packed,name=collectionIDs,proto3" json:"collectionIDs,omitempty"`
}

func (x *ShowCollectionsRequest) Reset() {
	*x = ShowCollectionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_query_coord_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShowCollectionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShowCollectionsRequest) ProtoMessage() {}

func (x *ShowCollectionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_query_coord_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShowCollectionsRequest.ProtoReflect.Descriptor instead.
func (*ShowCollectionsRequest) Descriptor() ([]byte, []int) {
	return file_query_coord_proto_rawDescGZIP(), []int{0}
}

func (x *ShowCollectionsRequest) GetBase() *commonpb.MsgBase {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *ShowCollectionsRequest) GetDbID() int64 {
	if x != nil {
		return x.DbID
	}
	return 0
}

func (x *ShowCollectionsRequest) GetCollectionIDs() []int64 {
	if x != nil {
		return x.CollectionIDs
	}
	return nil
}

type ShowCollectionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status              *commonpb.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	CollectionIDs       []int64          `protobuf:"varint,2,rep,packed,name=collectionIDs,proto3" json:"collectionIDs,omitempty"`
	InMemoryPercentages []int64          `protobuf:"varint,3,rep,packed,name=inMemory_percentages,json=inMemoryPercentages,proto3" json:"inMemory_percentages,omitempty"`
}

func (x *ShowCollectionsResponse) Reset() {
	*x = ShowCollectionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_query_coord_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShowCollectionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShowCollectionsResponse) ProtoMessage() {}

func (x *ShowCollectionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_query_coord_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShowCollectionsResponse.ProtoReflect.Descriptor instead.
func (*ShowCollectionsResponse) Descriptor() ([]byte, []int) {
	return file_query_coord_proto_rawDescGZIP(), []int{1}
}

func (x *ShowCollectionsResponse) GetStatus() *commonpb.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *ShowCollectionsResponse) GetCollectionIDs() []int64 {
	if x != nil {
		return x.CollectionIDs
	}
	return nil
}

func (x *ShowCollectionsResponse) GetInMemoryPercentages() []int64 {
	if x != nil {
		return x.InMemoryPercentages
	}
	return nil
}

type ShowPartitionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base         *commonpb.MsgBase `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	DbID         int64             `protobuf:"varint,2,opt,name=dbID,proto3" json:"dbID,omitempty"`
	CollectionID int64             `protobuf:"varint,3,opt,name=collectionID,proto3" json:"collectionID,omitempty"`
	PartitionIDs []int64           `protobuf:"varint,4,rep,packed,name=partitionIDs,proto3" json:"partitionIDs,omitempty"`
}

func (x *ShowPartitionsRequest) Reset() {
	*x = ShowPartitionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_query_coord_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShowPartitionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShowPartitionsRequest) ProtoMessage() {}

func (x *ShowPartitionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_query_coord_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShowPartitionsRequest.ProtoReflect.Descriptor instead.
func (*ShowPartitionsRequest) Descriptor() ([]byte, []int) {
	return file_query_coord_proto_rawDescGZIP(), []int{2}
}

func (x *ShowPartitionsRequest) GetBase() *commonpb.MsgBase {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *ShowPartitionsRequest) GetDbID() int64 {
	if x != nil {
		return x.DbID
	}
	return 0
}

func (x *ShowPartitionsRequest) GetCollectionID() int64 {
	if x != nil {
		return x.CollectionID
	}
	return 0
}

func (x *ShowPartitionsRequest) GetPartitionIDs() []int64 {
	if x != nil {
		return x.PartitionIDs
	}
	return nil
}

type ShowPartitionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status              *commonpb.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	PartitionIDs        []int64          `protobuf:"varint,2,rep,packed,name=partitionIDs,proto3" json:"partitionIDs,omitempty"`
	InMemoryPercentages []int64          `protobuf:"varint,3,rep,packed,name=inMemory_percentages,json=inMemoryPercentages,proto3" json:"inMemory_percentages,omitempty"`
}

func (x *ShowPartitionsResponse) Reset() {
	*x = ShowPartitionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_query_coord_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShowPartitionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShowPartitionsResponse) ProtoMessage() {}

func (x *ShowPartitionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_query_coord_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShowPartitionsResponse.ProtoReflect.Descriptor instead.
func (*ShowPartitionsResponse) Descriptor() ([]byte, []int) {
	return file_query_coord_proto_rawDescGZIP(), []int{3}
}

func (x *ShowPartitionsResponse) GetStatus() *commonpb.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *ShowPartitionsResponse) GetPartitionIDs() []int64 {
	if x != nil {
		return x.PartitionIDs
	}
	return nil
}

func (x *ShowPartitionsResponse) GetInMemoryPercentages() []int64 {
	if x != nil {
		return x.InMemoryPercentages
	}
	return nil
}

type LoadCollectionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base          *commonpb.MsgBase          `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	DbID          int64                      `protobuf:"varint,2,opt,name=dbID,proto3" json:"dbID,omitempty"`
	CollectionID  int64                      `protobuf:"varint,3,opt,name=collectionID,proto3" json:"collectionID,omitempty"`
	Schema        *schemapb.CollectionSchema `protobuf:"bytes,4,opt,name=schema,proto3" json:"schema,omitempty"`
	ReplicaNumber int32                      `protobuf:"varint,5,opt,name=replica_number,json=replicaNumber,proto3" json:"replica_number,omitempty"`
}

func (x *LoadCollectionRequest) Reset() {
	*x = LoadCollectionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_query_coord_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoadCollectionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadCollectionRequest) ProtoMessage() {}

func (x *LoadCollectionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_query_coord_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadCollectionRequest.ProtoReflect.Descriptor instead.
func (*LoadCollectionRequest) Descriptor() ([]byte, []int) {
	return file_query_coord_proto_rawDescGZIP(), []int{4}
}

func (x *LoadCollectionRequest) GetBase() *commonpb.MsgBase {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *LoadCollectionRequest) GetDbID() int64 {
	if x != nil {
		return x.DbID
	}
	return 0
}

func (x *LoadCollectionRequest) GetCollectionID() int64 {
	if x != nil {
		return x.CollectionID
	}
	return 0
}

func (x *LoadCollectionRequest) GetSchema() *schemapb.CollectionSchema {
	if x != nil {
		return x.Schema
	}
	return nil
}

func (x *LoadCollectionRequest) GetReplicaNumber() int32 {
	if x != nil {
		return x.ReplicaNumber
	}
	return 0
}

type ReleaseCollectionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base         *commonpb.MsgBase `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	DbID         int64             `protobuf:"varint,2,opt,name=dbID,proto3" json:"dbID,omitempty"`
	CollectionID int64             `protobuf:"varint,3,opt,name=collectionID,proto3" json:"collectionID,omitempty"`
	NodeID       int64             `protobuf:"varint,4,opt,name=nodeID,proto3" json:"nodeID,omitempty"`
}

func (x *ReleaseCollectionRequest) Reset() {
	*x = ReleaseCollectionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_query_coord_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReleaseCollectionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReleaseCollectionRequest) ProtoMessage() {}

func (x *ReleaseCollectionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_query_coord_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReleaseCollectionRequest.ProtoReflect.Descriptor instead.
func (*ReleaseCollectionRequest) Descriptor() ([]byte, []int) {
	return file_query_coord_proto_rawDescGZIP(), []int{5}
}

func (x *ReleaseCollectionRequest) GetBase() *commonpb.MsgBase {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *ReleaseCollectionRequest) GetDbID() int64 {
	if x != nil {
		return x.DbID
	}
	return 0
}

func (x *ReleaseCollectionRequest) GetCollectionID() int64 {
	if x != nil {
		return x.CollectionID
	}
	return 0
}

func (x *ReleaseCollectionRequest) GetNodeID() int64 {
	if x != nil {
		return x.NodeID
	}
	return 0
}

type LoadPartitionsRequest struct {
<<<<<<< HEAD
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
=======
	Base                 *commonpb.MsgBase          `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	DbID                 int64                      `protobuf:"varint,2,opt,name=dbID,proto3" json:"dbID,omitempty"`
	CollectionID         int64                      `protobuf:"varint,3,opt,name=collectionID,proto3" json:"collectionID,omitempty"`
	PartitionIDs         []int64                    `protobuf:"varint,4,rep,packed,name=partitionIDs,proto3" json:"partitionIDs,omitempty"`
	Schema               *schemapb.CollectionSchema `protobuf:"bytes,5,opt,name=schema,proto3" json:"schema,omitempty"`
	ReplicaNumber        int32                      `protobuf:"varint,6,opt,name=replica_number,json=replicaNumber,proto3" json:"replica_number,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}
>>>>>>> auto balance

	Base          *commonpb.MsgBase          `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	DbID          int64                      `protobuf:"varint,2,opt,name=dbID,proto3" json:"dbID,omitempty"`
	CollectionID  int64                      `protobuf:"varint,3,opt,name=collectionID,proto3" json:"collectionID,omitempty"`
	PartitionIDs  []int64                    `protobuf:"varint,4,rep,packed,name=partitionIDs,proto3" json:"partitionIDs,omitempty"`
	Schema        *schemapb.CollectionSchema `protobuf:"bytes,5,opt,name=schema,proto3" json:"schema,omitempty"`
	ReplicaNumber int32                      `protobuf:"varint,6,opt,name=replica_number,json=replicaNumber,proto3" json:"replica_number,omitempty"`
}

func (x *LoadPartitionsRequest) Reset() {
	*x = LoadPartitionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_query_coord_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoadPartitionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadPartitionsRequest) ProtoMessage() {}

func (x *LoadPartitionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_query_coord_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadPartitionsRequest.ProtoReflect.Descriptor instead.
func (*LoadPartitionsRequest) Descriptor() ([]byte, []int) {
	return file_query_coord_proto_rawDescGZIP(), []int{6}
}

func (x *LoadPartitionsRequest) GetBase() *commonpb.MsgBase {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *LoadPartitionsRequest) GetDbID() int64 {
	if x != nil {
		return x.DbID
	}
	return 0
}

func (x *LoadPartitionsRequest) GetCollectionID() int64 {
	if x != nil {
		return x.CollectionID
	}
	return 0
}

func (x *LoadPartitionsRequest) GetPartitionIDs() []int64 {
	if x != nil {
		return x.PartitionIDs
	}
	return nil
}

func (x *LoadPartitionsRequest) GetSchema() *schemapb.CollectionSchema {
	if x != nil {
		return x.Schema
	}
	return nil
}

<<<<<<< HEAD
<<<<<<< HEAD
func (x *LoadPartitionsRequest) GetReplicaNumber() int32 {
	if x != nil {
		return x.ReplicaNumber
	}
	return 0
=======
func (m *LoadPartitionsRequest) GetReplicaNumber() int32 {
	if m != nil {
		return m.ReplicaNumber
	}
	return 0
}

type ReleasePartitionsRequest struct {
	Base                 *commonpb.MsgBase `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	DbID                 int64             `protobuf:"varint,2,opt,name=dbID,proto3" json:"dbID,omitempty"`
	CollectionID         int64             `protobuf:"varint,3,opt,name=collectionID,proto3" json:"collectionID,omitempty"`
	PartitionIDs         []int64           `protobuf:"varint,4,rep,packed,name=partitionIDs,proto3" json:"partitionIDs,omitempty"`
	NodeID               int64             `protobuf:"varint,5,opt,name=nodeID,proto3" json:"nodeID,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
>>>>>>> merge with yah01/mem_replica
}

=======
>>>>>>> auto balance
type ReleasePartitionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base         *commonpb.MsgBase `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	DbID         int64             `protobuf:"varint,2,opt,name=dbID,proto3" json:"dbID,omitempty"`
	CollectionID int64             `protobuf:"varint,3,opt,name=collectionID,proto3" json:"collectionID,omitempty"`
	PartitionIDs []int64           `protobuf:"varint,4,rep,packed,name=partitionIDs,proto3" json:"partitionIDs,omitempty"`
	NodeID       int64             `protobuf:"varint,5,opt,name=nodeID,proto3" json:"nodeID,omitempty"`
}

func (x *ReleasePartitionsRequest) Reset() {
	*x = ReleasePartitionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_query_coord_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReleasePartitionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReleasePartitionsRequest) ProtoMessage() {}

func (x *ReleasePartitionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_query_coord_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReleasePartitionsRequest.ProtoReflect.Descriptor instead.
func (*ReleasePartitionsRequest) Descriptor() ([]byte, []int) {
	return file_query_coord_proto_rawDescGZIP(), []int{7}
}

func (x *ReleasePartitionsRequest) GetBase() *commonpb.MsgBase {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *ReleasePartitionsRequest) GetDbID() int64 {
	if x != nil {
		return x.DbID
	}
	return 0
}

func (x *ReleasePartitionsRequest) GetCollectionID() int64 {
	if x != nil {
		return x.CollectionID
	}
	return 0
}

func (x *ReleasePartitionsRequest) GetPartitionIDs() []int64 {
	if x != nil {
		return x.PartitionIDs
	}
	return nil
}

func (x *ReleasePartitionsRequest) GetNodeID() int64 {
	if x != nil {
		return x.NodeID
	}
	return 0
}

type CreateQueryChannelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollectionID int64 `protobuf:"varint,1,opt,name=collectionID,proto3" json:"collectionID,omitempty"`
	ProxyID      int64 `protobuf:"varint,2,opt,name=proxyID,proto3" json:"proxyID,omitempty"`
}

func (x *CreateQueryChannelRequest) Reset() {
	*x = CreateQueryChannelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_query_coord_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateQueryChannelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateQueryChannelRequest) ProtoMessage() {}

func (x *CreateQueryChannelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_query_coord_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateQueryChannelRequest.ProtoReflect.Descriptor instead.
func (*CreateQueryChannelRequest) Descriptor() ([]byte, []int) {
	return file_query_coord_proto_rawDescGZIP(), []int{8}
}

func (x *CreateQueryChannelRequest) GetCollectionID() int64 {
	if x != nil {
		return x.CollectionID
	}
	return 0
}

func (x *CreateQueryChannelRequest) GetProxyID() int64 {
	if x != nil {
		return x.ProxyID
	}
	return 0
}

type CreateQueryChannelResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status             *commonpb.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	QueryChannel       string           `protobuf:"bytes,2,opt,name=query_channel,json=queryChannel,proto3" json:"query_channel,omitempty"`
	QueryResultChannel string           `protobuf:"bytes,3,opt,name=query_result_channel,json=queryResultChannel,proto3" json:"query_result_channel,omitempty"`
}

func (x *CreateQueryChannelResponse) Reset() {
	*x = CreateQueryChannelResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_query_coord_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateQueryChannelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateQueryChannelResponse) ProtoMessage() {}

func (x *CreateQueryChannelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_query_coord_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateQueryChannelResponse.ProtoReflect.Descriptor instead.
func (*CreateQueryChannelResponse) Descriptor() ([]byte, []int) {
	return file_query_coord_proto_rawDescGZIP(), []int{9}
}

func (x *CreateQueryChannelResponse) GetStatus() *commonpb.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *CreateQueryChannelResponse) GetQueryChannel() string {
	if x != nil {
		return x.QueryChannel
	}
	return ""
}

func (x *CreateQueryChannelResponse) GetQueryResultChannel() string {
	if x != nil {
		return x.QueryResultChannel
	}
	return ""
}

type GetPartitionStatesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base         *commonpb.MsgBase `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	DbID         int64             `protobuf:"varint,2,opt,name=dbID,proto3" json:"dbID,omitempty"`
	CollectionID int64             `protobuf:"varint,3,opt,name=collectionID,proto3" json:"collectionID,omitempty"`
	PartitionIDs []int64           `protobuf:"varint,4,rep,packed,name=partitionIDs,proto3" json:"partitionIDs,omitempty"`
}

func (x *GetPartitionStatesRequest) Reset() {
	*x = GetPartitionStatesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_query_coord_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPartitionStatesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPartitionStatesRequest) ProtoMessage() {}

func (x *GetPartitionStatesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_query_coord_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPartitionStatesRequest.ProtoReflect.Descriptor instead.
func (*GetPartitionStatesRequest) Descriptor() ([]byte, []int) {
	return file_query_coord_proto_rawDescGZIP(), []int{10}
}

func (x *GetPartitionStatesRequest) GetBase() *commonpb.MsgBase {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *GetPartitionStatesRequest) GetDbID() int64 {
	if x != nil {
		return x.DbID
	}
	return 0
}

func (x *GetPartitionStatesRequest) GetCollectionID() int64 {
	if x != nil {
		return x.CollectionID
	}
	return 0
}

func (x *GetPartitionStatesRequest) GetPartitionIDs() []int64 {
	if x != nil {
		return x.PartitionIDs
	}
	return nil
}

type GetPartitionStatesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status                *commonpb.Status   `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	PartitionDescriptions []*PartitionStates `protobuf:"bytes,2,rep,name=partition_descriptions,json=partitionDescriptions,proto3" json:"partition_descriptions,omitempty"`
}

func (x *GetPartitionStatesResponse) Reset() {
	*x = GetPartitionStatesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_query_coord_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPartitionStatesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPartitionStatesResponse) ProtoMessage() {}

func (x *GetPartitionStatesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_query_coord_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPartitionStatesResponse.ProtoReflect.Descriptor instead.
func (*GetPartitionStatesResponse) Descriptor() ([]byte, []int) {
	return file_query_coord_proto_rawDescGZIP(), []int{11}
}

func (x *GetPartitionStatesResponse) GetStatus() *commonpb.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *GetPartitionStatesResponse) GetPartitionDescriptions() []*PartitionStates {
	if x != nil {
		return x.PartitionDescriptions
	}
	return nil
}

type GetSegmentInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base         *commonpb.MsgBase `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	SegmentIDs   []int64           `protobuf:"varint,2,rep,packed,name=segmentIDs,proto3" json:"segmentIDs,omitempty"` // deprecated
	CollectionID int64             `protobuf:"varint,3,opt,name=collectionID,proto3" json:"collectionID,omitempty"`
}

func (x *GetSegmentInfoRequest) Reset() {
	*x = GetSegmentInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_query_coord_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSegmentInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSegmentInfoRequest) ProtoMessage() {}

func (x *GetSegmentInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_query_coord_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSegmentInfoRequest.ProtoReflect.Descriptor instead.
func (*GetSegmentInfoRequest) Descriptor() ([]byte, []int) {
	return file_query_coord_proto_rawDescGZIP(), []int{12}
}

func (x *GetSegmentInfoRequest) GetBase() *commonpb.MsgBase {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *GetSegmentInfoRequest) GetSegmentIDs() []int64 {
	if x != nil {
		return x.SegmentIDs
	}
	return nil
}

func (x *GetSegmentInfoRequest) GetCollectionID() int64 {
	if x != nil {
		return x.CollectionID
	}
	return 0
}

type GetSegmentInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *commonpb.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Infos  []*SegmentInfo   `protobuf:"bytes,2,rep,name=infos,proto3" json:"infos,omitempty"`
}

func (x *GetSegmentInfoResponse) Reset() {
	*x = GetSegmentInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_query_coord_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSegmentInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

<<<<<<< HEAD
func (*GetSegmentInfoResponse) ProtoMessage() {}

func (x *GetSegmentInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_query_coord_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSegmentInfoResponse.ProtoReflect.Descriptor instead.
func (*GetSegmentInfoResponse) Descriptor() ([]byte, []int) {
	return file_query_coord_proto_rawDescGZIP(), []int{13}
}

func (x *GetSegmentInfoResponse) GetStatus() *commonpb.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *GetSegmentInfoResponse) GetInfos() []*SegmentInfo {
	if x != nil {
		return x.Infos
	}
	return nil
}

type GetShardLeadersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base         *commonpb.MsgBase `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	CollectionID int64             `protobuf:"varint,2,opt,name=collectionID,proto3" json:"collectionID,omitempty"`
}

func (x *GetShardLeadersRequest) Reset() {
	*x = GetShardLeadersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_query_coord_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetShardLeadersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetShardLeadersRequest) ProtoMessage() {}

func (x *GetShardLeadersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_query_coord_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetShardLeadersRequest.ProtoReflect.Descriptor instead.
func (*GetShardLeadersRequest) Descriptor() ([]byte, []int) {
	return file_query_coord_proto_rawDescGZIP(), []int{14}
}

func (x *GetShardLeadersRequest) GetBase() *commonpb.MsgBase {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *GetShardLeadersRequest) GetCollectionID() int64 {
	if x != nil {
		return x.CollectionID
	}
	return 0
}

type GetShardLeadersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *commonpb.Status    `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Shards []*ShardLeadersList `protobuf:"bytes,2,rep,name=shards,proto3" json:"shards,omitempty"`
}

func (x *GetShardLeadersResponse) Reset() {
	*x = GetShardLeadersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_query_coord_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetShardLeadersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetShardLeadersResponse) ProtoMessage() {}

func (x *GetShardLeadersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_query_coord_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetShardLeadersResponse.ProtoReflect.Descriptor instead.
func (*GetShardLeadersResponse) Descriptor() ([]byte, []int) {
	return file_query_coord_proto_rawDescGZIP(), []int{15}
}

func (x *GetShardLeadersResponse) GetStatus() *commonpb.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *GetShardLeadersResponse) GetShards() []*ShardLeadersList {
	if x != nil {
		return x.Shards
	}
	return nil
}

type ShardLeadersList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelName string   `protobuf:"bytes,1,opt,name=channel_name,json=channelName,proto3" json:"channel_name,omitempty"`
	NodeIds     []int64  `protobuf:"varint,2,rep,packed,name=node_ids,json=nodeIds,proto3" json:"node_ids,omitempty"`
	NodeAddrs   []string `protobuf:"bytes,3,rep,name=node_addrs,json=nodeAddrs,proto3" json:"node_addrs,omitempty"`
}

func (x *ShardLeadersList) Reset() {
	*x = ShardLeadersList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_query_coord_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShardLeadersList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShardLeadersList) ProtoMessage() {}

func (x *ShardLeadersList) ProtoReflect() protoreflect.Message {
	mi := &file_query_coord_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShardLeadersList.ProtoReflect.Descriptor instead.
func (*ShardLeadersList) Descriptor() ([]byte, []int) {
	return file_query_coord_proto_rawDescGZIP(), []int{16}
}

func (x *ShardLeadersList) GetChannelName() string {
	if x != nil {
		return x.ChannelName
	}
	return ""
}

func (x *ShardLeadersList) GetNodeIds() []int64 {
	if x != nil {
		return x.NodeIds
	}
	return nil
}

func (x *ShardLeadersList) GetNodeAddrs() []string {
	if x != nil {
		return x.NodeAddrs
	}
	return nil
}

<<<<<<< HEAD
=======
>>>>>>> auto balance
=======
type GetReplicasRequest struct {
	Base                 *commonpb.MsgBase `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	CollectionID         int64             `protobuf:"varint,2,opt,name=collectionID,proto3" json:"collectionID,omitempty"`
	WithShardNodes       bool              `protobuf:"varint,3,opt,name=with_shard_nodes,json=withShardNodes,proto3" json:"with_shard_nodes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *GetReplicasRequest) Reset()         { *m = GetReplicasRequest{} }
func (m *GetReplicasRequest) String() string { return proto.CompactTextString(m) }
func (*GetReplicasRequest) ProtoMessage()    {}
func (*GetReplicasRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_aab7cc9a69ed26e8, []int{14}
}

func (m *GetReplicasRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetReplicasRequest.Unmarshal(m, b)
}
func (m *GetReplicasRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetReplicasRequest.Marshal(b, m, deterministic)
}
func (m *GetReplicasRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetReplicasRequest.Merge(m, src)
}
func (m *GetReplicasRequest) XXX_Size() int {
	return xxx_messageInfo_GetReplicasRequest.Size(m)
}
func (m *GetReplicasRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetReplicasRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetReplicasRequest proto.InternalMessageInfo

func (m *GetReplicasRequest) GetBase() *commonpb.MsgBase {
	if m != nil {
		return m.Base
	}
	return nil
}

func (m *GetReplicasRequest) GetCollectionID() int64 {
	if m != nil {
		return m.CollectionID
	}
	return 0
}

func (m *GetReplicasRequest) GetWithShardNodes() bool {
	if m != nil {
		return m.WithShardNodes
	}
	return false
}

type GetReplicasResponse struct {
	Status               *commonpb.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Replicas             []*ReplicaInfo   `protobuf:"bytes,2,rep,name=replicas,proto3" json:"replicas,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *GetReplicasResponse) Reset()         { *m = GetReplicasResponse{} }
func (m *GetReplicasResponse) String() string { return proto.CompactTextString(m) }
func (*GetReplicasResponse) ProtoMessage()    {}
func (*GetReplicasResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_aab7cc9a69ed26e8, []int{15}
}

func (m *GetReplicasResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetReplicasResponse.Unmarshal(m, b)
}
func (m *GetReplicasResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetReplicasResponse.Marshal(b, m, deterministic)
}
func (m *GetReplicasResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetReplicasResponse.Merge(m, src)
}
func (m *GetReplicasResponse) XXX_Size() int {
	return xxx_messageInfo_GetReplicasResponse.Size(m)
}
func (m *GetReplicasResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetReplicasResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetReplicasResponse proto.InternalMessageInfo

func (m *GetReplicasResponse) GetStatus() *commonpb.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *GetReplicasResponse) GetReplicas() []*ReplicaInfo {
	if m != nil {
		return m.Replicas
	}
	return nil
}

type GetShardLeadersRequest struct {
	Base                 *commonpb.MsgBase `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	CollectionID         int64             `protobuf:"varint,2,opt,name=collectionID,proto3" json:"collectionID,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *GetShardLeadersRequest) Reset()         { *m = GetShardLeadersRequest{} }
func (m *GetShardLeadersRequest) String() string { return proto.CompactTextString(m) }
func (*GetShardLeadersRequest) ProtoMessage()    {}
func (*GetShardLeadersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_aab7cc9a69ed26e8, []int{16}
}

func (m *GetShardLeadersRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetShardLeadersRequest.Unmarshal(m, b)
}
func (m *GetShardLeadersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetShardLeadersRequest.Marshal(b, m, deterministic)
}
func (m *GetShardLeadersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetShardLeadersRequest.Merge(m, src)
}
func (m *GetShardLeadersRequest) XXX_Size() int {
	return xxx_messageInfo_GetShardLeadersRequest.Size(m)
}
func (m *GetShardLeadersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetShardLeadersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetShardLeadersRequest proto.InternalMessageInfo

func (m *GetShardLeadersRequest) GetBase() *commonpb.MsgBase {
	if m != nil {
		return m.Base
	}
	return nil
}

func (m *GetShardLeadersRequest) GetCollectionID() int64 {
	if m != nil {
		return m.CollectionID
	}
	return 0
}

type GetShardLeadersResponse struct {
	Status               *commonpb.Status    `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Shards               []*ShardLeadersList `protobuf:"bytes,2,rep,name=shards,proto3" json:"shards,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *GetShardLeadersResponse) Reset()         { *m = GetShardLeadersResponse{} }
func (m *GetShardLeadersResponse) String() string { return proto.CompactTextString(m) }
func (*GetShardLeadersResponse) ProtoMessage()    {}
func (*GetShardLeadersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_aab7cc9a69ed26e8, []int{17}
}

func (m *GetShardLeadersResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetShardLeadersResponse.Unmarshal(m, b)
}
func (m *GetShardLeadersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetShardLeadersResponse.Marshal(b, m, deterministic)
}
func (m *GetShardLeadersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetShardLeadersResponse.Merge(m, src)
}
func (m *GetShardLeadersResponse) XXX_Size() int {
	return xxx_messageInfo_GetShardLeadersResponse.Size(m)
}
func (m *GetShardLeadersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetShardLeadersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetShardLeadersResponse proto.InternalMessageInfo

func (m *GetShardLeadersResponse) GetStatus() *commonpb.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *GetShardLeadersResponse) GetShards() []*ShardLeadersList {
	if m != nil {
		return m.Shards
	}
	return nil
}

type ShardLeadersList struct {
	ChannelName          string   `protobuf:"bytes,1,opt,name=channel_name,json=channelName,proto3" json:"channel_name,omitempty"`
	NodeIds              []int64  `protobuf:"varint,2,rep,packed,name=node_ids,json=nodeIds,proto3" json:"node_ids,omitempty"`
	NodeAddrs            []string `protobuf:"bytes,3,rep,name=node_addrs,json=nodeAddrs,proto3" json:"node_addrs,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ShardLeadersList) Reset()         { *m = ShardLeadersList{} }
func (m *ShardLeadersList) String() string { return proto.CompactTextString(m) }
func (*ShardLeadersList) ProtoMessage()    {}
func (*ShardLeadersList) Descriptor() ([]byte, []int) {
	return fileDescriptor_aab7cc9a69ed26e8, []int{18}
}

func (m *ShardLeadersList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ShardLeadersList.Unmarshal(m, b)
}
func (m *ShardLeadersList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ShardLeadersList.Marshal(b, m, deterministic)
}
func (m *ShardLeadersList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShardLeadersList.Merge(m, src)
}
func (m *ShardLeadersList) XXX_Size() int {
	return xxx_messageInfo_ShardLeadersList.Size(m)
}
func (m *ShardLeadersList) XXX_DiscardUnknown() {
	xxx_messageInfo_ShardLeadersList.DiscardUnknown(m)
}

var xxx_messageInfo_ShardLeadersList proto.InternalMessageInfo

func (m *ShardLeadersList) GetChannelName() string {
	if m != nil {
		return m.ChannelName
	}
	return ""
}

func (m *ShardLeadersList) GetNodeIds() []int64 {
	if m != nil {
		return m.NodeIds
	}
	return nil
}

func (m *ShardLeadersList) GetNodeAddrs() []string {
	if m != nil {
		return m.NodeAddrs
	}
	return nil
}

>>>>>>> merge with yah01/mem_replica
//-----------------query node grpc request and response proto----------------
type AddQueryChannelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base                 *commonpb.MsgBase       `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	NodeID               int64                   `protobuf:"varint,2,opt,name=nodeID,proto3" json:"nodeID,omitempty"`
	CollectionID         int64                   `protobuf:"varint,3,opt,name=collectionID,proto3" json:"collectionID,omitempty"`
	QueryChannel         string                  `protobuf:"bytes,4,opt,name=query_channel,json=queryChannel,proto3" json:"query_channel,omitempty"`
	QueryResultChannel   string                  `protobuf:"bytes,5,opt,name=query_result_channel,json=queryResultChannel,proto3" json:"query_result_channel,omitempty"`
	SeekPosition         *internalpb.MsgPosition `protobuf:"bytes,6,opt,name=seek_position,json=seekPosition,proto3" json:"seek_position,omitempty"`
	GlobalSealedSegments []*SegmentInfo          `protobuf:"bytes,7,rep,name=global_sealed_segments,json=globalSealedSegments,proto3" json:"global_sealed_segments,omitempty"`
}

<<<<<<< HEAD
func (x *AddQueryChannelRequest) Reset() {
	*x = AddQueryChannelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_query_coord_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
=======
func (m *AddQueryChannelRequest) Reset()         { *m = AddQueryChannelRequest{} }
func (m *AddQueryChannelRequest) String() string { return proto.CompactTextString(m) }
func (*AddQueryChannelRequest) ProtoMessage()    {}
func (*AddQueryChannelRequest) Descriptor() ([]byte, []int) {
<<<<<<< HEAD
	return fileDescriptor_aab7cc9a69ed26e8, []int{14}
>>>>>>> auto balance
=======
	return fileDescriptor_aab7cc9a69ed26e8, []int{19}
>>>>>>> merge with yah01/mem_replica
}

func (x *AddQueryChannelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddQueryChannelRequest) ProtoMessage() {}

func (x *AddQueryChannelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_query_coord_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddQueryChannelRequest.ProtoReflect.Descriptor instead.
func (*AddQueryChannelRequest) Descriptor() ([]byte, []int) {
	return file_query_coord_proto_rawDescGZIP(), []int{17}
}

func (x *AddQueryChannelRequest) GetBase() *commonpb.MsgBase {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *AddQueryChannelRequest) GetNodeID() int64 {
	if x != nil {
		return x.NodeID
	}
	return 0
}

func (x *AddQueryChannelRequest) GetCollectionID() int64 {
	if x != nil {
		return x.CollectionID
	}
	return 0
}

func (x *AddQueryChannelRequest) GetQueryChannel() string {
	if x != nil {
		return x.QueryChannel
	}
	return ""
}

func (x *AddQueryChannelRequest) GetQueryResultChannel() string {
	if x != nil {
		return x.QueryResultChannel
	}
	return ""
}

func (x *AddQueryChannelRequest) GetSeekPosition() *internalpb.MsgPosition {
	if x != nil {
		return x.SeekPosition
	}
	return nil
}

func (x *AddQueryChannelRequest) GetGlobalSealedSegments() []*SegmentInfo {
	if x != nil {
		return x.GlobalSealedSegments
	}
	return nil
}

type RemoveQueryChannelRequest struct {
<<<<<<< HEAD
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
=======
	Base                 *commonpb.MsgBase `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	NodeID               int64             `protobuf:"varint,2,opt,name=nodeID,proto3" json:"nodeID,omitempty"`
	CollectionID         int64             `protobuf:"varint,3,opt,name=collectionID,proto3" json:"collectionID,omitempty"`
	QueryChannel         string            `protobuf:"bytes,4,opt,name=query_channel,json=queryChannel,proto3" json:"query_channel,omitempty"`
	QueryResultChannel   string            `protobuf:"bytes,5,opt,name=query_result_channel,json=queryResultChannel,proto3" json:"query_result_channel,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *RemoveQueryChannelRequest) Reset()         { *m = RemoveQueryChannelRequest{} }
func (m *RemoveQueryChannelRequest) String() string { return proto.CompactTextString(m) }
func (*RemoveQueryChannelRequest) ProtoMessage()    {}
func (*RemoveQueryChannelRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_aab7cc9a69ed26e8, []int{20}
}
>>>>>>> auto balance

	Base               *commonpb.MsgBase `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	NodeID             int64             `protobuf:"varint,2,opt,name=nodeID,proto3" json:"nodeID,omitempty"`
	CollectionID       int64             `protobuf:"varint,3,opt,name=collectionID,proto3" json:"collectionID,omitempty"`
	QueryChannel       string            `protobuf:"bytes,4,opt,name=query_channel,json=queryChannel,proto3" json:"query_channel,omitempty"`
	QueryResultChannel string            `protobuf:"bytes,5,opt,name=query_result_channel,json=queryResultChannel,proto3" json:"query_result_channel,omitempty"`
}

func (x *RemoveQueryChannelRequest) Reset() {
	*x = RemoveQueryChannelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_query_coord_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveQueryChannelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveQueryChannelRequest) ProtoMessage() {}

func (x *RemoveQueryChannelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_query_coord_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveQueryChannelRequest.ProtoReflect.Descriptor instead.
func (*RemoveQueryChannelRequest) Descriptor() ([]byte, []int) {
	return file_query_coord_proto_rawDescGZIP(), []int{18}
}

func (x *RemoveQueryChannelRequest) GetBase() *commonpb.MsgBase {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *RemoveQueryChannelRequest) GetNodeID() int64 {
	if x != nil {
		return x.NodeID
	}
	return 0
}

func (x *RemoveQueryChannelRequest) GetCollectionID() int64 {
	if x != nil {
		return x.CollectionID
	}
	return 0
}

func (x *RemoveQueryChannelRequest) GetQueryChannel() string {
	if x != nil {
		return x.QueryChannel
	}
	return ""
}

func (x *RemoveQueryChannelRequest) GetQueryResultChannel() string {
	if x != nil {
		return x.QueryResultChannel
	}
	return ""
}

type LoadMetaInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

<<<<<<< HEAD
	LoadType     LoadType `protobuf:"varint,1,opt,name=load_type,json=loadType,proto3,enum=milvus.proto.query.LoadType" json:"load_type,omitempty"`
	CollectionID int64    `protobuf:"varint,2,opt,name=collectionID,proto3" json:"collectionID,omitempty"`
	PartitionIDs []int64  `protobuf:"varint,3,rep,packed,name=partitionIDs,proto3" json:"partitionIDs,omitempty"`
=======
func (m *LoadMetaInfo) Reset()         { *m = LoadMetaInfo{} }
func (m *LoadMetaInfo) String() string { return proto.CompactTextString(m) }
func (*LoadMetaInfo) ProtoMessage()    {}
func (*LoadMetaInfo) Descriptor() ([]byte, []int) {
<<<<<<< HEAD
	return fileDescriptor_aab7cc9a69ed26e8, []int{16}
>>>>>>> auto balance
=======
	return fileDescriptor_aab7cc9a69ed26e8, []int{21}
>>>>>>> merge with yah01/mem_replica
}

func (x *LoadMetaInfo) Reset() {
	*x = LoadMetaInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_query_coord_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoadMetaInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadMetaInfo) ProtoMessage() {}

func (x *LoadMetaInfo) ProtoReflect() protoreflect.Message {
	mi := &file_query_coord_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadMetaInfo.ProtoReflect.Descriptor instead.
func (*LoadMetaInfo) Descriptor() ([]byte, []int) {
	return file_query_coord_proto_rawDescGZIP(), []int{19}
}

func (x *LoadMetaInfo) GetLoadType() LoadType {
	if x != nil {
		return x.LoadType
	}
	return LoadType_UnKnownType
}

func (x *LoadMetaInfo) GetCollectionID() int64 {
	if x != nil {
		return x.CollectionID
	}
	return 0
}

func (x *LoadMetaInfo) GetPartitionIDs() []int64 {
	if x != nil {
		return x.PartitionIDs
	}
	return nil
}

type WatchDmChannelsRequest struct {
<<<<<<< HEAD
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
=======
	Base                 *commonpb.MsgBase          `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	NodeID               int64                      `protobuf:"varint,2,opt,name=nodeID,proto3" json:"nodeID,omitempty"`
	CollectionID         int64                      `protobuf:"varint,3,opt,name=collectionID,proto3" json:"collectionID,omitempty"`
	PartitionIDs         []int64                    `protobuf:"varint,4,rep,packed,name=partitionIDs,proto3" json:"partitionIDs,omitempty"`
	Infos                []*datapb.VchannelInfo     `protobuf:"bytes,5,rep,name=infos,proto3" json:"infos,omitempty"`
	Schema               *schemapb.CollectionSchema `protobuf:"bytes,6,opt,name=schema,proto3" json:"schema,omitempty"`
	ExcludeInfos         []*datapb.SegmentInfo      `protobuf:"bytes,7,rep,name=exclude_infos,json=excludeInfos,proto3" json:"exclude_infos,omitempty"`
	LoadMeta             *LoadMetaInfo              `protobuf:"bytes,8,opt,name=load_meta,json=loadMeta,proto3" json:"load_meta,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *WatchDmChannelsRequest) Reset()         { *m = WatchDmChannelsRequest{} }
func (m *WatchDmChannelsRequest) String() string { return proto.CompactTextString(m) }
func (*WatchDmChannelsRequest) ProtoMessage()    {}
func (*WatchDmChannelsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_aab7cc9a69ed26e8, []int{22}
}
>>>>>>> auto balance

	Base         *commonpb.MsgBase          `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	NodeID       int64                      `protobuf:"varint,2,opt,name=nodeID,proto3" json:"nodeID,omitempty"`
	CollectionID int64                      `protobuf:"varint,3,opt,name=collectionID,proto3" json:"collectionID,omitempty"`
	PartitionIDs []int64                    `protobuf:"varint,4,rep,packed,name=partitionIDs,proto3" json:"partitionIDs,omitempty"`
	Infos        []*datapb.VchannelInfo     `protobuf:"bytes,5,rep,name=infos,proto3" json:"infos,omitempty"`
	Schema       *schemapb.CollectionSchema `protobuf:"bytes,6,opt,name=schema,proto3" json:"schema,omitempty"`
	ExcludeInfos []*datapb.SegmentInfo      `protobuf:"bytes,7,rep,name=exclude_infos,json=excludeInfos,proto3" json:"exclude_infos,omitempty"`
	LoadMeta     *LoadMetaInfo              `protobuf:"bytes,8,opt,name=load_meta,json=loadMeta,proto3" json:"load_meta,omitempty"`
	ReplicaID    int64                      `protobuf:"varint,9,opt,name=replicaID,proto3" json:"replicaID,omitempty"`
}

func (x *WatchDmChannelsRequest) Reset() {
	*x = WatchDmChannelsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_query_coord_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WatchDmChannelsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchDmChannelsRequest) ProtoMessage() {}

func (x *WatchDmChannelsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_query_coord_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchDmChannelsRequest.ProtoReflect.Descriptor instead.
func (*WatchDmChannelsRequest) Descriptor() ([]byte, []int) {
	return file_query_coord_proto_rawDescGZIP(), []int{20}
}

func (x *WatchDmChannelsRequest) GetBase() *commonpb.MsgBase {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *WatchDmChannelsRequest) GetNodeID() int64 {
	if x != nil {
		return x.NodeID
	}
	return 0
}

func (x *WatchDmChannelsRequest) GetCollectionID() int64 {
	if x != nil {
		return x.CollectionID
	}
	return 0
}

func (x *WatchDmChannelsRequest) GetPartitionIDs() []int64 {
	if x != nil {
		return x.PartitionIDs
	}
	return nil
}

func (x *WatchDmChannelsRequest) GetInfos() []*datapb.VchannelInfo {
	if x != nil {
		return x.Infos
	}
	return nil
}

func (x *WatchDmChannelsRequest) GetSchema() *schemapb.CollectionSchema {
	if x != nil {
		return x.Schema
	}
	return nil
}

func (x *WatchDmChannelsRequest) GetExcludeInfos() []*datapb.SegmentInfo {
	if x != nil {
		return x.ExcludeInfos
	}
	return nil
}

func (x *WatchDmChannelsRequest) GetLoadMeta() *LoadMetaInfo {
	if x != nil {
		return x.LoadMeta
	}
	return nil
}

<<<<<<< HEAD
func (x *WatchDmChannelsRequest) GetReplicaID() int64 {
	if x != nil {
		return x.ReplicaID
	}
	return 0
=======
type WatchDeltaChannelsRequest struct {
	Base                 *commonpb.MsgBase      `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	NodeID               int64                  `protobuf:"varint,2,opt,name=nodeID,proto3" json:"nodeID,omitempty"`
	CollectionID         int64                  `protobuf:"varint,3,opt,name=collectionID,proto3" json:"collectionID,omitempty"`
	Infos                []*datapb.VchannelInfo `protobuf:"bytes,4,rep,name=infos,proto3" json:"infos,omitempty"`
	LoadMeta             *LoadMetaInfo          `protobuf:"bytes,9,opt,name=load_meta,json=loadMeta,proto3" json:"load_meta,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *WatchDeltaChannelsRequest) Reset()         { *m = WatchDeltaChannelsRequest{} }
func (m *WatchDeltaChannelsRequest) String() string { return proto.CompactTextString(m) }
func (*WatchDeltaChannelsRequest) ProtoMessage()    {}
func (*WatchDeltaChannelsRequest) Descriptor() ([]byte, []int) {
<<<<<<< HEAD
	return fileDescriptor_aab7cc9a69ed26e8, []int{18}
>>>>>>> auto balance
=======
	return fileDescriptor_aab7cc9a69ed26e8, []int{23}
>>>>>>> merge with yah01/mem_replica
}

type WatchDeltaChannelsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base         *commonpb.MsgBase      `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	NodeID       int64                  `protobuf:"varint,2,opt,name=nodeID,proto3" json:"nodeID,omitempty"`
	CollectionID int64                  `protobuf:"varint,3,opt,name=collectionID,proto3" json:"collectionID,omitempty"`
	Infos        []*datapb.VchannelInfo `protobuf:"bytes,4,rep,name=infos,proto3" json:"infos,omitempty"`
	LoadMeta     *LoadMetaInfo          `protobuf:"bytes,9,opt,name=load_meta,json=loadMeta,proto3" json:"load_meta,omitempty"`
}

func (x *WatchDeltaChannelsRequest) Reset() {
	*x = WatchDeltaChannelsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_query_coord_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WatchDeltaChannelsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchDeltaChannelsRequest) ProtoMessage() {}

func (x *WatchDeltaChannelsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_query_coord_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchDeltaChannelsRequest.ProtoReflect.Descriptor instead.
func (*WatchDeltaChannelsRequest) Descriptor() ([]byte, []int) {
	return file_query_coord_proto_rawDescGZIP(), []int{21}
}

func (x *WatchDeltaChannelsRequest) GetBase() *commonpb.MsgBase {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *WatchDeltaChannelsRequest) GetNodeID() int64 {
	if x != nil {
		return x.NodeID
	}
	return 0
}

func (x *WatchDeltaChannelsRequest) GetCollectionID() int64 {
	if x != nil {
		return x.CollectionID
	}
	return 0
}

func (x *WatchDeltaChannelsRequest) GetInfos() []*datapb.VchannelInfo {
	if x != nil {
		return x.Infos
	}
	return nil
}

func (x *WatchDeltaChannelsRequest) GetLoadMeta() *LoadMetaInfo {
	if x != nil {
		return x.LoadMeta
	}
	return nil
}

type SegmentLoadInfo struct {
<<<<<<< HEAD
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
=======
	SegmentID            int64                 `protobuf:"varint,1,opt,name=segmentID,proto3" json:"segmentID,omitempty"`
	PartitionID          int64                 `protobuf:"varint,2,opt,name=partitionID,proto3" json:"partitionID,omitempty"`
	CollectionID         int64                 `protobuf:"varint,3,opt,name=collectionID,proto3" json:"collectionID,omitempty"`
	DbID                 int64                 `protobuf:"varint,4,opt,name=dbID,proto3" json:"dbID,omitempty"`
	FlushTime            int64                 `protobuf:"varint,5,opt,name=flush_time,json=flushTime,proto3" json:"flush_time,omitempty"`
	BinlogPaths          []*datapb.FieldBinlog `protobuf:"bytes,6,rep,name=binlog_paths,json=binlogPaths,proto3" json:"binlog_paths,omitempty"`
	NumOfRows            int64                 `protobuf:"varint,7,opt,name=num_of_rows,json=numOfRows,proto3" json:"num_of_rows,omitempty"`
	Statslogs            []*datapb.FieldBinlog `protobuf:"bytes,8,rep,name=statslogs,proto3" json:"statslogs,omitempty"`
	Deltalogs            []*datapb.FieldBinlog `protobuf:"bytes,9,rep,name=deltalogs,proto3" json:"deltalogs,omitempty"`
	CompactionFrom       []int64               `protobuf:"varint,10,rep,packed,name=compactionFrom,proto3" json:"compactionFrom,omitempty"`
	IndexInfos           []*FieldIndexInfo     `protobuf:"bytes,11,rep,name=index_infos,json=indexInfos,proto3" json:"index_infos,omitempty"`
	SegmentSize          int64                 `protobuf:"varint,12,opt,name=segment_size,json=segmentSize,proto3" json:"segment_size,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *SegmentLoadInfo) Reset()         { *m = SegmentLoadInfo{} }
func (m *SegmentLoadInfo) String() string { return proto.CompactTextString(m) }
func (*SegmentLoadInfo) ProtoMessage()    {}
func (*SegmentLoadInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_aab7cc9a69ed26e8, []int{24}
}
>>>>>>> auto balance

	SegmentID      int64                 `protobuf:"varint,1,opt,name=segmentID,proto3" json:"segmentID,omitempty"`
	PartitionID    int64                 `protobuf:"varint,2,opt,name=partitionID,proto3" json:"partitionID,omitempty"`
	CollectionID   int64                 `protobuf:"varint,3,opt,name=collectionID,proto3" json:"collectionID,omitempty"`
	DbID           int64                 `protobuf:"varint,4,opt,name=dbID,proto3" json:"dbID,omitempty"`
	FlushTime      int64                 `protobuf:"varint,5,opt,name=flush_time,json=flushTime,proto3" json:"flush_time,omitempty"`
	BinlogPaths    []*datapb.FieldBinlog `protobuf:"bytes,6,rep,name=binlog_paths,json=binlogPaths,proto3" json:"binlog_paths,omitempty"`
	NumOfRows      int64                 `protobuf:"varint,7,opt,name=num_of_rows,json=numOfRows,proto3" json:"num_of_rows,omitempty"`
	Statslogs      []*datapb.FieldBinlog `protobuf:"bytes,8,rep,name=statslogs,proto3" json:"statslogs,omitempty"`
	Deltalogs      []*datapb.FieldBinlog `protobuf:"bytes,9,rep,name=deltalogs,proto3" json:"deltalogs,omitempty"`
	CompactionFrom []int64               `protobuf:"varint,10,rep,packed,name=compactionFrom,proto3" json:"compactionFrom,omitempty"` // segmentIDs compacted from
	IndexInfos     []*FieldIndexInfo     `protobuf:"bytes,11,rep,name=index_infos,json=indexInfos,proto3" json:"index_infos,omitempty"`
	SegmentSize    int64                 `protobuf:"varint,12,opt,name=segment_size,json=segmentSize,proto3" json:"segment_size,omitempty"`
}

func (x *SegmentLoadInfo) Reset() {
	*x = SegmentLoadInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_query_coord_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SegmentLoadInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SegmentLoadInfo) ProtoMessage() {}

func (x *SegmentLoadInfo) ProtoReflect() protoreflect.Message {
	mi := &file_query_coord_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SegmentLoadInfo.ProtoReflect.Descriptor instead.
func (*SegmentLoadInfo) Descriptor() ([]byte, []int) {
	return file_query_coord_proto_rawDescGZIP(), []int{22}
}

func (x *SegmentLoadInfo) GetSegmentID() int64 {
	if x != nil {
		return x.SegmentID
	}
	return 0
}

func (x *SegmentLoadInfo) GetPartitionID() int64 {
	if x != nil {
		return x.PartitionID
	}
	return 0
}

func (x *SegmentLoadInfo) GetCollectionID() int64 {
	if x != nil {
		return x.CollectionID
	}
	return 0
}

func (x *SegmentLoadInfo) GetDbID() int64 {
	if x != nil {
		return x.DbID
	}
	return 0
}

func (x *SegmentLoadInfo) GetFlushTime() int64 {
	if x != nil {
		return x.FlushTime
	}
	return 0
}

func (x *SegmentLoadInfo) GetBinlogPaths() []*datapb.FieldBinlog {
	if x != nil {
		return x.BinlogPaths
	}
	return nil
}

func (x *SegmentLoadInfo) GetNumOfRows() int64 {
	if x != nil {
		return x.NumOfRows
	}
	return 0
}

func (x *SegmentLoadInfo) GetStatslogs() []*datapb.FieldBinlog {
	if x != nil {
		return x.Statslogs
	}
	return nil
}

func (x *SegmentLoadInfo) GetDeltalogs() []*datapb.FieldBinlog {
	if x != nil {
		return x.Deltalogs
	}
	return nil
}

func (x *SegmentLoadInfo) GetCompactionFrom() []int64 {
	if x != nil {
		return x.CompactionFrom
	}
	return nil
}

<<<<<<< HEAD
<<<<<<< HEAD
func (x *SegmentLoadInfo) GetIndexInfos() []*FieldIndexInfo {
	if x != nil {
		return x.IndexInfos
=======
func (m *SegmentLoadInfo) GetIndexInfos() []*VecFieldIndexInfo {
=======
func (m *SegmentLoadInfo) GetIndexInfos() []*FieldIndexInfo {
>>>>>>> merge with yah01/mem_replica
	if m != nil {
		return m.IndexInfos
>>>>>>> auto balance
	}
	return nil
}

func (x *SegmentLoadInfo) GetSegmentSize() int64 {
	if x != nil {
		return x.SegmentSize
	}
	return 0
}

<<<<<<< HEAD
<<<<<<< HEAD
type FieldIndexInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FieldID        int64                    `protobuf:"varint,1,opt,name=fieldID,proto3" json:"fieldID,omitempty"`
	EnableIndex    bool                     `protobuf:"varint,2,opt,name=enable_index,json=enableIndex,proto3" json:"enable_index,omitempty"`
	IndexName      string                   `protobuf:"bytes,3,opt,name=index_name,json=indexName,proto3" json:"index_name,omitempty"`
	IndexID        int64                    `protobuf:"varint,4,opt,name=indexID,proto3" json:"indexID,omitempty"`
	BuildID        int64                    `protobuf:"varint,5,opt,name=buildID,proto3" json:"buildID,omitempty"`
	IndexParams    []*commonpb.KeyValuePair `protobuf:"bytes,6,rep,name=index_params,json=indexParams,proto3" json:"index_params,omitempty"`
	IndexFilePaths []string                 `protobuf:"bytes,7,rep,name=index_file_paths,json=indexFilePaths,proto3" json:"index_file_paths,omitempty"`
	IndexSize      int64                    `protobuf:"varint,8,opt,name=index_size,json=indexSize,proto3" json:"index_size,omitempty"`
}

func (x *FieldIndexInfo) Reset() {
	*x = FieldIndexInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_query_coord_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FieldIndexInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldIndexInfo) ProtoMessage() {}

func (x *FieldIndexInfo) ProtoReflect() protoreflect.Message {
	mi := &file_query_coord_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldIndexInfo.ProtoReflect.Descriptor instead.
func (*FieldIndexInfo) Descriptor() ([]byte, []int) {
	return file_query_coord_proto_rawDescGZIP(), []int{23}
}

func (x *FieldIndexInfo) GetFieldID() int64 {
	if x != nil {
		return x.FieldID
=======
type VecFieldIndexInfo struct {
=======
type FieldIndexInfo struct {
>>>>>>> merge with yah01/mem_replica
	FieldID              int64                    `protobuf:"varint,1,opt,name=fieldID,proto3" json:"fieldID,omitempty"`
	EnableIndex          bool                     `protobuf:"varint,2,opt,name=enable_index,json=enableIndex,proto3" json:"enable_index,omitempty"`
	IndexName            string                   `protobuf:"bytes,3,opt,name=index_name,json=indexName,proto3" json:"index_name,omitempty"`
	IndexID              int64                    `protobuf:"varint,4,opt,name=indexID,proto3" json:"indexID,omitempty"`
	BuildID              int64                    `protobuf:"varint,5,opt,name=buildID,proto3" json:"buildID,omitempty"`
	IndexParams          []*commonpb.KeyValuePair `protobuf:"bytes,6,rep,name=index_params,json=indexParams,proto3" json:"index_params,omitempty"`
	IndexFilePaths       []string                 `protobuf:"bytes,7,rep,name=index_file_paths,json=indexFilePaths,proto3" json:"index_file_paths,omitempty"`
	IndexSize            int64                    `protobuf:"varint,8,opt,name=index_size,json=indexSize,proto3" json:"index_size,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *FieldIndexInfo) Reset()         { *m = FieldIndexInfo{} }
func (m *FieldIndexInfo) String() string { return proto.CompactTextString(m) }
func (*FieldIndexInfo) ProtoMessage()    {}
func (*FieldIndexInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_aab7cc9a69ed26e8, []int{25}
}

func (m *FieldIndexInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FieldIndexInfo.Unmarshal(m, b)
}
func (m *FieldIndexInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FieldIndexInfo.Marshal(b, m, deterministic)
}
func (m *FieldIndexInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FieldIndexInfo.Merge(m, src)
}
func (m *FieldIndexInfo) XXX_Size() int {
	return xxx_messageInfo_FieldIndexInfo.Size(m)
}
func (m *FieldIndexInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_FieldIndexInfo.DiscardUnknown(m)
}

var xxx_messageInfo_FieldIndexInfo proto.InternalMessageInfo

func (m *FieldIndexInfo) GetFieldID() int64 {
	if m != nil {
		return m.FieldID
>>>>>>> auto balance
	}
	return 0
}

<<<<<<< HEAD
<<<<<<< HEAD
func (x *FieldIndexInfo) GetEnableIndex() bool {
	if x != nil {
		return x.EnableIndex
=======
func (m *VecFieldIndexInfo) GetEnableIndex() bool {
=======
func (m *FieldIndexInfo) GetEnableIndex() bool {
>>>>>>> merge with yah01/mem_replica
	if m != nil {
		return m.EnableIndex
>>>>>>> auto balance
	}
	return false
}

<<<<<<< HEAD
<<<<<<< HEAD
func (x *FieldIndexInfo) GetIndexName() string {
	if x != nil {
		return x.IndexName
=======
func (m *VecFieldIndexInfo) GetIndexName() string {
=======
func (m *FieldIndexInfo) GetIndexName() string {
>>>>>>> merge with yah01/mem_replica
	if m != nil {
		return m.IndexName
>>>>>>> auto balance
	}
	return ""
}

<<<<<<< HEAD
<<<<<<< HEAD
func (x *FieldIndexInfo) GetIndexID() int64 {
	if x != nil {
		return x.IndexID
=======
func (m *VecFieldIndexInfo) GetIndexID() int64 {
=======
func (m *FieldIndexInfo) GetIndexID() int64 {
>>>>>>> merge with yah01/mem_replica
	if m != nil {
		return m.IndexID
>>>>>>> auto balance
	}
	return 0
}

<<<<<<< HEAD
<<<<<<< HEAD
func (x *FieldIndexInfo) GetBuildID() int64 {
	if x != nil {
		return x.BuildID
=======
func (m *VecFieldIndexInfo) GetBuildID() int64 {
=======
func (m *FieldIndexInfo) GetBuildID() int64 {
>>>>>>> merge with yah01/mem_replica
	if m != nil {
		return m.BuildID
>>>>>>> auto balance
	}
	return 0
}

<<<<<<< HEAD
<<<<<<< HEAD
func (x *FieldIndexInfo) GetIndexParams() []*commonpb.KeyValuePair {
	if x != nil {
		return x.IndexParams
=======
func (m *VecFieldIndexInfo) GetIndexParams() []*commonpb.KeyValuePair {
=======
func (m *FieldIndexInfo) GetIndexParams() []*commonpb.KeyValuePair {
>>>>>>> merge with yah01/mem_replica
	if m != nil {
		return m.IndexParams
>>>>>>> auto balance
	}
	return nil
}

<<<<<<< HEAD
<<<<<<< HEAD
func (x *FieldIndexInfo) GetIndexFilePaths() []string {
	if x != nil {
		return x.IndexFilePaths
=======
func (m *VecFieldIndexInfo) GetIndexFilePaths() []string {
=======
func (m *FieldIndexInfo) GetIndexFilePaths() []string {
>>>>>>> merge with yah01/mem_replica
	if m != nil {
		return m.IndexFilePaths
>>>>>>> auto balance
	}
	return nil
}

<<<<<<< HEAD
<<<<<<< HEAD
func (x *FieldIndexInfo) GetIndexSize() int64 {
	if x != nil {
		return x.IndexSize
=======
func (m *VecFieldIndexInfo) GetIndexSize() int64 {
=======
func (m *FieldIndexInfo) GetIndexSize() int64 {
>>>>>>> merge with yah01/mem_replica
	if m != nil {
		return m.IndexSize
>>>>>>> auto balance
	}
	return 0
}

type LoadSegmentsRequest struct {
<<<<<<< HEAD
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
=======
	Base                 *commonpb.MsgBase          `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	DstNodeID            int64                      `protobuf:"varint,2,opt,name=dst_nodeID,json=dstNodeID,proto3" json:"dst_nodeID,omitempty"`
	Infos                []*SegmentLoadInfo         `protobuf:"bytes,3,rep,name=infos,proto3" json:"infos,omitempty"`
	Schema               *schemapb.CollectionSchema `protobuf:"bytes,4,opt,name=schema,proto3" json:"schema,omitempty"`
	SourceNodeID         int64                      `protobuf:"varint,5,opt,name=source_nodeID,json=sourceNodeID,proto3" json:"source_nodeID,omitempty"`
	CollectionID         int64                      `protobuf:"varint,6,opt,name=collectionID,proto3" json:"collectionID,omitempty"`
	LoadMeta             *LoadMetaInfo              `protobuf:"bytes,7,opt,name=load_meta,json=loadMeta,proto3" json:"load_meta,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *LoadSegmentsRequest) Reset()         { *m = LoadSegmentsRequest{} }
func (m *LoadSegmentsRequest) String() string { return proto.CompactTextString(m) }
func (*LoadSegmentsRequest) ProtoMessage()    {}
func (*LoadSegmentsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_aab7cc9a69ed26e8, []int{26}
}
>>>>>>> auto balance

	Base         *commonpb.MsgBase          `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	DstNodeID    int64                      `protobuf:"varint,2,opt,name=dst_nodeID,json=dstNodeID,proto3" json:"dst_nodeID,omitempty"`
	Infos        []*SegmentLoadInfo         `protobuf:"bytes,3,rep,name=infos,proto3" json:"infos,omitempty"`
	Schema       *schemapb.CollectionSchema `protobuf:"bytes,4,opt,name=schema,proto3" json:"schema,omitempty"`
	SourceNodeID int64                      `protobuf:"varint,5,opt,name=source_nodeID,json=sourceNodeID,proto3" json:"source_nodeID,omitempty"`
	CollectionID int64                      `protobuf:"varint,6,opt,name=collectionID,proto3" json:"collectionID,omitempty"`
	LoadMeta     *LoadMetaInfo              `protobuf:"bytes,7,opt,name=load_meta,json=loadMeta,proto3" json:"load_meta,omitempty"`
}

func (x *LoadSegmentsRequest) Reset() {
	*x = LoadSegmentsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_query_coord_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoadSegmentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadSegmentsRequest) ProtoMessage() {}

func (x *LoadSegmentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_query_coord_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadSegmentsRequest.ProtoReflect.Descriptor instead.
func (*LoadSegmentsRequest) Descriptor() ([]byte, []int) {
	return file_query_coord_proto_rawDescGZIP(), []int{24}
}

func (x *LoadSegmentsRequest) GetBase() *commonpb.MsgBase {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *LoadSegmentsRequest) GetDstNodeID() int64 {
	if x != nil {
		return x.DstNodeID
	}
	return 0
}

func (x *LoadSegmentsRequest) GetInfos() []*SegmentLoadInfo {
	if x != nil {
		return x.Infos
	}
	return nil
}

func (x *LoadSegmentsRequest) GetSchema() *schemapb.CollectionSchema {
	if x != nil {
		return x.Schema
	}
	return nil
}

func (x *LoadSegmentsRequest) GetSourceNodeID() int64 {
	if x != nil {
		return x.SourceNodeID
	}
	return 0
}

func (x *LoadSegmentsRequest) GetCollectionID() int64 {
	if x != nil {
		return x.CollectionID
	}
	return 0
}

func (x *LoadSegmentsRequest) GetLoadMeta() *LoadMetaInfo {
	if x != nil {
		return x.LoadMeta
	}
	return nil
}

type ReleaseSegmentsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base   *commonpb.MsgBase `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	NodeID int64             `protobuf:"varint,2,opt,name=nodeID,proto3" json:"nodeID,omitempty"`
	// Not useful for now
<<<<<<< HEAD
	DbID         int64   `protobuf:"varint,3,opt,name=dbID,proto3" json:"dbID,omitempty"`
	CollectionID int64   `protobuf:"varint,4,opt,name=collectionID,proto3" json:"collectionID,omitempty"`
	PartitionIDs []int64 `protobuf:"varint,5,rep,packed,name=partitionIDs,proto3" json:"partitionIDs,omitempty"`
	SegmentIDs   []int64 `protobuf:"varint,6,rep,packed,name=segmentIDs,proto3" json:"segmentIDs,omitempty"`
=======
	DbID                 int64    `protobuf:"varint,3,opt,name=dbID,proto3" json:"dbID,omitempty"`
	CollectionID         int64    `protobuf:"varint,4,opt,name=collectionID,proto3" json:"collectionID,omitempty"`
	PartitionIDs         []int64  `protobuf:"varint,5,rep,packed,name=partitionIDs,proto3" json:"partitionIDs,omitempty"`
	SegmentIDs           []int64  `protobuf:"varint,6,rep,packed,name=segmentIDs,proto3" json:"segmentIDs,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReleaseSegmentsRequest) Reset()         { *m = ReleaseSegmentsRequest{} }
func (m *ReleaseSegmentsRequest) String() string { return proto.CompactTextString(m) }
func (*ReleaseSegmentsRequest) ProtoMessage()    {}
func (*ReleaseSegmentsRequest) Descriptor() ([]byte, []int) {
<<<<<<< HEAD
	return fileDescriptor_aab7cc9a69ed26e8, []int{22}
>>>>>>> auto balance
=======
	return fileDescriptor_aab7cc9a69ed26e8, []int{27}
>>>>>>> merge with yah01/mem_replica
}

func (x *ReleaseSegmentsRequest) Reset() {
	*x = ReleaseSegmentsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_query_coord_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReleaseSegmentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReleaseSegmentsRequest) ProtoMessage() {}

func (x *ReleaseSegmentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_query_coord_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReleaseSegmentsRequest.ProtoReflect.Descriptor instead.
func (*ReleaseSegmentsRequest) Descriptor() ([]byte, []int) {
	return file_query_coord_proto_rawDescGZIP(), []int{25}
}

func (x *ReleaseSegmentsRequest) GetBase() *commonpb.MsgBase {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *ReleaseSegmentsRequest) GetNodeID() int64 {
	if x != nil {
		return x.NodeID
	}
	return 0
}

func (x *ReleaseSegmentsRequest) GetDbID() int64 {
	if x != nil {
		return x.DbID
	}
	return 0
}

func (x *ReleaseSegmentsRequest) GetCollectionID() int64 {
	if x != nil {
		return x.CollectionID
	}
	return 0
}

func (x *ReleaseSegmentsRequest) GetPartitionIDs() []int64 {
	if x != nil {
		return x.PartitionIDs
	}
	return nil
}

func (x *ReleaseSegmentsRequest) GetSegmentIDs() []int64 {
	if x != nil {
		return x.SegmentIDs
	}
	return nil
}

<<<<<<< HEAD
<<<<<<< HEAD
type SearchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Req        *internalpb.SearchRequest `protobuf:"bytes,1,opt,name=req,proto3" json:"req,omitempty"`
	DmlChannel string                    `protobuf:"bytes,2,opt,name=dml_channel,json=dmlChannel,proto3" json:"dml_channel,omitempty"`
	SegmentIDs []int64                   `protobuf:"varint,3,rep,packed,name=segmentIDs,proto3" json:"segmentIDs,omitempty"`
}

func (x *SearchRequest) Reset() {
	*x = SearchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_query_coord_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchRequest) ProtoMessage() {}

func (x *SearchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_query_coord_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchRequest.ProtoReflect.Descriptor instead.
func (*SearchRequest) Descriptor() ([]byte, []int) {
	return file_query_coord_proto_rawDescGZIP(), []int{26}
}

func (x *SearchRequest) GetReq() *internalpb.SearchRequest {
	if x != nil {
		return x.Req
=======
type SearchRequest struct {
	Req                  *milvuspb.SearchRequest `protobuf:"bytes,1,opt,name=req,proto3" json:"req,omitempty"`
	DmlChannel           string                  `protobuf:"bytes,2,opt,name=dml_channel,json=dmlChannel,proto3" json:"dml_channel,omitempty"`
	SegmentIDs           []int64                 `protobuf:"varint,3,rep,packed,name=segmentIDs,proto3" json:"segmentIDs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *SearchRequest) Reset()         { *m = SearchRequest{} }
func (m *SearchRequest) String() string { return proto.CompactTextString(m) }
func (*SearchRequest) ProtoMessage()    {}
func (*SearchRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_aab7cc9a69ed26e8, []int{28}
}

func (m *SearchRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SearchRequest.Unmarshal(m, b)
}
func (m *SearchRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SearchRequest.Marshal(b, m, deterministic)
}
func (m *SearchRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SearchRequest.Merge(m, src)
}
func (m *SearchRequest) XXX_Size() int {
	return xxx_messageInfo_SearchRequest.Size(m)
}
func (m *SearchRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SearchRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SearchRequest proto.InternalMessageInfo

func (m *SearchRequest) GetReq() *milvuspb.SearchRequest {
	if m != nil {
		return m.Req
>>>>>>> merge with yah01/mem_replica
	}
	return nil
}

<<<<<<< HEAD
func (x *SearchRequest) GetDmlChannel() string {
	if x != nil {
		return x.DmlChannel
=======
func (m *SearchRequest) GetDmlChannel() string {
	if m != nil {
		return m.DmlChannel
>>>>>>> merge with yah01/mem_replica
	}
	return ""
}

<<<<<<< HEAD
func (x *SearchRequest) GetSegmentIDs() []int64 {
	if x != nil {
		return x.SegmentIDs
=======
func (m *SearchRequest) GetSegmentIDs() []int64 {
	if m != nil {
		return m.SegmentIDs
>>>>>>> merge with yah01/mem_replica
	}
	return nil
}

type QueryRequest struct {
<<<<<<< HEAD
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Req        *internalpb.RetrieveRequest `protobuf:"bytes,1,opt,name=req,proto3" json:"req,omitempty"`
	DmlChannel string                      `protobuf:"bytes,2,opt,name=dml_channel,json=dmlChannel,proto3" json:"dml_channel,omitempty"`
	SegmentIDs []int64                     `protobuf:"varint,3,rep,packed,name=segmentIDs,proto3" json:"segmentIDs,omitempty"`
}

func (x *QueryRequest) Reset() {
	*x = QueryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_query_coord_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
=======
	Req                  *milvuspb.QueryRequest `protobuf:"bytes,1,opt,name=req,proto3" json:"req,omitempty"`
	DmlChannel           string                 `protobuf:"bytes,2,opt,name=dml_channel,json=dmlChannel,proto3" json:"dml_channel,omitempty"`
	SegmentIDs           []int64                `protobuf:"varint,3,rep,packed,name=segmentIDs,proto3" json:"segmentIDs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *QueryRequest) Reset()         { *m = QueryRequest{} }
func (m *QueryRequest) String() string { return proto.CompactTextString(m) }
func (*QueryRequest) ProtoMessage()    {}
func (*QueryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_aab7cc9a69ed26e8, []int{29}
}

func (m *QueryRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QueryRequest.Unmarshal(m, b)
}
func (m *QueryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QueryRequest.Marshal(b, m, deterministic)
}
func (m *QueryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRequest.Merge(m, src)
}
func (m *QueryRequest) XXX_Size() int {
	return xxx_messageInfo_QueryRequest.Size(m)
}
func (m *QueryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRequest proto.InternalMessageInfo

func (m *QueryRequest) GetReq() *milvuspb.QueryRequest {
	if m != nil {
		return m.Req
	}
	return nil
}

func (m *QueryRequest) GetDmlChannel() string {
	if m != nil {
		return m.DmlChannel
	}
	return ""
}

func (m *QueryRequest) GetSegmentIDs() []int64 {
	if m != nil {
		return m.SegmentIDs
	}
	return nil
}

//----------------request auto triggered by QueryCoord-----------------
type HandoffSegmentsRequest struct {
	Base                 *commonpb.MsgBase `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	SegmentInfos         []*SegmentInfo    `protobuf:"bytes,2,rep,name=segmentInfos,proto3" json:"segmentInfos,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
>>>>>>> merge with yah01/mem_replica
}

func (*QueryRequest) ProtoMessage() {}

func (x *QueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_query_coord_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryRequest.ProtoReflect.Descriptor instead.
func (*QueryRequest) Descriptor() ([]byte, []int) {
	return file_query_coord_proto_rawDescGZIP(), []int{27}
}

func (x *QueryRequest) GetReq() *internalpb.RetrieveRequest {
	if x != nil {
		return x.Req
	}
	return nil
}

func (x *QueryRequest) GetDmlChannel() string {
	if x != nil {
		return x.DmlChannel
	}
	return ""
}

func (x *QueryRequest) GetSegmentIDs() []int64 {
	if x != nil {
		return x.SegmentIDs
	}
	return nil
}

=======
>>>>>>> auto balance
//----------------request auto triggered by QueryCoord-----------------
type HandoffSegmentsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

<<<<<<< HEAD
	Base         *commonpb.MsgBase `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	SegmentInfos []*SegmentInfo    `protobuf:"bytes,2,rep,name=segmentInfos,proto3" json:"segmentInfos,omitempty"`
=======
func (m *HandoffSegmentsRequest) Reset()         { *m = HandoffSegmentsRequest{} }
func (m *HandoffSegmentsRequest) String() string { return proto.CompactTextString(m) }
func (*HandoffSegmentsRequest) ProtoMessage()    {}
func (*HandoffSegmentsRequest) Descriptor() ([]byte, []int) {
<<<<<<< HEAD
	return fileDescriptor_aab7cc9a69ed26e8, []int{23}
>>>>>>> auto balance
=======
	return fileDescriptor_aab7cc9a69ed26e8, []int{30}
>>>>>>> merge with yah01/mem_replica
}

func (x *HandoffSegmentsRequest) Reset() {
	*x = HandoffSegmentsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_query_coord_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HandoffSegmentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HandoffSegmentsRequest) ProtoMessage() {}

func (x *HandoffSegmentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_query_coord_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HandoffSegmentsRequest.ProtoReflect.Descriptor instead.
func (*HandoffSegmentsRequest) Descriptor() ([]byte, []int) {
	return file_query_coord_proto_rawDescGZIP(), []int{28}
}

func (x *HandoffSegmentsRequest) GetBase() *commonpb.MsgBase {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *HandoffSegmentsRequest) GetSegmentInfos() []*SegmentInfo {
	if x != nil {
		return x.SegmentInfos
	}
	return nil
}

type LoadBalanceRequest struct {
<<<<<<< HEAD
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
=======
	Base                 *commonpb.MsgBase `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	SourceNodeIDs        []int64           `protobuf:"varint,2,rep,packed,name=source_nodeIDs,json=sourceNodeIDs,proto3" json:"source_nodeIDs,omitempty"`
	BalanceReason        TriggerCondition  `protobuf:"varint,3,opt,name=balance_reason,json=balanceReason,proto3,enum=milvus.proto.query.TriggerCondition" json:"balance_reason,omitempty"`
	DstNodeIDs           []int64           `protobuf:"varint,4,rep,packed,name=dst_nodeIDs,json=dstNodeIDs,proto3" json:"dst_nodeIDs,omitempty"`
	SealedSegmentIDs     []int64           `protobuf:"varint,5,rep,packed,name=sealed_segmentIDs,json=sealedSegmentIDs,proto3" json:"sealed_segmentIDs,omitempty"`
	CollectionID         int64             `protobuf:"varint,6,opt,name=collectionID,proto3" json:"collectionID,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *LoadBalanceRequest) Reset()         { *m = LoadBalanceRequest{} }
func (m *LoadBalanceRequest) String() string { return proto.CompactTextString(m) }
func (*LoadBalanceRequest) ProtoMessage()    {}
func (*LoadBalanceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_aab7cc9a69ed26e8, []int{31}
}
>>>>>>> auto balance

	Base             *commonpb.MsgBase `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	SourceNodeIDs    []int64           `protobuf:"varint,2,rep,packed,name=source_nodeIDs,json=sourceNodeIDs,proto3" json:"source_nodeIDs,omitempty"`
	BalanceReason    TriggerCondition  `protobuf:"varint,3,opt,name=balance_reason,json=balanceReason,proto3,enum=milvus.proto.query.TriggerCondition" json:"balance_reason,omitempty"`
	DstNodeIDs       []int64           `protobuf:"varint,4,rep,packed,name=dst_nodeIDs,json=dstNodeIDs,proto3" json:"dst_nodeIDs,omitempty"`
	SealedSegmentIDs []int64           `protobuf:"varint,5,rep,packed,name=sealed_segmentIDs,json=sealedSegmentIDs,proto3" json:"sealed_segmentIDs,omitempty"`
}

func (x *LoadBalanceRequest) Reset() {
	*x = LoadBalanceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_query_coord_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoadBalanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadBalanceRequest) ProtoMessage() {}

func (x *LoadBalanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_query_coord_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadBalanceRequest.ProtoReflect.Descriptor instead.
func (*LoadBalanceRequest) Descriptor() ([]byte, []int) {
	return file_query_coord_proto_rawDescGZIP(), []int{29}
}

func (x *LoadBalanceRequest) GetBase() *commonpb.MsgBase {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *LoadBalanceRequest) GetSourceNodeIDs() []int64 {
	if x != nil {
		return x.SourceNodeIDs
	}
	return nil
}

func (x *LoadBalanceRequest) GetBalanceReason() TriggerCondition {
	if x != nil {
		return x.BalanceReason
	}
	return TriggerCondition_UnKnowCondition
}

func (x *LoadBalanceRequest) GetDstNodeIDs() []int64 {
	if x != nil {
		return x.DstNodeIDs
	}
	return nil
}

func (x *LoadBalanceRequest) GetSealedSegmentIDs() []int64 {
	if x != nil {
		return x.SealedSegmentIDs
	}
	return nil
}

func (m *LoadBalanceRequest) GetCollectionID() int64 {
	if m != nil {
		return m.CollectionID
	}
	return 0
}

type DmChannelWatchInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

<<<<<<< HEAD
	CollectionID int64  `protobuf:"varint,1,opt,name=collectionID,proto3" json:"collectionID,omitempty"`
	DmChannel    string `protobuf:"bytes,2,opt,name=dmChannel,proto3" json:"dmChannel,omitempty"`
	NodeIDLoaded int64  `protobuf:"varint,3,opt,name=nodeID_loaded,json=nodeIDLoaded,proto3" json:"nodeID_loaded,omitempty"`
=======
func (m *DmChannelWatchInfo) Reset()         { *m = DmChannelWatchInfo{} }
func (m *DmChannelWatchInfo) String() string { return proto.CompactTextString(m) }
func (*DmChannelWatchInfo) ProtoMessage()    {}
func (*DmChannelWatchInfo) Descriptor() ([]byte, []int) {
<<<<<<< HEAD
	return fileDescriptor_aab7cc9a69ed26e8, []int{25}
>>>>>>> auto balance
=======
	return fileDescriptor_aab7cc9a69ed26e8, []int{32}
>>>>>>> merge with yah01/mem_replica
}

func (x *DmChannelWatchInfo) Reset() {
	*x = DmChannelWatchInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_query_coord_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DmChannelWatchInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DmChannelWatchInfo) ProtoMessage() {}

func (x *DmChannelWatchInfo) ProtoReflect() protoreflect.Message {
	mi := &file_query_coord_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DmChannelWatchInfo.ProtoReflect.Descriptor instead.
func (*DmChannelWatchInfo) Descriptor() ([]byte, []int) {
	return file_query_coord_proto_rawDescGZIP(), []int{30}
}

func (x *DmChannelWatchInfo) GetCollectionID() int64 {
	if x != nil {
		return x.CollectionID
	}
	return 0
}

func (x *DmChannelWatchInfo) GetDmChannel() string {
	if x != nil {
		return x.DmChannel
	}
	return ""
}

func (x *DmChannelWatchInfo) GetNodeIDLoaded() int64 {
	if x != nil {
		return x.NodeIDLoaded
	}
	return 0
}

type QueryChannelInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollectionID         int64                   `protobuf:"varint,1,opt,name=collectionID,proto3" json:"collectionID,omitempty"`
	QueryChannel         string                  `protobuf:"bytes,2,opt,name=query_channel,json=queryChannel,proto3" json:"query_channel,omitempty"`
	QueryResultChannel   string                  `protobuf:"bytes,3,opt,name=query_result_channel,json=queryResultChannel,proto3" json:"query_result_channel,omitempty"`
	GlobalSealedSegments []*SegmentInfo          `protobuf:"bytes,4,rep,name=global_sealed_segments,json=globalSealedSegments,proto3" json:"global_sealed_segments,omitempty"`
	SeekPosition         *internalpb.MsgPosition `protobuf:"bytes,5,opt,name=seek_position,json=seekPosition,proto3" json:"seek_position,omitempty"`
}

<<<<<<< HEAD
func (x *QueryChannelInfo) Reset() {
	*x = QueryChannelInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_query_coord_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
=======
func (m *QueryChannelInfo) Reset()         { *m = QueryChannelInfo{} }
func (m *QueryChannelInfo) String() string { return proto.CompactTextString(m) }
func (*QueryChannelInfo) ProtoMessage()    {}
func (*QueryChannelInfo) Descriptor() ([]byte, []int) {
<<<<<<< HEAD
	return fileDescriptor_aab7cc9a69ed26e8, []int{26}
>>>>>>> auto balance
=======
	return fileDescriptor_aab7cc9a69ed26e8, []int{33}
>>>>>>> merge with yah01/mem_replica
}

func (x *QueryChannelInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryChannelInfo) ProtoMessage() {}

func (x *QueryChannelInfo) ProtoReflect() protoreflect.Message {
	mi := &file_query_coord_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryChannelInfo.ProtoReflect.Descriptor instead.
func (*QueryChannelInfo) Descriptor() ([]byte, []int) {
	return file_query_coord_proto_rawDescGZIP(), []int{31}
}

func (x *QueryChannelInfo) GetCollectionID() int64 {
	if x != nil {
		return x.CollectionID
	}
	return 0
}

func (x *QueryChannelInfo) GetQueryChannel() string {
	if x != nil {
		return x.QueryChannel
	}
	return ""
}

func (x *QueryChannelInfo) GetQueryResultChannel() string {
	if x != nil {
		return x.QueryResultChannel
	}
	return ""
}

func (x *QueryChannelInfo) GetGlobalSealedSegments() []*SegmentInfo {
	if x != nil {
		return x.GlobalSealedSegments
	}
	return nil
}

func (x *QueryChannelInfo) GetSeekPosition() *internalpb.MsgPosition {
	if x != nil {
		return x.SeekPosition
	}
	return nil
}

type PartitionStates struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

<<<<<<< HEAD
	PartitionID        int64          `protobuf:"varint,1,opt,name=partitionID,proto3" json:"partitionID,omitempty"`
	State              PartitionState `protobuf:"varint,2,opt,name=state,proto3,enum=milvus.proto.query.PartitionState" json:"state,omitempty"`
	InMemoryPercentage int64          `protobuf:"varint,3,opt,name=inMemory_percentage,json=inMemoryPercentage,proto3" json:"inMemory_percentage,omitempty"`
=======
func (m *PartitionStates) Reset()         { *m = PartitionStates{} }
func (m *PartitionStates) String() string { return proto.CompactTextString(m) }
func (*PartitionStates) ProtoMessage()    {}
func (*PartitionStates) Descriptor() ([]byte, []int) {
<<<<<<< HEAD
	return fileDescriptor_aab7cc9a69ed26e8, []int{27}
>>>>>>> auto balance
=======
	return fileDescriptor_aab7cc9a69ed26e8, []int{34}
>>>>>>> merge with yah01/mem_replica
}

func (x *PartitionStates) Reset() {
	*x = PartitionStates{}
	if protoimpl.UnsafeEnabled {
		mi := &file_query_coord_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PartitionStates) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartitionStates) ProtoMessage() {}

func (x *PartitionStates) ProtoReflect() protoreflect.Message {
	mi := &file_query_coord_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartitionStates.ProtoReflect.Descriptor instead.
func (*PartitionStates) Descriptor() ([]byte, []int) {
	return file_query_coord_proto_rawDescGZIP(), []int{32}
}

func (x *PartitionStates) GetPartitionID() int64 {
	if x != nil {
		return x.PartitionID
	}
	return 0
}

func (x *PartitionStates) GetState() PartitionState {
	if x != nil {
		return x.State
	}
	return PartitionState_NotExist
}

func (x *PartitionStates) GetInMemoryPercentage() int64 {
	if x != nil {
		return x.InMemoryPercentage
	}
	return 0
}

type SegmentInfo struct {
<<<<<<< HEAD
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
=======
	SegmentID            int64                 `protobuf:"varint,1,opt,name=segmentID,proto3" json:"segmentID,omitempty"`
	CollectionID         int64                 `protobuf:"varint,2,opt,name=collectionID,proto3" json:"collectionID,omitempty"`
	PartitionID          int64                 `protobuf:"varint,3,opt,name=partitionID,proto3" json:"partitionID,omitempty"`
	NodeID               int64                 `protobuf:"varint,4,opt,name=nodeID,proto3" json:"nodeID,omitempty"`
	MemSize              int64                 `protobuf:"varint,5,opt,name=mem_size,json=memSize,proto3" json:"mem_size,omitempty"`
	NumRows              int64                 `protobuf:"varint,6,opt,name=num_rows,json=numRows,proto3" json:"num_rows,omitempty"`
	IndexName            string                `protobuf:"bytes,7,opt,name=index_name,json=indexName,proto3" json:"index_name,omitempty"`
	IndexID              int64                 `protobuf:"varint,8,opt,name=indexID,proto3" json:"indexID,omitempty"`
	DmChannel            string                `protobuf:"bytes,9,opt,name=dmChannel,proto3" json:"dmChannel,omitempty"`
	CompactionFrom       []int64               `protobuf:"varint,10,rep,packed,name=compactionFrom,proto3" json:"compactionFrom,omitempty"`
	CreatedByCompaction  bool                  `protobuf:"varint,11,opt,name=createdByCompaction,proto3" json:"createdByCompaction,omitempty"`
	SegmentState         commonpb.SegmentState `protobuf:"varint,12,opt,name=segment_state,json=segmentState,proto3,enum=milvus.proto.common.SegmentState" json:"segment_state,omitempty"`
	IndexInfos           []*FieldIndexInfo     `protobuf:"bytes,13,rep,name=index_infos,json=indexInfos,proto3" json:"index_infos,omitempty"`
	ReplicaIds           []int64               `protobuf:"varint,14,rep,packed,name=replica_ids,json=replicaIds,proto3" json:"replica_ids,omitempty"`
	NodeIds              []int64               `protobuf:"varint,15,rep,packed,name=node_ids,json=nodeIds,proto3" json:"node_ids,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *SegmentInfo) Reset()         { *m = SegmentInfo{} }
func (m *SegmentInfo) String() string { return proto.CompactTextString(m) }
func (*SegmentInfo) ProtoMessage()    {}
func (*SegmentInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_aab7cc9a69ed26e8, []int{35}
}
>>>>>>> auto balance

	SegmentID           int64                 `protobuf:"varint,1,opt,name=segmentID,proto3" json:"segmentID,omitempty"`
	CollectionID        int64                 `protobuf:"varint,2,opt,name=collectionID,proto3" json:"collectionID,omitempty"`
	PartitionID         int64                 `protobuf:"varint,3,opt,name=partitionID,proto3" json:"partitionID,omitempty"`
	NodeID              int64                 `protobuf:"varint,4,opt,name=nodeID,proto3" json:"nodeID,omitempty"`
	MemSize             int64                 `protobuf:"varint,5,opt,name=mem_size,json=memSize,proto3" json:"mem_size,omitempty"`
	NumRows             int64                 `protobuf:"varint,6,opt,name=num_rows,json=numRows,proto3" json:"num_rows,omitempty"`
	IndexName           string                `protobuf:"bytes,7,opt,name=index_name,json=indexName,proto3" json:"index_name,omitempty"`
	IndexID             int64                 `protobuf:"varint,8,opt,name=indexID,proto3" json:"indexID,omitempty"`
	DmChannel           string                `protobuf:"bytes,9,opt,name=dmChannel,proto3" json:"dmChannel,omitempty"`
	CompactionFrom      []int64               `protobuf:"varint,10,rep,packed,name=compactionFrom,proto3" json:"compactionFrom,omitempty"`
	CreatedByCompaction bool                  `protobuf:"varint,11,opt,name=createdByCompaction,proto3" json:"createdByCompaction,omitempty"`
	SegmentState        commonpb.SegmentState `protobuf:"varint,12,opt,name=segment_state,json=segmentState,proto3,enum=milvus.proto.common.SegmentState" json:"segment_state,omitempty"`
	IndexInfos          []*FieldIndexInfo     `protobuf:"bytes,13,rep,name=index_infos,json=indexInfos,proto3" json:"index_infos,omitempty"`
	ReplicaIds          []int64               `protobuf:"varint,14,rep,packed,name=replica_ids,json=replicaIds,proto3" json:"replica_ids,omitempty"`
	NodeIds             []int64               `protobuf:"varint,15,rep,packed,name=node_ids,json=nodeIds,proto3" json:"node_ids,omitempty"`
}

func (x *SegmentInfo) Reset() {
	*x = SegmentInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_query_coord_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SegmentInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SegmentInfo) ProtoMessage() {}

func (x *SegmentInfo) ProtoReflect() protoreflect.Message {
	mi := &file_query_coord_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SegmentInfo.ProtoReflect.Descriptor instead.
func (*SegmentInfo) Descriptor() ([]byte, []int) {
	return file_query_coord_proto_rawDescGZIP(), []int{33}
}

func (x *SegmentInfo) GetSegmentID() int64 {
	if x != nil {
		return x.SegmentID
	}
	return 0
}

func (x *SegmentInfo) GetCollectionID() int64 {
	if x != nil {
		return x.CollectionID
	}
	return 0
}

func (x *SegmentInfo) GetPartitionID() int64 {
	if x != nil {
		return x.PartitionID
	}
	return 0
}

func (x *SegmentInfo) GetNodeID() int64 {
	if x != nil {
		return x.NodeID
	}
	return 0
}

func (x *SegmentInfo) GetMemSize() int64 {
	if x != nil {
		return x.MemSize
	}
	return 0
}

func (x *SegmentInfo) GetNumRows() int64 {
	if x != nil {
		return x.NumRows
	}
	return 0
}

func (x *SegmentInfo) GetIndexName() string {
	if x != nil {
		return x.IndexName
	}
	return ""
}

func (x *SegmentInfo) GetIndexID() int64 {
	if x != nil {
		return x.IndexID
	}
	return 0
}

func (x *SegmentInfo) GetDmChannel() string {
	if x != nil {
		return x.DmChannel
	}
	return ""
}

func (x *SegmentInfo) GetCompactionFrom() []int64 {
	if x != nil {
		return x.CompactionFrom
	}
	return nil
}

func (x *SegmentInfo) GetCreatedByCompaction() bool {
	if x != nil {
		return x.CreatedByCompaction
	}
	return false
}

func (x *SegmentInfo) GetSegmentState() commonpb.SegmentState {
	if x != nil {
		return x.SegmentState
	}
	return commonpb.SegmentState_SegmentStateNone
}

<<<<<<< HEAD
<<<<<<< HEAD
func (x *SegmentInfo) GetIndexInfos() []*FieldIndexInfo {
	if x != nil {
		return x.IndexInfos
=======
func (m *SegmentInfo) GetIndexInfos() []*VecFieldIndexInfo {
=======
func (m *SegmentInfo) GetIndexInfos() []*FieldIndexInfo {
>>>>>>> merge with yah01/mem_replica
	if m != nil {
		return m.IndexInfos
>>>>>>> auto balance
	}
	return nil
}

func (x *SegmentInfo) GetReplicaIds() []int64 {
	if x != nil {
		return x.ReplicaIds
	}
	return nil
}

func (x *SegmentInfo) GetNodeIds() []int64 {
	if x != nil {
		return x.NodeIds
	}
	return nil
}

type CollectionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollectionID         int64                      `protobuf:"varint,1,opt,name=collectionID,proto3" json:"collectionID,omitempty"`
	PartitionIDs         []int64                    `protobuf:"varint,2,rep,packed,name=partitionIDs,proto3" json:"partitionIDs,omitempty"`
	PartitionStates      []*PartitionStates         `protobuf:"bytes,3,rep,name=partition_states,json=partitionStates,proto3" json:"partition_states,omitempty"`
	LoadType             LoadType                   `protobuf:"varint,4,opt,name=load_type,json=loadType,proto3,enum=milvus.proto.query.LoadType" json:"load_type,omitempty"`
	Schema               *schemapb.CollectionSchema `protobuf:"bytes,5,opt,name=schema,proto3" json:"schema,omitempty"`
	ReleasedPartitionIDs []int64                    `protobuf:"varint,6,rep,packed,name=released_partitionIDs,json=releasedPartitionIDs,proto3" json:"released_partitionIDs,omitempty"`
	InMemoryPercentage   int64                      `protobuf:"varint,7,opt,name=inMemory_percentage,json=inMemoryPercentage,proto3" json:"inMemory_percentage,omitempty"`
	ReplicaIds           []int64                    `protobuf:"varint,8,rep,packed,name=replica_ids,json=replicaIds,proto3" json:"replica_ids,omitempty"`
<<<<<<< HEAD
<<<<<<< HEAD
	ReplicaNumber        int32                      `protobuf:"varint,9,opt,name=replica_number,json=replicaNumber,proto3" json:"replica_number,omitempty"`
}

func (x *CollectionInfo) Reset() {
	*x = CollectionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_query_coord_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
=======
=======
	ReplicaNumber        int32                      `protobuf:"varint,9,opt,name=replica_number,json=replicaNumber,proto3" json:"replica_number,omitempty"`
>>>>>>> merge with yah01/mem_replica
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *CollectionInfo) Reset()         { *m = CollectionInfo{} }
func (m *CollectionInfo) String() string { return proto.CompactTextString(m) }
func (*CollectionInfo) ProtoMessage()    {}
func (*CollectionInfo) Descriptor() ([]byte, []int) {
<<<<<<< HEAD
	return fileDescriptor_aab7cc9a69ed26e8, []int{29}
>>>>>>> auto balance
=======
	return fileDescriptor_aab7cc9a69ed26e8, []int{36}
>>>>>>> merge with yah01/mem_replica
}

func (x *CollectionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectionInfo) ProtoMessage() {}

func (x *CollectionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_query_coord_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectionInfo.ProtoReflect.Descriptor instead.
func (*CollectionInfo) Descriptor() ([]byte, []int) {
	return file_query_coord_proto_rawDescGZIP(), []int{34}
}

func (x *CollectionInfo) GetCollectionID() int64 {
	if x != nil {
		return x.CollectionID
	}
	return 0
}

func (x *CollectionInfo) GetPartitionIDs() []int64 {
	if x != nil {
		return x.PartitionIDs
	}
	return nil
}

func (x *CollectionInfo) GetPartitionStates() []*PartitionStates {
	if x != nil {
		return x.PartitionStates
	}
	return nil
}

func (x *CollectionInfo) GetLoadType() LoadType {
	if x != nil {
		return x.LoadType
	}
	return LoadType_UnKnownType
}

func (x *CollectionInfo) GetSchema() *schemapb.CollectionSchema {
	if x != nil {
		return x.Schema
	}
	return nil
}

func (x *CollectionInfo) GetReleasedPartitionIDs() []int64 {
	if x != nil {
		return x.ReleasedPartitionIDs
	}
	return nil
}

func (x *CollectionInfo) GetInMemoryPercentage() int64 {
	if x != nil {
		return x.InMemoryPercentage
	}
	return 0
}

func (x *CollectionInfo) GetReplicaIds() []int64 {
	if x != nil {
		return x.ReplicaIds
	}
	return nil
}

<<<<<<< HEAD
func (x *CollectionInfo) GetReplicaNumber() int32 {
	if x != nil {
		return x.ReplicaNumber
	}
	return 0
}

type UnsubscribeChannels struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollectionID int64    `protobuf:"varint,1,opt,name=collectionID,proto3" json:"collectionID,omitempty"`
	Channels     []string `protobuf:"bytes,2,rep,name=channels,proto3" json:"channels,omitempty"`
}

func (x *UnsubscribeChannels) Reset() {
	*x = UnsubscribeChannels{}
	if protoimpl.UnsafeEnabled {
		mi := &file_query_coord_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnsubscribeChannels) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnsubscribeChannels) ProtoMessage() {}

func (x *UnsubscribeChannels) ProtoReflect() protoreflect.Message {
	mi := &file_query_coord_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnsubscribeChannels.ProtoReflect.Descriptor instead.
func (*UnsubscribeChannels) Descriptor() ([]byte, []int) {
	return file_query_coord_proto_rawDescGZIP(), []int{35}
}

func (x *UnsubscribeChannels) GetCollectionID() int64 {
	if x != nil {
		return x.CollectionID
	}
	return 0
}

func (x *UnsubscribeChannels) GetChannels() []string {
	if x != nil {
		return x.Channels
	}
	return nil
}

<<<<<<< HEAD
type UnsubscribeChannelInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeID             int64                  `protobuf:"varint,1,opt,name=nodeID,proto3" json:"nodeID,omitempty"`
	CollectionChannels []*UnsubscribeChannels `protobuf:"bytes,2,rep,name=collection_channels,json=collectionChannels,proto3" json:"collection_channels,omitempty"`
}

func (x *UnsubscribeChannelInfo) Reset() {
	*x = UnsubscribeChannelInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_query_coord_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnsubscribeChannelInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnsubscribeChannelInfo) ProtoMessage() {}

func (x *UnsubscribeChannelInfo) ProtoReflect() protoreflect.Message {
	mi := &file_query_coord_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
=======
type UnsubscribeChannels struct {
	CollectionID         int64    `protobuf:"varint,1,opt,name=collectionID,proto3" json:"collectionID,omitempty"`
	Channels             []string `protobuf:"bytes,2,rep,name=channels,proto3" json:"channels,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

=======
func (m *CollectionInfo) GetReplicaNumber() int32 {
	if m != nil {
		return m.ReplicaNumber
	}
	return 0
}

type ReplicaInfo struct {
	ReplicaID            int64           `protobuf:"varint,1,opt,name=replicaID,proto3" json:"replicaID,omitempty"`
	CollectionID         int64           `protobuf:"varint,2,opt,name=collectionID,proto3" json:"collectionID,omitempty"`
	PartitionIds         []int64         `protobuf:"varint,3,rep,packed,name=partition_ids,json=partitionIds,proto3" json:"partition_ids,omitempty"`
	ShardReplicas        []*ShardReplica `protobuf:"bytes,4,rep,name=shard_replicas,json=shardReplicas,proto3" json:"shard_replicas,omitempty"`
	NodeIds              []int64         `protobuf:"varint,5,rep,packed,name=node_ids,json=nodeIds,proto3" json:"node_ids,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *ReplicaInfo) Reset()         { *m = ReplicaInfo{} }
func (m *ReplicaInfo) String() string { return proto.CompactTextString(m) }
func (*ReplicaInfo) ProtoMessage()    {}
func (*ReplicaInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_aab7cc9a69ed26e8, []int{37}
}

func (m *ReplicaInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReplicaInfo.Unmarshal(m, b)
}
func (m *ReplicaInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReplicaInfo.Marshal(b, m, deterministic)
}
func (m *ReplicaInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplicaInfo.Merge(m, src)
}
func (m *ReplicaInfo) XXX_Size() int {
	return xxx_messageInfo_ReplicaInfo.Size(m)
}
func (m *ReplicaInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplicaInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ReplicaInfo proto.InternalMessageInfo

func (m *ReplicaInfo) GetReplicaID() int64 {
	if m != nil {
		return m.ReplicaID
	}
	return 0
}

func (m *ReplicaInfo) GetCollectionID() int64 {
	if m != nil {
		return m.CollectionID
	}
	return 0
}

func (m *ReplicaInfo) GetPartitionIds() []int64 {
	if m != nil {
		return m.PartitionIds
	}
	return nil
}

func (m *ReplicaInfo) GetShardReplicas() []*ShardReplica {
	if m != nil {
		return m.ShardReplicas
	}
	return nil
}

func (m *ReplicaInfo) GetNodeIds() []int64 {
	if m != nil {
		return m.NodeIds
	}
	return nil
}

type ShardReplica struct {
	LeaderID      int64  `protobuf:"varint,1,opt,name=leaderID,proto3" json:"leaderID,omitempty"`
	LeaderAddr    string `protobuf:"bytes,2,opt,name=leader_addr,json=leaderAddr,proto3" json:"leader_addr,omitempty"`
	DmChannelName string `protobuf:"bytes,3,opt,name=dm_channel_name,json=dmChannelName,proto3" json:"dm_channel_name,omitempty"`
	// optional, DO NOT save it in meta, set it only for GetReplicas()
	// if with_shard_nodes is true
	NodeIds              []int64  `protobuf:"varint,4,rep,packed,name=node_ids,json=nodeIds,proto3" json:"node_ids,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ShardReplica) Reset()         { *m = ShardReplica{} }
func (m *ShardReplica) String() string { return proto.CompactTextString(m) }
func (*ShardReplica) ProtoMessage()    {}
func (*ShardReplica) Descriptor() ([]byte, []int) {
	return fileDescriptor_aab7cc9a69ed26e8, []int{38}
}

func (m *ShardReplica) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ShardReplica.Unmarshal(m, b)
}
func (m *ShardReplica) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ShardReplica.Marshal(b, m, deterministic)
}
func (m *ShardReplica) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShardReplica.Merge(m, src)
}
func (m *ShardReplica) XXX_Size() int {
	return xxx_messageInfo_ShardReplica.Size(m)
}
func (m *ShardReplica) XXX_DiscardUnknown() {
	xxx_messageInfo_ShardReplica.DiscardUnknown(m)
}

var xxx_messageInfo_ShardReplica proto.InternalMessageInfo

func (m *ShardReplica) GetLeaderID() int64 {
	if m != nil {
		return m.LeaderID
	}
	return 0
}

func (m *ShardReplica) GetLeaderAddr() string {
	if m != nil {
		return m.LeaderAddr
	}
	return ""
}

func (m *ShardReplica) GetDmChannelName() string {
	if m != nil {
		return m.DmChannelName
	}
	return ""
}

func (m *ShardReplica) GetNodeIds() []int64 {
	if m != nil {
		return m.NodeIds
	}
	return nil
}

type UnsubscribeChannels struct {
	CollectionID         int64    `protobuf:"varint,1,opt,name=collectionID,proto3" json:"collectionID,omitempty"`
	Channels             []string `protobuf:"bytes,2,rep,name=channels,proto3" json:"channels,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

>>>>>>> merge with yah01/mem_replica
func (m *UnsubscribeChannels) Reset()         { *m = UnsubscribeChannels{} }
func (m *UnsubscribeChannels) String() string { return proto.CompactTextString(m) }
func (*UnsubscribeChannels) ProtoMessage()    {}
func (*UnsubscribeChannels) Descriptor() ([]byte, []int) {
<<<<<<< HEAD
	return fileDescriptor_aab7cc9a69ed26e8, []int{30}
>>>>>>> auto balance
=======
	return fileDescriptor_aab7cc9a69ed26e8, []int{39}
>>>>>>> merge with yah01/mem_replica
}

// Deprecated: Use UnsubscribeChannelInfo.ProtoReflect.Descriptor instead.
func (*UnsubscribeChannelInfo) Descriptor() ([]byte, []int) {
	return file_query_coord_proto_rawDescGZIP(), []int{36}
}

func (x *UnsubscribeChannelInfo) GetNodeID() int64 {
	if x != nil {
		return x.NodeID
	}
	return 0
}

func (x *UnsubscribeChannelInfo) GetCollectionChannels() []*UnsubscribeChannels {
	if x != nil {
		return x.CollectionChannels
	}
	return nil
}

//---- synchronize messages proto between QueryCoord and QueryNode -----
type SegmentChangeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

<<<<<<< HEAD
	OnlineNodeID    int64          `protobuf:"varint,1,opt,name=online_nodeID,json=onlineNodeID,proto3" json:"online_nodeID,omitempty"`
	OnlineSegments  []*SegmentInfo `protobuf:"bytes,2,rep,name=online_segments,json=onlineSegments,proto3" json:"online_segments,omitempty"`
	OfflineNodeID   int64          `protobuf:"varint,3,opt,name=offline_nodeID,json=offlineNodeID,proto3" json:"offline_nodeID,omitempty"`
	OfflineSegments []*SegmentInfo `protobuf:"bytes,4,rep,name=offline_segments,json=offlineSegments,proto3" json:"offline_segments,omitempty"`
=======
func (m *UnsubscribeChannelInfo) Reset()         { *m = UnsubscribeChannelInfo{} }
func (m *UnsubscribeChannelInfo) String() string { return proto.CompactTextString(m) }
func (*UnsubscribeChannelInfo) ProtoMessage()    {}
func (*UnsubscribeChannelInfo) Descriptor() ([]byte, []int) {
<<<<<<< HEAD
	return fileDescriptor_aab7cc9a69ed26e8, []int{31}
>>>>>>> auto balance
=======
	return fileDescriptor_aab7cc9a69ed26e8, []int{40}
>>>>>>> merge with yah01/mem_replica
}

func (x *SegmentChangeInfo) Reset() {
	*x = SegmentChangeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_query_coord_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SegmentChangeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SegmentChangeInfo) ProtoMessage() {}

func (x *SegmentChangeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_query_coord_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SegmentChangeInfo.ProtoReflect.Descriptor instead.
func (*SegmentChangeInfo) Descriptor() ([]byte, []int) {
<<<<<<< HEAD
<<<<<<< HEAD
	return file_query_coord_proto_rawDescGZIP(), []int{37}
=======
	return fileDescriptor_aab7cc9a69ed26e8, []int{32}
=======
	return fileDescriptor_aab7cc9a69ed26e8, []int{41}
>>>>>>> merge with yah01/mem_replica
}

func (m *SegmentChangeInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SegmentChangeInfo.Unmarshal(m, b)
}
func (m *SegmentChangeInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SegmentChangeInfo.Marshal(b, m, deterministic)
}
func (m *SegmentChangeInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SegmentChangeInfo.Merge(m, src)
}
func (m *SegmentChangeInfo) XXX_Size() int {
	return xxx_messageInfo_SegmentChangeInfo.Size(m)
>>>>>>> auto balance
}

func (x *SegmentChangeInfo) GetOnlineNodeID() int64 {
	if x != nil {
		return x.OnlineNodeID
	}
	return 0
}

func (x *SegmentChangeInfo) GetOnlineSegments() []*SegmentInfo {
	if x != nil {
		return x.OnlineSegments
	}
	return nil
}

func (x *SegmentChangeInfo) GetOfflineNodeID() int64 {
	if x != nil {
		return x.OfflineNodeID
	}
	return 0
}

func (x *SegmentChangeInfo) GetOfflineSegments() []*SegmentInfo {
	if x != nil {
		return x.OfflineSegments
	}
	return nil
}

type SealedSegmentsChangeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

<<<<<<< HEAD
	Base  *commonpb.MsgBase    `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	Infos []*SegmentChangeInfo `protobuf:"bytes,2,rep,name=infos,proto3" json:"infos,omitempty"`
=======
func (m *SealedSegmentsChangeInfo) Reset()         { *m = SealedSegmentsChangeInfo{} }
func (m *SealedSegmentsChangeInfo) String() string { return proto.CompactTextString(m) }
func (*SealedSegmentsChangeInfo) ProtoMessage()    {}
func (*SealedSegmentsChangeInfo) Descriptor() ([]byte, []int) {
<<<<<<< HEAD
	return fileDescriptor_aab7cc9a69ed26e8, []int{33}
>>>>>>> auto balance
=======
	return fileDescriptor_aab7cc9a69ed26e8, []int{42}
>>>>>>> merge with yah01/mem_replica
}

func (x *SealedSegmentsChangeInfo) Reset() {
	*x = SealedSegmentsChangeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_query_coord_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SealedSegmentsChangeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SealedSegmentsChangeInfo) ProtoMessage() {}

func (x *SealedSegmentsChangeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_query_coord_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SealedSegmentsChangeInfo.ProtoReflect.Descriptor instead.
func (*SealedSegmentsChangeInfo) Descriptor() ([]byte, []int) {
	return file_query_coord_proto_rawDescGZIP(), []int{38}
}

func (x *SealedSegmentsChangeInfo) GetBase() *commonpb.MsgBase {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *SealedSegmentsChangeInfo) GetInfos() []*SegmentChangeInfo {
	if x != nil {
		return x.Infos
	}
	return nil
}

<<<<<<< HEAD
<<<<<<< HEAD
var File_query_coord_proto protoreflect.FileDescriptor

var file_query_coord_proto_rawDesc = []byte{
	0x0a, 0x11, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x12, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x10, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x84, 0x01, 0x0a, 0x16, 0x53, 0x68, 0x6f, 0x77, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30,
	0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d,
	0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x4d, 0x73, 0x67, 0x42, 0x61, 0x73, 0x65, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x64, 0x62, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04,
	0x64, 0x62, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x44, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0d, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x73, 0x22, 0xa7, 0x01, 0x0a, 0x17, 0x53,
	0x68, 0x6f, 0x77, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x63,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x03, 0x52, 0x0d, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44,
	0x73, 0x12, 0x31, 0x0a, 0x14, 0x69, 0x6e, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x70, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x03, 0x52,
	0x13, 0x69, 0x6e, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x61, 0x67, 0x65, 0x73, 0x22, 0xa5, 0x01, 0x0a, 0x15, 0x53, 0x68, 0x6f, 0x77, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30,
	0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d,
	0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x4d, 0x73, 0x67, 0x42, 0x61, 0x73, 0x65, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x64, 0x62, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04,
	0x64, 0x62, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x63, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0c,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x73, 0x22, 0xa4, 0x01, 0x0a,
	0x16, 0x53, 0x68, 0x6f, 0x77, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x22, 0x0a, 0x0c,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x03, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x73,
	0x12, 0x31, 0x0a, 0x14, 0x69, 0x6e, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x70, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x03, 0x52, 0x13,
	0x69, 0x6e, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61,
	0x67, 0x65, 0x73, 0x22, 0xe7, 0x01, 0x0a, 0x15, 0x4c, 0x6f, 0x61, 0x64, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a,
	0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x69,
	0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x4d, 0x73, 0x67, 0x42, 0x61, 0x73, 0x65, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x64, 0x62, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x64,
	0x62, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x3d, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x06,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d,
	0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x9c, 0x01,
	0x0a, 0x18, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x04, 0x62, 0x61,
	0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d,
	0x73, 0x67, 0x42, 0x61, 0x73, 0x65, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x64, 0x62, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x64, 0x62, 0x49, 0x44,
	0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x22, 0x8b, 0x02, 0x0a,
	0x15, 0x4c, 0x6f, 0x61, 0x64, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x73, 0x67, 0x42, 0x61,
	0x73, 0x65, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x62, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x64, 0x62, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c,
	0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44,
	0x12, 0x22, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x44, 0x73, 0x12, 0x3d, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x06, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x72, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0xc0, 0x01, 0x0a, 0x18, 0x52,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x73, 0x67, 0x42,
	0x61, 0x73, 0x65, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x62, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x64, 0x62, 0x49, 0x44, 0x12, 0x22, 0x0a,
	0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x44, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x44, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x22, 0x59, 0x0a,
	0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x18,
	0x0a, 0x07, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x49, 0x44, 0x22, 0xa8, 0x01, 0x0a, 0x1a, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x23, 0x0a, 0x0d,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x71, 0x75, 0x65, 0x72, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x12, 0x30, 0x0a, 0x14, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x12, 0x71, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x22, 0xa9, 0x01, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x30, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x73, 0x67, 0x42, 0x61, 0x73, 0x65, 0x52, 0x04, 0x62,
	0x61, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x62, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x04, 0x64, 0x62, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x63,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x03, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x73, 0x22,
	0xad, 0x01, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x5a, 0x0a, 0x16, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x52, 0x15, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22,
	0x8d, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x04, 0x62, 0x61, 0x73,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x73,
	0x67, 0x42, 0x61, 0x73, 0x65, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73,
	0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52,
	0x0a, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x63,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x22,
	0x84, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x69, 0x6c,
	0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x35, 0x0a, 0x05, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x2e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x05, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0x6e, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x53, 0x68, 0x61,
	0x72, 0x64, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x30, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x73, 0x67, 0x42, 0x61, 0x73, 0x65, 0x52, 0x04, 0x62, 0x61,
	0x73, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x22, 0x8c, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x53, 0x68,
	0x61, 0x72, 0x64, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3c, 0x0a, 0x06, 0x73, 0x68, 0x61, 0x72, 0x64,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x53, 0x68, 0x61,
	0x72, 0x64, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x06, 0x73,
	0x68, 0x61, 0x72, 0x64, 0x73, 0x22, 0x6f, 0x0a, 0x10, 0x53, 0x68, 0x61, 0x72, 0x64, 0x4c, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08,
	0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x07,
	0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x6f, 0x64, 0x65, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x6f, 0x64,
	0x65, 0x41, 0x64, 0x64, 0x72, 0x73, 0x22, 0xfd, 0x02, 0x0a, 0x16, 0x41, 0x64, 0x64, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x30, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x73, 0x67, 0x42, 0x61, 0x73, 0x65, 0x52, 0x04, 0x62,
	0x61, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x63,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12,
	0x23, 0x0a, 0x0d, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x71, 0x75, 0x65, 0x72, 0x79, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x30, 0x0a, 0x14, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x12, 0x71, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x47, 0x0a, 0x0d, 0x73, 0x65, 0x65, 0x6b, 0x5f, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x4d, 0x73, 0x67, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0c, 0x73, 0x65, 0x65, 0x6b, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x55, 0x0a, 0x16, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x61, 0x6c, 0x65, 0x64,
	0x5f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x2e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x14, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x53, 0x65, 0x61, 0x6c, 0x65, 0x64, 0x53, 0x65,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xe0, 0x01, 0x0a, 0x19, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x73, 0x67, 0x42, 0x61, 0x73, 0x65,
	0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x12, 0x22,
	0x0a, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x44, 0x12, 0x23, 0x0a, 0x0d, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x30, 0x0a, 0x14, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x71, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x22, 0x91, 0x01, 0x0a, 0x0c, 0x4c, 0x6f,
	0x61, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x39, 0x0a, 0x09, 0x6c, 0x6f,
	0x61, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e,
	0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x6c, 0x6f, 0x61,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x03, 0x52,
	0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x73, 0x22, 0xc2, 0x03,
	0x0a, 0x16, 0x57, 0x61, 0x74, 0x63, 0x68, 0x44, 0x6d, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x73, 0x67,
	0x42, 0x61, 0x73, 0x65, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f,
	0x64, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65,
	0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x44, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0c, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x73, 0x12, 0x35, 0x0a, 0x05, 0x69, 0x6e,
	0x66, 0x6f, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6d, 0x69, 0x6c, 0x76,
	0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x56, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x69, 0x6e, 0x66, 0x6f,
	0x73, 0x12, 0x3d, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x12, 0x43, 0x0a, 0x0d, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x53, 0x65, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x3d, 0x0a, 0x09, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x6d, 0x65,
	0x74, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4c, 0x6f,
	0x61, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x6c, 0x6f, 0x61, 0x64,
	0x4d, 0x65, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x49,
	0x44, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x49, 0x44, 0x22, 0xff, 0x01, 0x0a, 0x19, 0x57, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x6c, 0x74,
	0x61, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x30, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x73, 0x67, 0x42, 0x61, 0x73, 0x65, 0x52, 0x04, 0x62, 0x61,
	0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x35,
	0x0a, 0x05, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x56, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05,
	0x69, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x3d, 0x0a, 0x09, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x6d, 0x65,
	0x74, 0x61, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4c, 0x6f,
	0x61, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x6c, 0x6f, 0x61, 0x64,
	0x4d, 0x65, 0x74, 0x61, 0x22, 0x97, 0x04, 0x0a, 0x0f, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x4c, 0x6f, 0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x65, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c,
	0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04,
	0x64, 0x62, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x64, 0x62, 0x49, 0x44,
	0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x6c, 0x75, 0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x66, 0x6c, 0x75, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x41, 0x0a, 0x0c, 0x62, 0x69, 0x6e, 0x6c, 0x6f, 0x67, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x73, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x42,
	0x69, 0x6e, 0x6c, 0x6f, 0x67, 0x52, 0x0b, 0x62, 0x69, 0x6e, 0x6c, 0x6f, 0x67, 0x50, 0x61, 0x74,
	0x68, 0x73, 0x12, 0x1e, 0x0a, 0x0b, 0x6e, 0x75, 0x6d, 0x5f, 0x6f, 0x66, 0x5f, 0x72, 0x6f, 0x77,
	0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6e, 0x75, 0x6d, 0x4f, 0x66, 0x52, 0x6f,
	0x77, 0x73, 0x12, 0x3c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x73, 0x6c, 0x6f, 0x67, 0x73, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x42,
	0x69, 0x6e, 0x6c, 0x6f, 0x67, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x73, 0x6c, 0x6f, 0x67, 0x73,
	0x12, 0x3c, 0x0a, 0x09, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x73, 0x18, 0x09, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x42, 0x69, 0x6e,
	0x6c, 0x6f, 0x67, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x73, 0x12, 0x26,
	0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x72, 0x6f, 0x6d,
	0x18, 0x0a, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x43, 0x0a, 0x0b, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6d, 0x69,
	0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x0a, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x73,
	0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0b, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x22, 0xaf,
	0x02, 0x0a, 0x0e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x44, 0x12, 0x21, 0x0a, 0x0c, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0b, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1d,
	0x0a, 0x0a, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x75, 0x69, 0x6c, 0x64,
	0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x49,
	0x44, 0x12, 0x44, 0x0a, 0x0c, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4b, 0x65,
	0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x61, 0x69, 0x72, 0x52, 0x0b, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68,
	0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x53, 0x69, 0x7a, 0x65,
	0x22, 0xe8, 0x02, 0x0a, 0x13, 0x4c, 0x6f, 0x61, 0x64, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x73, 0x67,
	0x42, 0x61, 0x73, 0x65, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x73,
	0x74, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x64, 0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x12, 0x39, 0x0a, 0x05, 0x69, 0x6e, 0x66,
	0x6f, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x53, 0x65,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x69,
	0x6e, 0x66, 0x6f, 0x73, 0x12, 0x3d, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x06, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6e, 0x6f,
	0x64, 0x65, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c,
	0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x3d, 0x0a, 0x09,
	0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x08, 0x6c, 0x6f, 0x61, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x22, 0xde, 0x01, 0x0a, 0x16,
	0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x73, 0x67, 0x42, 0x61,
	0x73, 0x65, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x64, 0x65,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x44,
	0x12, 0x12, 0x0a, 0x04, 0x64, 0x62, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04,
	0x64, 0x62, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x63, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0c,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x73, 0x12, 0x1e, 0x0a, 0x0a,
	0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x03,
	0x52, 0x0a, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x73, 0x22, 0x88, 0x01, 0x0a,
	0x0d, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36,
	0x0a, 0x03, 0x72, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6d, 0x69,
	0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x03, 0x72, 0x65, 0x71, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x6d, 0x6c, 0x5f, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x6d, 0x6c,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x44, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0a, 0x73, 0x65, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x73, 0x22, 0x89, 0x01, 0x0a, 0x0c, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x03, 0x72, 0x65, 0x71, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x52, 0x65,
	0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x03, 0x72,
	0x65, 0x71, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x6d, 0x6c, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x6d, 0x6c, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0a, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x44, 0x73, 0x22, 0x8f, 0x01, 0x0a, 0x16, 0x48, 0x61, 0x6e, 0x64, 0x6f, 0x66, 0x66, 0x53,
	0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30,
	0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d,
	0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x4d, 0x73, 0x67, 0x42, 0x61, 0x73, 0x65, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65,
	0x12, 0x43, 0x0a, 0x0c, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x53, 0x65, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0x88, 0x02, 0x0a, 0x12, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x04,
	0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x69, 0x6c,
	0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x4d, 0x73, 0x67, 0x42, 0x61, 0x73, 0x65, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x12, 0x25,
	0x0a, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x6f,
	0x64, 0x65, 0x49, 0x44, 0x73, 0x12, 0x4b, 0x0a, 0x0e, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e,
	0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x73, 0x74, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x44,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0a, 0x64, 0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65,
	0x49, 0x44, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x65, 0x61, 0x6c, 0x65, 0x64, 0x5f, 0x73, 0x65,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x03, 0x52, 0x10,
	0x73, 0x65, 0x61, 0x6c, 0x65, 0x64, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x73,
	0x22, 0x7b, 0x0a, 0x12, 0x44, 0x6d, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x57, 0x61, 0x74,
	0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x63, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x6d,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64,
	0x6d, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x6e, 0x6f, 0x64, 0x65,
	0x49, 0x44, 0x5f, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0c, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x4c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x22, 0xad, 0x02,
	0x0a, 0x10, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x23, 0x0a, 0x0d, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x30, 0x0a, 0x14, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x55, 0x0a,
	0x16, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x61, 0x6c, 0x65, 0x64, 0x5f, 0x73,
	0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x2e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x14,
	0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x53, 0x65, 0x61, 0x6c, 0x65, 0x64, 0x53, 0x65, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x12, 0x47, 0x0a, 0x0d, 0x73, 0x65, 0x65, 0x6b, 0x5f, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6d, 0x69,
	0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x2e, 0x4d, 0x73, 0x67, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0c, 0x73, 0x65, 0x65, 0x6b, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x9e, 0x01,
	0x0a, 0x0f, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x73, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x44, 0x12, 0x38, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x22, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2f, 0x0a,
	0x13, 0x69, 0x6e, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x69, 0x6e, 0x4d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x22, 0xb9,
	0x04, 0x0a, 0x0b, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c,
	0x0a, 0x09, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c,
	0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44,
	0x12, 0x20, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x65,
	0x6d, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6d, 0x65,
	0x6d, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x75, 0x6d, 0x5f, 0x72, 0x6f, 0x77,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6e, 0x75, 0x6d, 0x52, 0x6f, 0x77, 0x73,
	0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x44, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x6d, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x6d,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x72, 0x6f, 0x6d, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x03, 0x52,
	0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x72, 0x6f, 0x6d, 0x12,
	0x30, 0x0a, 0x13, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x46, 0x0a, 0x0d, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53,
	0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0c, 0x73, 0x65, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x43, 0x0a, 0x0b, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x0a, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x1f,
	0x0a, 0x0b, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x0e, 0x20,
	0x03, 0x28, 0x03, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x49, 0x64, 0x73, 0x12,
	0x19, 0x0a, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28,
	0x03, 0x52, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x73, 0x22, 0xd0, 0x03, 0x0a, 0x0e, 0x43,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x22, 0x0a,
	0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x44, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x44, 0x73, 0x12, 0x4e, 0x0a, 0x10, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x73, 0x52, 0x0f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x73, 0x12, 0x39, 0x0a, 0x09, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4c, 0x6f,
	0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x3d, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12,
	0x33, 0x0a, 0x15, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x03, 0x52, 0x14,
	0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x64, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x44, 0x73, 0x12, 0x2f, 0x0a, 0x13, 0x69, 0x6e, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x12, 0x69, 0x6e, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x50, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x5f, 0x69, 0x64, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x49, 0x64, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d,
	0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x55, 0x0a,
	0x13, 0x55, 0x6e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x63, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x73, 0x22, 0x8a, 0x01, 0x0a, 0x16, 0x55, 0x6e, 0x73, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x12, 0x58, 0x0a, 0x13, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x55, 0x6e, 0x73, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x52, 0x12, 0x63,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x73, 0x22, 0xf5, 0x01, 0x0a, 0x11, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x6e, 0x6c, 0x69, 0x6e,
	0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c,
	0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x12, 0x48, 0x0a, 0x0f,
	0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x53, 0x65, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x65,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e,
	0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d,
	0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x12, 0x4a, 0x0a,
	0x10, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x53, 0x65, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e,
	0x65, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x89, 0x01, 0x0a, 0x18, 0x53, 0x65,
	0x61, 0x6c, 0x65, 0x64, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x30, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x73, 0x67, 0x42, 0x61,
	0x73, 0x65, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x05, 0x69, 0x6e, 0x66, 0x6f,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x53, 0x65, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05,
	0x69, 0x6e, 0x66, 0x6f, 0x73, 0x2a, 0x7a, 0x0a, 0x0e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x4e, 0x6f, 0x74, 0x45, 0x78,
	0x69, 0x73, 0x74, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x4e, 0x6f, 0x74, 0x50, 0x72, 0x65, 0x73,
	0x65, 0x6e, 0x74, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x4f, 0x6e, 0x44, 0x69, 0x73, 0x6b, 0x10,
	0x02, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x4d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x6e, 0x4d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x10, 0x04, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x49,
	0x6e, 0x47, 0x50, 0x55, 0x10, 0x05, 0x12, 0x09, 0x0a, 0x05, 0x49, 0x6e, 0x47, 0x50, 0x55, 0x10,
	0x06, 0x2a, 0x64, 0x0a, 0x10, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x13, 0x0a, 0x0f, 0x55, 0x6e, 0x4b, 0x6e, 0x6f, 0x77, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x48, 0x61,
	0x6e, 0x64, 0x6f, 0x66, 0x66, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x6f, 0x61, 0x64, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x47, 0x72, 0x70, 0x63,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x4e, 0x6f, 0x64,
	0x65, 0x44, 0x6f, 0x77, 0x6e, 0x10, 0x04, 0x2a, 0x42, 0x0a, 0x08, 0x4c, 0x6f, 0x61, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x6e, 0x4b, 0x6e, 0x6f, 0x77, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x6f, 0x61, 0x64, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x4c, 0x6f, 0x61, 0x64, 0x43,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x02, 0x32, 0x97, 0x0d, 0x0a, 0x0a,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x12, 0x70, 0x0a, 0x12, 0x47, 0x65,
	0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73,
	0x12, 0x30, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x26, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x22, 0x00, 0x12, 0x6d, 0x0a, 0x12,
	0x47, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x69, 0x63, 0x6b, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x12, 0x30, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x54, 0x69, 0x63, 0x6b, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x71, 0x0a, 0x14, 0x47,
	0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x12, 0x32, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x47, 0x65, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6c,
	0x0a, 0x0f, 0x53, 0x68, 0x6f, 0x77, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x2a, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x53, 0x68, 0x6f, 0x77, 0x43, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e,
	0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x2e, 0x53, 0x68, 0x6f, 0x77, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x69, 0x0a, 0x0e,
	0x53, 0x68, 0x6f, 0x77, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x29,
	0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x2e, 0x53, 0x68, 0x6f, 0x77, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x6d, 0x69, 0x6c, 0x76,
	0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x53,
	0x68, 0x6f, 0x77, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5a, 0x0a, 0x0e, 0x4c, 0x6f, 0x61, 0x64, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x29, 0x2e, 0x6d, 0x69, 0x6c, 0x76,
	0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4c,
	0x6f, 0x61, 0x64, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0x00, 0x12, 0x60, 0x0a, 0x11, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2c, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x52, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0x00, 0x12, 0x5a, 0x0a, 0x0e, 0x4c, 0x6f, 0x61, 0x64, 0x43, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4c, 0x6f, 0x61,
	0x64, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22,
	0x00, 0x12, 0x60, 0x0a, 0x11, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x52, 0x65, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0x00, 0x12, 0x75, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x2d, 0x2e, 0x6d, 0x69, 0x6c, 0x76,
	0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x75, 0x0a, 0x12, 0x47, 0x65,
	0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73,
	0x12, 0x2d, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2e, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x69, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x29, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a,
	0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x54, 0x0a, 0x0b,
	0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x26, 0x2e, 0x6d, 0x69,
	0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x22, 0x00, 0x12, 0x5f, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x12, 0x26, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x47,
	0x65, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x62, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x73, 0x12, 0x27, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x6d, 0x69,
	0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75,
	0x73, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6c, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x53, 0x68,
	0x61, 0x72, 0x64, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x2a, 0x2e, 0x6d, 0x69, 0x6c,
	0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e,
	0x47, 0x65, 0x74, 0x53, 0x68, 0x61, 0x72, 0x64, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x53,
	0x68, 0x61, 0x72, 0x64, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x32, 0xd3, 0x0b, 0x0a, 0x09, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4e,
	0x6f, 0x64, 0x65, 0x12, 0x70, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x12, 0x30, 0x2e, 0x6d, 0x69, 0x6c, 0x76,
	0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x6d, 0x69,
	0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x73, 0x22, 0x00, 0x12, 0x6d, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x54, 0x69, 0x63, 0x6b, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x30, 0x2e, 0x6d, 0x69,
	0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x69, 0x63, 0x6b, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e,
	0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x69, 0x6c,
	0x76, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x71, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x32, 0x2e, 0x6d,
	0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x23, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5c, 0x0a, 0x0f, 0x41, 0x64, 0x64, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x2a, 0x2e, 0x6d, 0x69, 0x6c,
	0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e,
	0x41, 0x64, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0x00, 0x12, 0x62, 0x0a, 0x12, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x2d, 0x2e, 0x6d, 0x69,
	0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x6d, 0x69, 0x6c,
	0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x00, 0x12, 0x5c, 0x0a, 0x0f, 0x57, 0x61, 0x74,
	0x63, 0x68, 0x44, 0x6d, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0x2a, 0x2e, 0x6d,
	0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x44, 0x6d, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x00, 0x12, 0x62, 0x0a, 0x12, 0x57, 0x61, 0x74, 0x63, 0x68,
	0x44, 0x65, 0x6c, 0x74, 0x61, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0x2d, 0x2e,
	0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x6d,
	0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x0c, 0x4c,
	0x6f, 0x61, 0x64, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x27, 0x2e, 0x6d, 0x69,
	0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0x00, 0x12, 0x60, 0x0a, 0x11, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x52, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0x00, 0x12, 0x60, 0x0a, 0x11, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2c, 0x2e, 0x6d, 0x69, 0x6c,
	0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e,
	0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x00, 0x12, 0x5c, 0x0a, 0x0f, 0x52, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x2a, 0x2e, 0x6d, 0x69, 0x6c,
	0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e,
	0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0x00, 0x12, 0x69, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x29, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x47, 0x65, 0x74,
	0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x53, 0x0a, 0x06, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x21, 0x2e, 0x6d, 0x69, 0x6c,
	0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e,
	0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x05, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x20,
	0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x26, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76,
	0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0x00, 0x12, 0x5f, 0x0a, 0x0a, 0x47, 0x65,
	0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x26, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x47,
	0x65, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x27, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x34, 0x5a, 0x32, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73,
	0x2d, 0x69, 0x6f, 0x2f, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x70,
	0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_query_coord_proto_rawDescOnce sync.Once
	file_query_coord_proto_rawDescData = file_query_coord_proto_rawDesc
)

func file_query_coord_proto_rawDescGZIP() []byte {
	file_query_coord_proto_rawDescOnce.Do(func() {
		file_query_coord_proto_rawDescData = protoimpl.X.CompressGZIP(file_query_coord_proto_rawDescData)
	})
	return file_query_coord_proto_rawDescData
}

var file_query_coord_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_query_coord_proto_msgTypes = make([]protoimpl.MessageInfo, 39)
var file_query_coord_proto_goTypes = []interface{}{
	(PartitionState)(0),                            // 0: milvus.proto.query.PartitionState
	(TriggerCondition)(0),                          // 1: milvus.proto.query.TriggerCondition
	(LoadType)(0),                                  // 2: milvus.proto.query.LoadType
	(*ShowCollectionsRequest)(nil),                 // 3: milvus.proto.query.ShowCollectionsRequest
	(*ShowCollectionsResponse)(nil),                // 4: milvus.proto.query.ShowCollectionsResponse
	(*ShowPartitionsRequest)(nil),                  // 5: milvus.proto.query.ShowPartitionsRequest
	(*ShowPartitionsResponse)(nil),                 // 6: milvus.proto.query.ShowPartitionsResponse
	(*LoadCollectionRequest)(nil),                  // 7: milvus.proto.query.LoadCollectionRequest
	(*ReleaseCollectionRequest)(nil),               // 8: milvus.proto.query.ReleaseCollectionRequest
	(*LoadPartitionsRequest)(nil),                  // 9: milvus.proto.query.LoadPartitionsRequest
	(*ReleasePartitionsRequest)(nil),               // 10: milvus.proto.query.ReleasePartitionsRequest
	(*CreateQueryChannelRequest)(nil),              // 11: milvus.proto.query.CreateQueryChannelRequest
	(*CreateQueryChannelResponse)(nil),             // 12: milvus.proto.query.CreateQueryChannelResponse
	(*GetPartitionStatesRequest)(nil),              // 13: milvus.proto.query.GetPartitionStatesRequest
	(*GetPartitionStatesResponse)(nil),             // 14: milvus.proto.query.GetPartitionStatesResponse
	(*GetSegmentInfoRequest)(nil),                  // 15: milvus.proto.query.GetSegmentInfoRequest
	(*GetSegmentInfoResponse)(nil),                 // 16: milvus.proto.query.GetSegmentInfoResponse
	(*GetShardLeadersRequest)(nil),                 // 17: milvus.proto.query.GetShardLeadersRequest
	(*GetShardLeadersResponse)(nil),                // 18: milvus.proto.query.GetShardLeadersResponse
	(*ShardLeadersList)(nil),                       // 19: milvus.proto.query.ShardLeadersList
	(*AddQueryChannelRequest)(nil),                 // 20: milvus.proto.query.AddQueryChannelRequest
	(*RemoveQueryChannelRequest)(nil),              // 21: milvus.proto.query.RemoveQueryChannelRequest
	(*LoadMetaInfo)(nil),                           // 22: milvus.proto.query.LoadMetaInfo
	(*WatchDmChannelsRequest)(nil),                 // 23: milvus.proto.query.WatchDmChannelsRequest
	(*WatchDeltaChannelsRequest)(nil),              // 24: milvus.proto.query.WatchDeltaChannelsRequest
	(*SegmentLoadInfo)(nil),                        // 25: milvus.proto.query.SegmentLoadInfo
	(*FieldIndexInfo)(nil),                         // 26: milvus.proto.query.FieldIndexInfo
	(*LoadSegmentsRequest)(nil),                    // 27: milvus.proto.query.LoadSegmentsRequest
	(*ReleaseSegmentsRequest)(nil),                 // 28: milvus.proto.query.ReleaseSegmentsRequest
	(*SearchRequest)(nil),                          // 29: milvus.proto.query.SearchRequest
	(*QueryRequest)(nil),                           // 30: milvus.proto.query.QueryRequest
	(*HandoffSegmentsRequest)(nil),                 // 31: milvus.proto.query.HandoffSegmentsRequest
	(*LoadBalanceRequest)(nil),                     // 32: milvus.proto.query.LoadBalanceRequest
	(*DmChannelWatchInfo)(nil),                     // 33: milvus.proto.query.DmChannelWatchInfo
	(*QueryChannelInfo)(nil),                       // 34: milvus.proto.query.QueryChannelInfo
	(*PartitionStates)(nil),                        // 35: milvus.proto.query.PartitionStates
	(*SegmentInfo)(nil),                            // 36: milvus.proto.query.SegmentInfo
	(*CollectionInfo)(nil),                         // 37: milvus.proto.query.CollectionInfo
	(*UnsubscribeChannels)(nil),                    // 38: milvus.proto.query.UnsubscribeChannels
	(*UnsubscribeChannelInfo)(nil),                 // 39: milvus.proto.query.UnsubscribeChannelInfo
	(*SegmentChangeInfo)(nil),                      // 40: milvus.proto.query.SegmentChangeInfo
	(*SealedSegmentsChangeInfo)(nil),               // 41: milvus.proto.query.SealedSegmentsChangeInfo
	(*commonpb.MsgBase)(nil),                       // 42: milvus.proto.common.MsgBase
	(*commonpb.Status)(nil),                        // 43: milvus.proto.common.Status
	(*schemapb.CollectionSchema)(nil),              // 44: milvus.proto.schema.CollectionSchema
	(*internalpb.MsgPosition)(nil),                 // 45: milvus.proto.internal.MsgPosition
	(*datapb.VchannelInfo)(nil),                    // 46: milvus.proto.data.VchannelInfo
	(*datapb.SegmentInfo)(nil),                     // 47: milvus.proto.data.SegmentInfo
	(*datapb.FieldBinlog)(nil),                     // 48: milvus.proto.data.FieldBinlog
	(*commonpb.KeyValuePair)(nil),                  // 49: milvus.proto.common.KeyValuePair
	(*internalpb.SearchRequest)(nil),               // 50: milvus.proto.internal.SearchRequest
	(*internalpb.RetrieveRequest)(nil),             // 51: milvus.proto.internal.RetrieveRequest
	(commonpb.SegmentState)(0),                     // 52: milvus.proto.common.SegmentState
	(*internalpb.GetComponentStatesRequest)(nil),   // 53: milvus.proto.internal.GetComponentStatesRequest
	(*internalpb.GetTimeTickChannelRequest)(nil),   // 54: milvus.proto.internal.GetTimeTickChannelRequest
	(*internalpb.GetStatisticsChannelRequest)(nil), // 55: milvus.proto.internal.GetStatisticsChannelRequest
	(*milvuspb.GetMetricsRequest)(nil),             // 56: milvus.proto.milvus.GetMetricsRequest
	(*milvuspb.GetReplicasRequest)(nil),            // 57: milvus.proto.milvus.GetReplicasRequest
	(*internalpb.ComponentStates)(nil),             // 58: milvus.proto.internal.ComponentStates
	(*milvuspb.StringResponse)(nil),                // 59: milvus.proto.milvus.StringResponse
	(*milvuspb.GetMetricsResponse)(nil),            // 60: milvus.proto.milvus.GetMetricsResponse
	(*milvuspb.GetReplicasResponse)(nil),           // 61: milvus.proto.milvus.GetReplicasResponse
	(*internalpb.SearchResults)(nil),               // 62: milvus.proto.internal.SearchResults
	(*internalpb.RetrieveResults)(nil),             // 63: milvus.proto.internal.RetrieveResults
}
var file_query_coord_proto_depIdxs = []int32{
	42, // 0: milvus.proto.query.ShowCollectionsRequest.base:type_name -> milvus.proto.common.MsgBase
	43, // 1: milvus.proto.query.ShowCollectionsResponse.status:type_name -> milvus.proto.common.Status
	42, // 2: milvus.proto.query.ShowPartitionsRequest.base:type_name -> milvus.proto.common.MsgBase
	43, // 3: milvus.proto.query.ShowPartitionsResponse.status:type_name -> milvus.proto.common.Status
	42, // 4: milvus.proto.query.LoadCollectionRequest.base:type_name -> milvus.proto.common.MsgBase
	44, // 5: milvus.proto.query.LoadCollectionRequest.schema:type_name -> milvus.proto.schema.CollectionSchema
	42, // 6: milvus.proto.query.ReleaseCollectionRequest.base:type_name -> milvus.proto.common.MsgBase
	42, // 7: milvus.proto.query.LoadPartitionsRequest.base:type_name -> milvus.proto.common.MsgBase
	44, // 8: milvus.proto.query.LoadPartitionsRequest.schema:type_name -> milvus.proto.schema.CollectionSchema
	42, // 9: milvus.proto.query.ReleasePartitionsRequest.base:type_name -> milvus.proto.common.MsgBase
	43, // 10: milvus.proto.query.CreateQueryChannelResponse.status:type_name -> milvus.proto.common.Status
	42, // 11: milvus.proto.query.GetPartitionStatesRequest.base:type_name -> milvus.proto.common.MsgBase
	43, // 12: milvus.proto.query.GetPartitionStatesResponse.status:type_name -> milvus.proto.common.Status
	35, // 13: milvus.proto.query.GetPartitionStatesResponse.partition_descriptions:type_name -> milvus.proto.query.PartitionStates
	42, // 14: milvus.proto.query.GetSegmentInfoRequest.base:type_name -> milvus.proto.common.MsgBase
	43, // 15: milvus.proto.query.GetSegmentInfoResponse.status:type_name -> milvus.proto.common.Status
	36, // 16: milvus.proto.query.GetSegmentInfoResponse.infos:type_name -> milvus.proto.query.SegmentInfo
	42, // 17: milvus.proto.query.GetShardLeadersRequest.base:type_name -> milvus.proto.common.MsgBase
	43, // 18: milvus.proto.query.GetShardLeadersResponse.status:type_name -> milvus.proto.common.Status
	19, // 19: milvus.proto.query.GetShardLeadersResponse.shards:type_name -> milvus.proto.query.ShardLeadersList
	42, // 20: milvus.proto.query.AddQueryChannelRequest.base:type_name -> milvus.proto.common.MsgBase
	45, // 21: milvus.proto.query.AddQueryChannelRequest.seek_position:type_name -> milvus.proto.internal.MsgPosition
	36, // 22: milvus.proto.query.AddQueryChannelRequest.global_sealed_segments:type_name -> milvus.proto.query.SegmentInfo
	42, // 23: milvus.proto.query.RemoveQueryChannelRequest.base:type_name -> milvus.proto.common.MsgBase
	2,  // 24: milvus.proto.query.LoadMetaInfo.load_type:type_name -> milvus.proto.query.LoadType
	42, // 25: milvus.proto.query.WatchDmChannelsRequest.base:type_name -> milvus.proto.common.MsgBase
	46, // 26: milvus.proto.query.WatchDmChannelsRequest.infos:type_name -> milvus.proto.data.VchannelInfo
	44, // 27: milvus.proto.query.WatchDmChannelsRequest.schema:type_name -> milvus.proto.schema.CollectionSchema
	47, // 28: milvus.proto.query.WatchDmChannelsRequest.exclude_infos:type_name -> milvus.proto.data.SegmentInfo
	22, // 29: milvus.proto.query.WatchDmChannelsRequest.load_meta:type_name -> milvus.proto.query.LoadMetaInfo
	42, // 30: milvus.proto.query.WatchDeltaChannelsRequest.base:type_name -> milvus.proto.common.MsgBase
	46, // 31: milvus.proto.query.WatchDeltaChannelsRequest.infos:type_name -> milvus.proto.data.VchannelInfo
	22, // 32: milvus.proto.query.WatchDeltaChannelsRequest.load_meta:type_name -> milvus.proto.query.LoadMetaInfo
	48, // 33: milvus.proto.query.SegmentLoadInfo.binlog_paths:type_name -> milvus.proto.data.FieldBinlog
	48, // 34: milvus.proto.query.SegmentLoadInfo.statslogs:type_name -> milvus.proto.data.FieldBinlog
	48, // 35: milvus.proto.query.SegmentLoadInfo.deltalogs:type_name -> milvus.proto.data.FieldBinlog
	26, // 36: milvus.proto.query.SegmentLoadInfo.index_infos:type_name -> milvus.proto.query.FieldIndexInfo
	49, // 37: milvus.proto.query.FieldIndexInfo.index_params:type_name -> milvus.proto.common.KeyValuePair
	42, // 38: milvus.proto.query.LoadSegmentsRequest.base:type_name -> milvus.proto.common.MsgBase
	25, // 39: milvus.proto.query.LoadSegmentsRequest.infos:type_name -> milvus.proto.query.SegmentLoadInfo
	44, // 40: milvus.proto.query.LoadSegmentsRequest.schema:type_name -> milvus.proto.schema.CollectionSchema
	22, // 41: milvus.proto.query.LoadSegmentsRequest.load_meta:type_name -> milvus.proto.query.LoadMetaInfo
	42, // 42: milvus.proto.query.ReleaseSegmentsRequest.base:type_name -> milvus.proto.common.MsgBase
	50, // 43: milvus.proto.query.SearchRequest.req:type_name -> milvus.proto.internal.SearchRequest
	51, // 44: milvus.proto.query.QueryRequest.req:type_name -> milvus.proto.internal.RetrieveRequest
	42, // 45: milvus.proto.query.HandoffSegmentsRequest.base:type_name -> milvus.proto.common.MsgBase
	36, // 46: milvus.proto.query.HandoffSegmentsRequest.segmentInfos:type_name -> milvus.proto.query.SegmentInfo
	42, // 47: milvus.proto.query.LoadBalanceRequest.base:type_name -> milvus.proto.common.MsgBase
	1,  // 48: milvus.proto.query.LoadBalanceRequest.balance_reason:type_name -> milvus.proto.query.TriggerCondition
	36, // 49: milvus.proto.query.QueryChannelInfo.global_sealed_segments:type_name -> milvus.proto.query.SegmentInfo
	45, // 50: milvus.proto.query.QueryChannelInfo.seek_position:type_name -> milvus.proto.internal.MsgPosition
	0,  // 51: milvus.proto.query.PartitionStates.state:type_name -> milvus.proto.query.PartitionState
	52, // 52: milvus.proto.query.SegmentInfo.segment_state:type_name -> milvus.proto.common.SegmentState
	26, // 53: milvus.proto.query.SegmentInfo.index_infos:type_name -> milvus.proto.query.FieldIndexInfo
	35, // 54: milvus.proto.query.CollectionInfo.partition_states:type_name -> milvus.proto.query.PartitionStates
	2,  // 55: milvus.proto.query.CollectionInfo.load_type:type_name -> milvus.proto.query.LoadType
	44, // 56: milvus.proto.query.CollectionInfo.schema:type_name -> milvus.proto.schema.CollectionSchema
	38, // 57: milvus.proto.query.UnsubscribeChannelInfo.collection_channels:type_name -> milvus.proto.query.UnsubscribeChannels
	36, // 58: milvus.proto.query.SegmentChangeInfo.online_segments:type_name -> milvus.proto.query.SegmentInfo
	36, // 59: milvus.proto.query.SegmentChangeInfo.offline_segments:type_name -> milvus.proto.query.SegmentInfo
	42, // 60: milvus.proto.query.SealedSegmentsChangeInfo.base:type_name -> milvus.proto.common.MsgBase
	40, // 61: milvus.proto.query.SealedSegmentsChangeInfo.infos:type_name -> milvus.proto.query.SegmentChangeInfo
	53, // 62: milvus.proto.query.QueryCoord.GetComponentStates:input_type -> milvus.proto.internal.GetComponentStatesRequest
	54, // 63: milvus.proto.query.QueryCoord.GetTimeTickChannel:input_type -> milvus.proto.internal.GetTimeTickChannelRequest
	55, // 64: milvus.proto.query.QueryCoord.GetStatisticsChannel:input_type -> milvus.proto.internal.GetStatisticsChannelRequest
	3,  // 65: milvus.proto.query.QueryCoord.ShowCollections:input_type -> milvus.proto.query.ShowCollectionsRequest
	5,  // 66: milvus.proto.query.QueryCoord.ShowPartitions:input_type -> milvus.proto.query.ShowPartitionsRequest
	9,  // 67: milvus.proto.query.QueryCoord.LoadPartitions:input_type -> milvus.proto.query.LoadPartitionsRequest
	10, // 68: milvus.proto.query.QueryCoord.ReleasePartitions:input_type -> milvus.proto.query.ReleasePartitionsRequest
	7,  // 69: milvus.proto.query.QueryCoord.LoadCollection:input_type -> milvus.proto.query.LoadCollectionRequest
	8,  // 70: milvus.proto.query.QueryCoord.ReleaseCollection:input_type -> milvus.proto.query.ReleaseCollectionRequest
	11, // 71: milvus.proto.query.QueryCoord.CreateQueryChannel:input_type -> milvus.proto.query.CreateQueryChannelRequest
	13, // 72: milvus.proto.query.QueryCoord.GetPartitionStates:input_type -> milvus.proto.query.GetPartitionStatesRequest
	15, // 73: milvus.proto.query.QueryCoord.GetSegmentInfo:input_type -> milvus.proto.query.GetSegmentInfoRequest
	32, // 74: milvus.proto.query.QueryCoord.LoadBalance:input_type -> milvus.proto.query.LoadBalanceRequest
	56, // 75: milvus.proto.query.QueryCoord.GetMetrics:input_type -> milvus.proto.milvus.GetMetricsRequest
	57, // 76: milvus.proto.query.QueryCoord.GetReplicas:input_type -> milvus.proto.milvus.GetReplicasRequest
	17, // 77: milvus.proto.query.QueryCoord.GetShardLeaders:input_type -> milvus.proto.query.GetShardLeadersRequest
	53, // 78: milvus.proto.query.QueryNode.GetComponentStates:input_type -> milvus.proto.internal.GetComponentStatesRequest
	54, // 79: milvus.proto.query.QueryNode.GetTimeTickChannel:input_type -> milvus.proto.internal.GetTimeTickChannelRequest
	55, // 80: milvus.proto.query.QueryNode.GetStatisticsChannel:input_type -> milvus.proto.internal.GetStatisticsChannelRequest
	20, // 81: milvus.proto.query.QueryNode.AddQueryChannel:input_type -> milvus.proto.query.AddQueryChannelRequest
	21, // 82: milvus.proto.query.QueryNode.RemoveQueryChannel:input_type -> milvus.proto.query.RemoveQueryChannelRequest
	23, // 83: milvus.proto.query.QueryNode.WatchDmChannels:input_type -> milvus.proto.query.WatchDmChannelsRequest
	24, // 84: milvus.proto.query.QueryNode.WatchDeltaChannels:input_type -> milvus.proto.query.WatchDeltaChannelsRequest
	27, // 85: milvus.proto.query.QueryNode.LoadSegments:input_type -> milvus.proto.query.LoadSegmentsRequest
	8,  // 86: milvus.proto.query.QueryNode.ReleaseCollection:input_type -> milvus.proto.query.ReleaseCollectionRequest
	10, // 87: milvus.proto.query.QueryNode.ReleasePartitions:input_type -> milvus.proto.query.ReleasePartitionsRequest
	28, // 88: milvus.proto.query.QueryNode.ReleaseSegments:input_type -> milvus.proto.query.ReleaseSegmentsRequest
	15, // 89: milvus.proto.query.QueryNode.GetSegmentInfo:input_type -> milvus.proto.query.GetSegmentInfoRequest
	29, // 90: milvus.proto.query.QueryNode.Search:input_type -> milvus.proto.query.SearchRequest
	30, // 91: milvus.proto.query.QueryNode.Query:input_type -> milvus.proto.query.QueryRequest
	56, // 92: milvus.proto.query.QueryNode.GetMetrics:input_type -> milvus.proto.milvus.GetMetricsRequest
	58, // 93: milvus.proto.query.QueryCoord.GetComponentStates:output_type -> milvus.proto.internal.ComponentStates
	59, // 94: milvus.proto.query.QueryCoord.GetTimeTickChannel:output_type -> milvus.proto.milvus.StringResponse
	59, // 95: milvus.proto.query.QueryCoord.GetStatisticsChannel:output_type -> milvus.proto.milvus.StringResponse
	4,  // 96: milvus.proto.query.QueryCoord.ShowCollections:output_type -> milvus.proto.query.ShowCollectionsResponse
	6,  // 97: milvus.proto.query.QueryCoord.ShowPartitions:output_type -> milvus.proto.query.ShowPartitionsResponse
	43, // 98: milvus.proto.query.QueryCoord.LoadPartitions:output_type -> milvus.proto.common.Status
	43, // 99: milvus.proto.query.QueryCoord.ReleasePartitions:output_type -> milvus.proto.common.Status
	43, // 100: milvus.proto.query.QueryCoord.LoadCollection:output_type -> milvus.proto.common.Status
	43, // 101: milvus.proto.query.QueryCoord.ReleaseCollection:output_type -> milvus.proto.common.Status
	12, // 102: milvus.proto.query.QueryCoord.CreateQueryChannel:output_type -> milvus.proto.query.CreateQueryChannelResponse
	14, // 103: milvus.proto.query.QueryCoord.GetPartitionStates:output_type -> milvus.proto.query.GetPartitionStatesResponse
	16, // 104: milvus.proto.query.QueryCoord.GetSegmentInfo:output_type -> milvus.proto.query.GetSegmentInfoResponse
	43, // 105: milvus.proto.query.QueryCoord.LoadBalance:output_type -> milvus.proto.common.Status
	60, // 106: milvus.proto.query.QueryCoord.GetMetrics:output_type -> milvus.proto.milvus.GetMetricsResponse
	61, // 107: milvus.proto.query.QueryCoord.GetReplicas:output_type -> milvus.proto.milvus.GetReplicasResponse
	18, // 108: milvus.proto.query.QueryCoord.GetShardLeaders:output_type -> milvus.proto.query.GetShardLeadersResponse
	58, // 109: milvus.proto.query.QueryNode.GetComponentStates:output_type -> milvus.proto.internal.ComponentStates
	59, // 110: milvus.proto.query.QueryNode.GetTimeTickChannel:output_type -> milvus.proto.milvus.StringResponse
	59, // 111: milvus.proto.query.QueryNode.GetStatisticsChannel:output_type -> milvus.proto.milvus.StringResponse
	43, // 112: milvus.proto.query.QueryNode.AddQueryChannel:output_type -> milvus.proto.common.Status
	43, // 113: milvus.proto.query.QueryNode.RemoveQueryChannel:output_type -> milvus.proto.common.Status
	43, // 114: milvus.proto.query.QueryNode.WatchDmChannels:output_type -> milvus.proto.common.Status
	43, // 115: milvus.proto.query.QueryNode.WatchDeltaChannels:output_type -> milvus.proto.common.Status
	43, // 116: milvus.proto.query.QueryNode.LoadSegments:output_type -> milvus.proto.common.Status
	43, // 117: milvus.proto.query.QueryNode.ReleaseCollection:output_type -> milvus.proto.common.Status
	43, // 118: milvus.proto.query.QueryNode.ReleasePartitions:output_type -> milvus.proto.common.Status
	43, // 119: milvus.proto.query.QueryNode.ReleaseSegments:output_type -> milvus.proto.common.Status
	16, // 120: milvus.proto.query.QueryNode.GetSegmentInfo:output_type -> milvus.proto.query.GetSegmentInfoResponse
	62, // 121: milvus.proto.query.QueryNode.Search:output_type -> milvus.proto.internal.SearchResults
	63, // 122: milvus.proto.query.QueryNode.Query:output_type -> milvus.proto.internal.RetrieveResults
	60, // 123: milvus.proto.query.QueryNode.GetMetrics:output_type -> milvus.proto.milvus.GetMetricsResponse
	93, // [93:124] is the sub-list for method output_type
	62, // [62:93] is the sub-list for method input_type
	62, // [62:62] is the sub-list for extension type_name
	62, // [62:62] is the sub-list for extension extendee
	0,  // [0:62] is the sub-list for field type_name
}

func init() { file_query_coord_proto_init() }
func file_query_coord_proto_init() {
	if File_query_coord_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_query_coord_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShowCollectionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_query_coord_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShowCollectionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_query_coord_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShowPartitionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_query_coord_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShowPartitionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_query_coord_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoadCollectionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_query_coord_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReleaseCollectionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_query_coord_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoadPartitionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_query_coord_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReleasePartitionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_query_coord_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateQueryChannelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_query_coord_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateQueryChannelResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_query_coord_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPartitionStatesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_query_coord_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPartitionStatesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_query_coord_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSegmentInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_query_coord_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSegmentInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_query_coord_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetShardLeadersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_query_coord_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetShardLeadersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_query_coord_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShardLeadersList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_query_coord_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddQueryChannelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_query_coord_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveQueryChannelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_query_coord_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoadMetaInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_query_coord_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchDmChannelsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_query_coord_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchDeltaChannelsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_query_coord_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SegmentLoadInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_query_coord_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FieldIndexInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_query_coord_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoadSegmentsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_query_coord_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReleaseSegmentsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_query_coord_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_query_coord_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_query_coord_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HandoffSegmentsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_query_coord_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoadBalanceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_query_coord_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DmChannelWatchInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_query_coord_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryChannelInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_query_coord_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PartitionStates); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_query_coord_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SegmentInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_query_coord_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollectionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_query_coord_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnsubscribeChannels); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_query_coord_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnsubscribeChannelInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_query_coord_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SegmentChangeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_query_coord_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SealedSegmentsChangeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_query_coord_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   39,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_query_coord_proto_goTypes,
		DependencyIndexes: file_query_coord_proto_depIdxs,
		EnumInfos:         file_query_coord_proto_enumTypes,
		MessageInfos:      file_query_coord_proto_msgTypes,
	}.Build()
	File_query_coord_proto = out.File
	file_query_coord_proto_rawDesc = nil
	file_query_coord_proto_goTypes = nil
	file_query_coord_proto_depIdxs = nil
=======
type ReplicaInfo struct {
	ReplicaId            int64           `protobuf:"varint,1,opt,name=replica_id,json=replicaId,proto3" json:"replica_id,omitempty"`
	CollectionId         int64           `protobuf:"varint,2,opt,name=collection_id,json=collectionId,proto3" json:"collection_id,omitempty"`
	PartitionIds         []int64         `protobuf:"varint,3,rep,packed,name=partition_ids,json=partitionIds,proto3" json:"partition_ids,omitempty"`
	ShardReplicas        []*ShardReplica `protobuf:"bytes,4,rep,name=shard_replicas,json=shardReplicas,proto3" json:"shard_replicas,omitempty"`
	NodeIds              []int64         `protobuf:"varint,5,rep,packed,name=node_ids,json=nodeIds,proto3" json:"node_ids,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *ReplicaInfo) Reset()         { *m = ReplicaInfo{} }
func (m *ReplicaInfo) String() string { return proto.CompactTextString(m) }
func (*ReplicaInfo) ProtoMessage()    {}
func (*ReplicaInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_aab7cc9a69ed26e8, []int{34}
}

func (m *ReplicaInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReplicaInfo.Unmarshal(m, b)
}
func (m *ReplicaInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReplicaInfo.Marshal(b, m, deterministic)
}
func (m *ReplicaInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplicaInfo.Merge(m, src)
}
func (m *ReplicaInfo) XXX_Size() int {
	return xxx_messageInfo_ReplicaInfo.Size(m)
}
func (m *ReplicaInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplicaInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ReplicaInfo proto.InternalMessageInfo

func (m *ReplicaInfo) GetReplicaId() int64 {
	if m != nil {
		return m.ReplicaId
	}
	return 0
}

func (m *ReplicaInfo) GetCollectionId() int64 {
	if m != nil {
		return m.CollectionId
	}
	return 0
}

func (m *ReplicaInfo) GetPartitionIds() []int64 {
	if m != nil {
		return m.PartitionIds
	}
	return nil
}

func (m *ReplicaInfo) GetShardReplicas() []*ShardReplica {
	if m != nil {
		return m.ShardReplicas
	}
	return nil
}

func (m *ReplicaInfo) GetNodeIds() []int64 {
	if m != nil {
		return m.NodeIds
	}
	return nil
}

type ShardReplica struct {
	Leader               int64    `protobuf:"varint,1,opt,name=leader,proto3" json:"leader,omitempty"`
	DmChannelName        string   `protobuf:"bytes,2,opt,name=dm_channel_name,json=dmChannelName,proto3" json:"dm_channel_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ShardReplica) Reset()         { *m = ShardReplica{} }
func (m *ShardReplica) String() string { return proto.CompactTextString(m) }
func (*ShardReplica) ProtoMessage()    {}
func (*ShardReplica) Descriptor() ([]byte, []int) {
	return fileDescriptor_aab7cc9a69ed26e8, []int{35}
}

func (m *ShardReplica) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ShardReplica.Unmarshal(m, b)
}
func (m *ShardReplica) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ShardReplica.Marshal(b, m, deterministic)
}
func (m *ShardReplica) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShardReplica.Merge(m, src)
}
func (m *ShardReplica) XXX_Size() int {
	return xxx_messageInfo_ShardReplica.Size(m)
}
func (m *ShardReplica) XXX_DiscardUnknown() {
	xxx_messageInfo_ShardReplica.DiscardUnknown(m)
}

var xxx_messageInfo_ShardReplica proto.InternalMessageInfo

func (m *ShardReplica) GetLeader() int64 {
	if m != nil {
		return m.Leader
	}
	return 0
}

func (m *ShardReplica) GetDmChannelName() string {
	if m != nil {
		return m.DmChannelName
	}
	return ""
}

=======
>>>>>>> merge with yah01/mem_replica
func init() {
	proto.RegisterEnum("milvus.proto.query.PartitionState", PartitionState_name, PartitionState_value)
	proto.RegisterEnum("milvus.proto.query.TriggerCondition", TriggerCondition_name, TriggerCondition_value)
	proto.RegisterEnum("milvus.proto.query.LoadType", LoadType_name, LoadType_value)
	proto.RegisterType((*ShowCollectionsRequest)(nil), "milvus.proto.query.ShowCollectionsRequest")
	proto.RegisterType((*ShowCollectionsResponse)(nil), "milvus.proto.query.ShowCollectionsResponse")
	proto.RegisterType((*ShowPartitionsRequest)(nil), "milvus.proto.query.ShowPartitionsRequest")
	proto.RegisterType((*ShowPartitionsResponse)(nil), "milvus.proto.query.ShowPartitionsResponse")
	proto.RegisterType((*LoadCollectionRequest)(nil), "milvus.proto.query.LoadCollectionRequest")
	proto.RegisterType((*ReleaseCollectionRequest)(nil), "milvus.proto.query.ReleaseCollectionRequest")
	proto.RegisterType((*LoadPartitionsRequest)(nil), "milvus.proto.query.LoadPartitionsRequest")
	proto.RegisterType((*ReleasePartitionsRequest)(nil), "milvus.proto.query.ReleasePartitionsRequest")
	proto.RegisterType((*CreateQueryChannelRequest)(nil), "milvus.proto.query.CreateQueryChannelRequest")
	proto.RegisterType((*CreateQueryChannelResponse)(nil), "milvus.proto.query.CreateQueryChannelResponse")
	proto.RegisterType((*GetPartitionStatesRequest)(nil), "milvus.proto.query.GetPartitionStatesRequest")
	proto.RegisterType((*GetPartitionStatesResponse)(nil), "milvus.proto.query.GetPartitionStatesResponse")
	proto.RegisterType((*GetSegmentInfoRequest)(nil), "milvus.proto.query.GetSegmentInfoRequest")
	proto.RegisterType((*GetSegmentInfoResponse)(nil), "milvus.proto.query.GetSegmentInfoResponse")
	proto.RegisterType((*GetReplicasRequest)(nil), "milvus.proto.query.GetReplicasRequest")
	proto.RegisterType((*GetReplicasResponse)(nil), "milvus.proto.query.GetReplicasResponse")
	proto.RegisterType((*GetShardLeadersRequest)(nil), "milvus.proto.query.GetShardLeadersRequest")
	proto.RegisterType((*GetShardLeadersResponse)(nil), "milvus.proto.query.GetShardLeadersResponse")
	proto.RegisterType((*ShardLeadersList)(nil), "milvus.proto.query.ShardLeadersList")
	proto.RegisterType((*AddQueryChannelRequest)(nil), "milvus.proto.query.AddQueryChannelRequest")
	proto.RegisterType((*RemoveQueryChannelRequest)(nil), "milvus.proto.query.RemoveQueryChannelRequest")
	proto.RegisterType((*LoadMetaInfo)(nil), "milvus.proto.query.LoadMetaInfo")
	proto.RegisterType((*WatchDmChannelsRequest)(nil), "milvus.proto.query.WatchDmChannelsRequest")
	proto.RegisterType((*WatchDeltaChannelsRequest)(nil), "milvus.proto.query.WatchDeltaChannelsRequest")
	proto.RegisterType((*SegmentLoadInfo)(nil), "milvus.proto.query.SegmentLoadInfo")
	proto.RegisterType((*FieldIndexInfo)(nil), "milvus.proto.query.FieldIndexInfo")
	proto.RegisterType((*LoadSegmentsRequest)(nil), "milvus.proto.query.LoadSegmentsRequest")
	proto.RegisterType((*ReleaseSegmentsRequest)(nil), "milvus.proto.query.ReleaseSegmentsRequest")
	proto.RegisterType((*SearchRequest)(nil), "milvus.proto.query.SearchRequest")
	proto.RegisterType((*QueryRequest)(nil), "milvus.proto.query.QueryRequest")
	proto.RegisterType((*HandoffSegmentsRequest)(nil), "milvus.proto.query.HandoffSegmentsRequest")
	proto.RegisterType((*LoadBalanceRequest)(nil), "milvus.proto.query.LoadBalanceRequest")
	proto.RegisterType((*DmChannelWatchInfo)(nil), "milvus.proto.query.DmChannelWatchInfo")
	proto.RegisterType((*QueryChannelInfo)(nil), "milvus.proto.query.QueryChannelInfo")
	proto.RegisterType((*PartitionStates)(nil), "milvus.proto.query.PartitionStates")
	proto.RegisterType((*SegmentInfo)(nil), "milvus.proto.query.SegmentInfo")
	proto.RegisterType((*CollectionInfo)(nil), "milvus.proto.query.CollectionInfo")
	proto.RegisterType((*ReplicaInfo)(nil), "milvus.proto.query.ReplicaInfo")
	proto.RegisterType((*ShardReplica)(nil), "milvus.proto.query.ShardReplica")
	proto.RegisterType((*UnsubscribeChannels)(nil), "milvus.proto.query.UnsubscribeChannels")
	proto.RegisterType((*UnsubscribeChannelInfo)(nil), "milvus.proto.query.UnsubscribeChannelInfo")
	proto.RegisterType((*SegmentChangeInfo)(nil), "milvus.proto.query.SegmentChangeInfo")
	proto.RegisterType((*SealedSegmentsChangeInfo)(nil), "milvus.proto.query.SealedSegmentsChangeInfo")
}

func init() { proto.RegisterFile("query_coord.proto", fileDescriptor_aab7cc9a69ed26e8) }

var fileDescriptor_aab7cc9a69ed26e8 = []byte{
<<<<<<< HEAD
	// 2563 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x3a, 0xcd, 0x6f, 0x1c, 0x49,
	0xf5, 0xee, 0xf9, 0xb0, 0x3d, 0x6f, 0x3e, 0x5d, 0x4e, 0xfc, 0x9b, 0xcc, 0x6f, 0x37, 0xf1, 0x76,
	0xd6, 0x49, 0xc8, 0xb2, 0x4e, 0x70, 0x40, 0x62, 0x05, 0x1c, 0xd6, 0x36, 0xf1, 0x9a, 0x6c, 0xbc,
	0xa6, 0xed, 0x04, 0x88, 0x22, 0x35, 0x3d, 0xd3, 0x35, 0xe3, 0x56, 0xfa, 0x63, 0xd2, 0xd5, 0xb3,
	0x89, 0xc3, 0x95, 0x0b, 0x48, 0x08, 0x71, 0x45, 0x88, 0x13, 0x08, 0x22, 0xb1, 0x17, 0xce, 0x1c,
	0xb8, 0xf0, 0x4f, 0x70, 0x40, 0x1c, 0x90, 0xe0, 0x1f, 0xe0, 0x88, 0x40, 0xf5, 0xd1, 0x3d, 0xfd,
	0x51, 0x6d, 0xf7, 0xd8, 0xca, 0x26, 0x42, 0xdc, 0xa6, 0x5e, 0xbf, 0x7a, 0xef, 0xd5, 0xfb, 0xae,
	0x7a, 0x03, 0x4b, 0x4f, 0x27, 0xd8, 0x3f, 0xd6, 0x07, 0x9e, 0xe7, 0x9b, 0xeb, 0x63, 0xdf, 0x0b,
	0x3c, 0x84, 0x1c, 0xcb, 0xfe, 0x74, 0x42, 0xf8, 0x6a, 0x9d, 0x7d, 0xef, 0x35, 0x06, 0x9e, 0xe3,
	0x78, 0x2e, 0x87, 0xf5, 0x1a, 0x71, 0x8c, 0x5e, 0xcb, 0x72, 0x03, 0xec, 0xbb, 0x86, 0x1d, 0x7e,
	0x25, 0x83, 0x23, 0xec, 0x18, 0x62, 0xd5, 0x31, 0x8d, 0xc0, 0x88, 0xd3, 0x57, 0x7f, 0xa8, 0xc0,
	0xca, 0xc1, 0x91, 0xf7, 0x6c, 0xcb, 0xb3, 0x6d, 0x3c, 0x08, 0x2c, 0xcf, 0x25, 0x1a, 0x7e, 0x3a,
	0xc1, 0x24, 0x40, 0xb7, 0xa1, 0xd2, 0x37, 0x08, 0xee, 0x2a, 0xab, 0xca, 0x8d, 0xfa, 0xc6, 0x5b,
	0xeb, 0x09, 0x49, 0x84, 0x08, 0xf7, 0xc9, 0x68, 0xd3, 0x20, 0x58, 0x63, 0x98, 0x08, 0x41, 0xc5,
	0xec, 0xef, 0x6e, 0x77, 0x4b, 0xab, 0xca, 0x8d, 0xb2, 0xc6, 0x7e, 0xa3, 0x77, 0xa1, 0x39, 0x88,
	0x68, 0xef, 0x6e, 0x93, 0x6e, 0x79, 0xb5, 0x7c, 0xa3, 0xac, 0x25, 0x81, 0xea, 0x6f, 0x14, 0xf8,
	0xbf, 0x8c, 0x18, 0x64, 0xec, 0xb9, 0x04, 0xa3, 0x3b, 0x30, 0x4f, 0x02, 0x23, 0x98, 0x10, 0x21,
	0xc9, 0xff, 0x4b, 0x25, 0x39, 0x60, 0x28, 0x9a, 0x40, 0xcd, 0xb2, 0x2d, 0x49, 0xd8, 0xa2, 0x2f,
	0xc1, 0x05, 0xcb, 0xbd, 0x8f, 0x1d, 0xcf, 0x3f, 0xd6, 0xc7, 0xd8, 0x1f, 0x60, 0x37, 0x30, 0x46,
	0x38, 0x94, 0x71, 0x39, 0xfc, 0xb6, 0x3f, 0xfd, 0xa4, 0xfe, 0x5a, 0x81, 0x8b, 0x54, 0xd2, 0x7d,
	0xc3, 0x0f, 0xac, 0x57, 0xa0, 0x2f, 0x15, 0x1a, 0x71, 0x19, 0xbb, 0x65, 0xf6, 0x2d, 0x01, 0xa3,
	0x38, 0xe3, 0x90, 0x3d, 0x3d, 0x5b, 0x85, 0x89, 0x9b, 0x80, 0xa9, 0xbf, 0x12, 0x86, 0x8d, 0xcb,
	0x79, 0x1e, 0x85, 0xa6, 0x79, 0x96, 0xb2, 0x3c, 0xcf, 0xa2, 0xce, 0xbf, 0x2b, 0x70, 0xf1, 0x63,
	0xcf, 0x30, 0xa7, 0x86, 0xff, 0xfc, 0xd5, 0xf9, 0x0d, 0x98, 0xe7, 0x51, 0xd2, 0xad, 0x30, 0x5e,
	0x6b, 0x49, 0x5e, 0x22, 0x82, 0xa6, 0x12, 0x1e, 0x30, 0x80, 0x26, 0x36, 0xa1, 0x35, 0x68, 0xf9,
	0x78, 0x6c, 0x5b, 0x03, 0x43, 0x77, 0x27, 0x4e, 0x1f, 0xfb, 0xdd, 0xea, 0xaa, 0x72, 0xa3, 0xaa,
	0x35, 0x05, 0x74, 0x8f, 0x01, 0xd5, 0x5f, 0x28, 0xd0, 0xd5, 0xb0, 0x8d, 0x0d, 0x82, 0x5f, 0xe7,
	0x61, 0x57, 0x60, 0xde, 0xf5, 0x4c, 0xbc, 0xbb, 0xcd, 0x0e, 0x5b, 0xd6, 0xc4, 0x4a, 0xfd, 0x9b,
	0x30, 0xc4, 0x1b, 0xee, 0xd7, 0x31, 0x63, 0x55, 0xcf, 0x60, 0x2c, 0xf5, 0x8f, 0x53, 0x2b, 0xbc,
	0xe9, 0x27, 0x9d, 0x5a, 0xaa, 0x9a, 0xb0, 0xd4, 0xf7, 0xe0, 0xd2, 0x96, 0x8f, 0x8d, 0x00, 0x7f,
	0x9b, 0x56, 0x83, 0xad, 0x23, 0xc3, 0x75, 0xb1, 0x1d, 0x1e, 0x21, 0xcd, 0x5c, 0x91, 0x30, 0xef,
	0xc2, 0xc2, 0xd8, 0xf7, 0x9e, 0x1f, 0x47, 0x72, 0x87, 0x4b, 0xf5, 0xb7, 0x0a, 0xf4, 0x64, 0xb4,
	0xcf, 0x93, 0x38, 0xae, 0x42, 0x53, 0x94, 0x35, 0x4e, 0x8d, 0xf1, 0xac, 0x69, 0x8d, 0xa7, 0x31,
	0x0e, 0xe8, 0x36, 0x5c, 0xe0, 0x48, 0x3e, 0x26, 0x13, 0x3b, 0x88, 0x70, 0xcb, 0x0c, 0x17, 0xb1,
	0x6f, 0x1a, 0xfb, 0x24, 0x76, 0xa8, 0x2f, 0x15, 0xb8, 0xb4, 0x83, 0x83, 0xc8, 0x88, 0x94, 0x2b,
	0x7e, 0x43, 0x73, 0xf1, 0x67, 0x0a, 0xf4, 0x64, 0xb2, 0x9e, 0x47, 0xad, 0x8f, 0x60, 0x25, 0xe2,
	0xa1, 0x9b, 0x98, 0x0c, 0x7c, 0x6b, 0xcc, 0x9c, 0x99, 0x65, 0xe6, 0xfa, 0xc6, 0xd5, 0xf5, 0x6c,
	0xe7, 0xb0, 0x9e, 0x96, 0xe0, 0x62, 0x44, 0x62, 0x3b, 0x46, 0x41, 0xfd, 0x89, 0x02, 0x17, 0x77,
	0x70, 0x70, 0x80, 0x47, 0x0e, 0x76, 0x83, 0x5d, 0x77, 0xe8, 0x9d, 0x5d, 0xaf, 0x97, 0x01, 0x88,
	0xa0, 0x13, 0x55, 0x8d, 0x18, 0xa4, 0x88, 0x8e, 0x59, 0x93, 0x92, 0x96, 0xe7, 0x3c, 0xba, 0xfb,
	0x0a, 0x54, 0x2d, 0x77, 0xe8, 0x85, 0xaa, 0xba, 0x22, 0x53, 0x55, 0x9c, 0x19, 0xc7, 0x56, 0xff,
	0x55, 0x82, 0x95, 0x0f, 0x4d, 0x53, 0x16, 0x76, 0xb3, 0xeb, 0x65, 0x1a, 0xdd, 0xa5, 0x78, 0x74,
	0x17, 0xf2, 0xb9, 0x4c, 0x48, 0x55, 0x66, 0x08, 0xa9, 0x6a, 0x5e, 0x48, 0xa1, 0x1d, 0x68, 0x12,
	0x8c, 0x9f, 0xe8, 0x63, 0x8f, 0x30, 0x9f, 0xe8, 0xce, 0xb3, 0xd3, 0xa8, 0xc9, 0xd3, 0x44, 0x0d,
	0xe6, 0x7d, 0x32, 0xda, 0x17, 0x98, 0x5a, 0x83, 0x6e, 0x0c, 0x57, 0xe8, 0x01, 0xac, 0x8c, 0x6c,
	0xaf, 0x6f, 0xd8, 0x3a, 0xc1, 0x86, 0x8d, 0x4d, 0x5d, 0xd8, 0x9b, 0x74, 0x17, 0x8a, 0x29, 0xfc,
	0x02, 0xdf, 0x7e, 0xc0, 0x76, 0x8b, 0x0f, 0x44, 0xfd, 0xab, 0x02, 0x97, 0x34, 0xec, 0x78, 0x9f,
	0xe2, 0xff, 0x56, 0x13, 0xa8, 0x3f, 0x53, 0xa0, 0x41, 0xab, 0xf0, 0x7d, 0x1c, 0x18, 0x54, 0x13,
	0xe8, 0x03, 0xa8, 0xd9, 0x9e, 0x61, 0xea, 0xc1, 0xf1, 0x98, 0x1f, 0xad, 0x95, 0x3e, 0x1a, 0xd7,
	0x1e, 0xdd, 0x74, 0x78, 0x3c, 0xc6, 0xda, 0xa2, 0x2d, 0x7e, 0x65, 0x8e, 0x51, 0x2a, 0x90, 0xbd,
	0xca, 0xb2, 0x4e, 0xb2, 0x0c, 0x2b, 0xdf, 0x31, 0x82, 0xc1, 0xd1, 0xb6, 0x23, 0xc4, 0x24, 0xaf,
	0x47, 0xe7, 0x45, 0x8a, 0x66, 0x14, 0xda, 0x55, 0x99, 0xa7, 0xd1, 0xeb, 0xcf, 0xfa, 0x43, 0x61,
	0x86, 0x58, 0x68, 0xc7, 0xba, 0x8a, 0xf9, 0xb3, 0xb4, 0x80, 0x5b, 0xd0, 0xc4, 0xcf, 0x07, 0xf6,
	0xc4, 0xc4, 0x3a, 0xe7, 0xce, 0xfd, 0xfc, 0xb2, 0x84, 0x7b, 0xdc, 0xcd, 0x1b, 0x62, 0xd3, 0xae,
	0x90, 0x81, 0x9b, 0xda, 0xc1, 0x81, 0xd1, 0x5d, 0x64, 0x62, 0xac, 0xe6, 0x99, 0x3a, 0xf4, 0x0f,
	0x6e, 0x6e, 0xba, 0x52, 0xff, 0xad, 0xc0, 0x25, 0x6e, 0x26, 0x6c, 0x07, 0xc6, 0xeb, 0xb5, 0x54,
	0x64, 0x85, 0xca, 0x8c, 0x56, 0x88, 0x69, 0xa0, 0x36, 0xb3, 0x06, 0x7e, 0x5e, 0x81, 0xb6, 0x50,
	0x2f, 0xc5, 0x60, 0xf1, 0xf3, 0x16, 0xd4, 0xa2, 0x62, 0x23, 0x9a, 0xa1, 0x29, 0x00, 0xad, 0x42,
	0x3d, 0xe6, 0x3d, 0xe2, 0xa0, 0x71, 0x50, 0xa1, 0xd3, 0x86, 0xad, 0x43, 0x25, 0xd6, 0x3a, 0xbc,
	0x0d, 0x30, 0xb4, 0x27, 0xe4, 0x48, 0x0f, 0x2c, 0x07, 0x8b, 0x06, 0xae, 0xc6, 0x20, 0x87, 0x96,
	0x83, 0xd1, 0x87, 0xd0, 0xe8, 0x5b, 0xae, 0xed, 0x8d, 0xf4, 0xb1, 0x11, 0x1c, 0x91, 0xee, 0x7c,
	0xae, 0xbf, 0xdc, 0xb5, 0xb0, 0x6d, 0x6e, 0x32, 0x5c, 0xad, 0xce, 0xf7, 0xec, 0xd3, 0x2d, 0xe8,
	0x32, 0xd4, 0xdd, 0x89, 0xa3, 0x7b, 0x43, 0xdd, 0xf7, 0x9e, 0x51, 0x8f, 0x63, 0x2c, 0xdc, 0x89,
	0xf3, 0xc9, 0x50, 0xf3, 0x9e, 0x11, 0xf4, 0x75, 0xa8, 0xd1, 0x72, 0x47, 0x6c, 0x6f, 0x44, 0xba,
	0x8b, 0x85, 0xe8, 0x4f, 0x37, 0xd0, 0xdd, 0x26, 0xf5, 0x23, 0xb6, 0xbb, 0x56, 0x6c, 0x77, 0xb4,
	0x01, 0x5d, 0x83, 0xd6, 0xc0, 0x73, 0xc6, 0x06, 0xd3, 0xd0, 0x5d, 0xdf, 0x73, 0xba, 0xc0, 0x62,
	0x35, 0x05, 0x45, 0x77, 0xa1, 0x6e, 0xb9, 0x26, 0x7e, 0x2e, 0xa2, 0xa6, 0xce, 0xf8, 0xac, 0xc9,
	0x4c, 0xfe, 0x10, 0x0f, 0x18, 0xaf, 0x5d, 0x8a, 0xce, 0xec, 0x0e, 0x56, 0xf8, 0x93, 0xa0, 0x77,
	0xa0, 0x21, 0x8c, 0xaa, 0x13, 0xeb, 0x05, 0xee, 0x36, 0xb8, 0x21, 0x05, 0xec, 0xc0, 0x7a, 0x81,
	0xd5, 0xdf, 0x97, 0x60, 0x29, 0x43, 0x84, 0xb6, 0xc2, 0x43, 0x06, 0x09, 0x9d, 0x23, 0x5c, 0x52,
	0x92, 0xd8, 0x35, 0xfa, 0x36, 0x8d, 0x68, 0x13, 0x3f, 0x67, 0xbe, 0xb1, 0xa8, 0xd5, 0x39, 0x8c,
	0x11, 0xa0, 0x36, 0xe6, 0xd2, 0xbb, 0x86, 0x83, 0x45, 0xab, 0x5a, 0x63, 0x90, 0x3d, 0xc3, 0xc1,
	0x94, 0x36, 0x17, 0x31, 0xf4, 0x8c, 0x70, 0x49, 0xbf, 0xf4, 0x27, 0x16, 0xe3, 0xca, 0x3d, 0x23,
	0x5c, 0xa2, 0x6d, 0x68, 0x70, 0x92, 0x63, 0xc3, 0x37, 0x9c, 0xd0, 0x2f, 0xde, 0x91, 0x86, 0xeb,
	0x3d, 0x7c, 0xfc, 0xd0, 0xb0, 0x27, 0x78, 0xdf, 0xb0, 0x7c, 0x8d, 0xeb, 0x71, 0x9f, 0xed, 0x42,
	0x37, 0xa0, 0xc3, 0xa9, 0x0c, 0x2d, 0x1b, 0x0b, 0x0f, 0xa3, 0x19, 0xa9, 0xa6, 0xb5, 0x18, 0xfc,
	0xae, 0x65, 0x63, 0xee, 0x44, 0xd1, 0x11, 0x98, 0xda, 0x16, 0xb9, 0x0f, 0x31, 0x08, 0x53, 0xda,
	0x3f, 0x4a, 0xb0, 0x4c, 0x43, 0x29, 0x2c, 0xc1, 0x67, 0xcf, 0x26, 0x6f, 0x03, 0x98, 0x24, 0xd0,
	0x13, 0x19, 0xa5, 0x66, 0x92, 0x60, 0x8f, 0x27, 0x95, 0x0f, 0xc2, 0x84, 0x51, 0xce, 0x6f, 0x5e,
	0x53, 0xa1, 0x9d, 0x4d, 0xdd, 0x67, 0xba, 0xbd, 0x5f, 0x85, 0x26, 0xf1, 0x26, 0xfe, 0x00, 0xeb,
	0x89, 0xcb, 0x56, 0x83, 0x03, 0xf7, 0xe4, 0x39, 0x6f, 0x5e, 0xfa, 0x8a, 0x10, 0x4b, 0x5e, 0x0b,
	0x33, 0x27, 0xaf, 0xbf, 0x28, 0xb0, 0x22, 0x2e, 0xa6, 0xe7, 0xd7, 0x76, 0x5e, 0xee, 0x0e, 0x33,
	0x55, 0xf9, 0x84, 0x4b, 0x4e, 0xa5, 0x40, 0xe5, 0xad, 0x4a, 0x2a, 0x6f, 0xb2, 0xd1, 0x9f, 0x4f,
	0x37, 0xfa, 0xea, 0x4f, 0x15, 0x58, 0xf9, 0xc8, 0x70, 0x4d, 0x6f, 0x38, 0x3c, 0xff, 0x01, 0xb7,
	0xa2, 0x80, 0xdf, 0x9d, 0xa5, 0x91, 0x4f, 0x6c, 0x52, 0x7f, 0x57, 0x02, 0x44, 0xad, 0xb1, 0x69,
	0xd8, 0x86, 0x3b, 0xc0, 0x67, 0x97, 0x66, 0x0d, 0x5a, 0x09, 0x1f, 0x8a, 0x5e, 0x1b, 0xe3, 0x4e,
	0x44, 0xd0, 0x3d, 0x68, 0xf5, 0x39, 0x2b, 0xdd, 0xc7, 0x06, 0xf1, 0x5c, 0x66, 0x87, 0xd6, 0xc6,
	0xbb, 0x32, 0xb1, 0x0f, 0x7d, 0x6b, 0x34, 0xc2, 0xfe, 0x96, 0xe7, 0x9a, 0xbc, 0xc5, 0x6e, 0xf6,
	0x43, 0x31, 0xe9, 0x56, 0x74, 0x05, 0xea, 0xd3, 0x80, 0x0a, 0x7b, 0x21, 0x88, 0x22, 0x8a, 0xa0,
	0xf7, 0x60, 0x29, 0xd9, 0x7d, 0x4f, 0x0d, 0xd7, 0x21, 0xf1, 0xc6, 0x5a, 0x76, 0x0b, 0x93, 0x38,
	0xb8, 0xfa, 0x03, 0x40, 0x51, 0x07, 0xc8, 0x1a, 0x0d, 0x96, 0x41, 0x8b, 0x3c, 0x38, 0xbc, 0x05,
	0x35, 0x33, 0xdc, 0x29, 0xae, 0xff, 0x53, 0x00, 0x8d, 0x40, 0x7e, 0x0a, 0x9d, 0x06, 0x03, 0x36,
	0xc3, 0x1a, 0xcb, 0x81, 0x1f, 0x33, 0x98, 0xfa, 0x59, 0x09, 0x3a, 0xf1, 0xae, 0xbf, 0x30, 0xef,
	0x57, 0xf3, 0xfc, 0x70, 0xc2, 0x15, 0xa7, 0x72, 0x8e, 0x2b, 0x4e, 0xf6, 0x0a, 0x56, 0x3d, 0xdb,
	0x15, 0x4c, 0xfd, 0xa5, 0x02, 0xed, 0xd4, 0x6d, 0x3f, 0xdd, 0xed, 0x28, 0xd9, 0x6e, 0xe7, 0xab,
	0x50, 0xa5, 0x2d, 0x00, 0x66, 0x4a, 0x6a, 0xa5, 0xd9, 0xca, 0xde, 0x10, 0x34, 0xbe, 0x01, 0xdd,
	0x82, 0x65, 0xc9, 0xd3, 0xaf, 0x30, 0x25, 0xca, 0xbe, 0xfc, 0xaa, 0x7f, 0xa8, 0x40, 0x3d, 0xa6,
	0x8f, 0x53, 0x1a, 0xb5, 0x22, 0x77, 0x99, 0xd4, 0xf1, 0xca, 0xd9, 0xe3, 0xe5, 0xbc, 0x7d, 0xa2,
	0x4b, 0xb0, 0xe8, 0x60, 0x87, 0xd7, 0x40, 0x51, 0x90, 0x1d, 0xec, 0xd0, 0x0a, 0x48, 0x3f, 0xd1,
	0x2e, 0x8b, 0xb5, 0x58, 0x3c, 0x28, 0x16, 0xdc, 0x89, 0xc3, 0x1a, 0xac, 0x64, 0xf9, 0x5f, 0x38,
	0xa1, 0xfc, 0x2f, 0x26, 0xcb, 0x7f, 0x22, 0x1c, 0x6a, 0xe9, 0x70, 0x28, 0xda, 0x3b, 0xdd, 0x86,
	0xe5, 0x01, 0x7b, 0xaa, 0x33, 0x37, 0x8f, 0xb7, 0xa2, 0x4f, 0xdd, 0x3a, 0xeb, 0x53, 0x64, 0x9f,
	0xd0, 0x5d, 0xea, 0x5c, 0xa2, 0x4b, 0x62, 0x56, 0x6e, 0x30, 0x2b, 0xcb, 0xbb, 0x0b, 0x61, 0x1b,
	0x6e, 0xe4, 0x30, 0x6f, 0xb2, 0x55, 0xba, 0x6b, 0x6b, 0x9e, 0xb5, 0x6b, 0xbb, 0x02, 0xf5, 0xf0,
	0xe1, 0xdc, 0x32, 0x49, 0xb7, 0xc5, 0x53, 0x98, 0x00, 0xed, 0x9a, 0x84, 0x29, 0xdf, 0xa3, 0x77,
	0x2a, 0x93, 0x74, 0xdb, 0xec, 0xeb, 0x02, 0xb3, 0x98, 0x49, 0xd4, 0x97, 0x65, 0x68, 0x4d, 0x6b,
	0x7a, 0xe1, 0x6c, 0x50, 0x64, 0x8a, 0xb1, 0x07, 0x9d, 0xe9, 0xcb, 0x1a, 0x53, 0xd4, 0x89, 0x6d,
	0x49, 0xfa, 0x4d, 0xad, 0x3d, 0x4e, 0x85, 0x5d, 0xe2, 0x0a, 0x5f, 0x99, 0xe9, 0x0a, 0x7f, 0xbe,
	0xc7, 0x6e, 0x74, 0x07, 0x2e, 0xfa, 0xbc, 0xa5, 0x30, 0xf5, 0xc4, 0xb1, 0x79, 0x75, 0xbe, 0x10,
	0x7e, 0xdc, 0x8f, 0x1f, 0x3f, 0x27, 0x92, 0x17, 0xf2, 0x22, 0x39, 0x6d, 0xc6, 0xc5, 0xb4, 0x19,
	0xd5, 0x07, 0xb0, 0xfc, 0xc0, 0x25, 0x93, 0x3e, 0x19, 0xf8, 0x56, 0x1f, 0x87, 0x37, 0xd3, 0x42,
	0xf6, 0xea, 0xc1, 0xa2, 0xc8, 0xc5, 0xdc, 0x56, 0x35, 0x2d, 0x5a, 0xab, 0x3f, 0x56, 0x60, 0x25,
	0x4b, 0x97, 0xb9, 0xc2, 0x34, 0xd0, 0x95, 0x44, 0xa0, 0x7f, 0x17, 0x96, 0xa7, 0xe4, 0xf5, 0x04,
	0xe5, 0xfa, 0xc6, 0x75, 0x99, 0x51, 0x24, 0x82, 0x6b, 0x68, 0x4a, 0x23, 0x84, 0xa9, 0xff, 0x54,
	0x60, 0x49, 0x84, 0x0c, 0x85, 0x8d, 0xd8, 0x9d, 0x9e, 0x16, 0x1f, 0xcf, 0xb5, 0x2d, 0x37, 0x6a,
	0x2e, 0xc5, 0x19, 0x39, 0x50, 0x34, 0x97, 0x1f, 0x41, 0x5b, 0x20, 0x45, 0x35, 0xa4, 0x60, 0x3b,
	0xd3, 0xe2, 0xfb, 0xa2, 0xea, 0xb1, 0x06, 0x2d, 0x6f, 0x38, 0x8c, 0xf3, 0xe3, 0x49, 0xb0, 0x29,
	0xa0, 0x82, 0xe1, 0xb7, 0xa0, 0x13, 0xa2, 0xcd, 0x5a, 0xb5, 0xda, 0x62, 0x63, 0xf4, 0x26, 0xf7,
	0x23, 0x05, 0xba, 0xc9, 0x1a, 0x16, 0x3b, 0xfe, 0xec, 0x9d, 0xd4, 0xd7, 0x92, 0x2f, 0xb3, 0x6b,
	0x27, 0xc8, 0x33, 0xe5, 0x13, 0xbe, 0xcf, 0xfe, 0x59, 0x81, 0xba, 0x26, 0xdc, 0x8e, 0xb2, 0x7f,
	0x1b, 0x60, 0xea, 0x98, 0x61, 0x4d, 0x89, 0xfc, 0x92, 0x1a, 0x27, 0xe6, 0x0c, 0x96, 0x29, 0x29,
	0x2a, 0x0c, 0x69, 0x9a, 0x0c, 0xa8, 0x7b, 0x67, 0x5e, 0xc8, 0x4c, 0x5a, 0xb5, 0x5b, 0xe4, 0xc8,
	0xf0, 0x4d, 0x5d, 0x10, 0x0f, 0xd5, 0x29, 0xed, 0xff, 0x0f, 0x28, 0xa6, 0x10, 0x53, 0x6b, 0x92,
	0xd8, 0x2a, 0x99, 0xf0, 0xaa, 0xc9, 0x84, 0xb7, 0x07, 0x8d, 0xf8, 0x4e, 0xea, 0xe2, 0x36, 0x36,
	0x4c, 0xec, 0x87, 0x2e, 0xce, 0x57, 0xe8, 0x1a, 0xb4, 0x4d, 0x27, 0x74, 0x6d, 0x5e, 0x9a, 0x78,
	0xc7, 0xd3, 0x8c, 0x4a, 0x0c, 0x2d, 0x4f, 0x37, 0x5f, 0x40, 0x2b, 0x99, 0xb9, 0x50, 0x03, 0x16,
	0xf7, 0xbc, 0xe0, 0x9b, 0xcf, 0x2d, 0x12, 0x74, 0xe6, 0x50, 0x0b, 0x60, 0xcf, 0x0b, 0xf6, 0x7d,
	0x4c, 0xb0, 0x1b, 0x74, 0x14, 0x04, 0x30, 0xff, 0x89, 0xbb, 0x6d, 0x91, 0x27, 0x9d, 0x12, 0x5a,
	0x16, 0xbd, 0x85, 0x61, 0xef, 0x8a, 0x74, 0xd0, 0x29, 0xd3, 0xed, 0xd1, 0xaa, 0x82, 0x3a, 0xd0,
	0x88, 0x50, 0x76, 0xf6, 0x1f, 0x74, 0xaa, 0xa8, 0x06, 0x55, 0xfe, 0x73, 0xfe, 0xa6, 0x09, 0x9d,
	0x74, 0x7b, 0x4b, 0x69, 0x3e, 0x70, 0xef, 0xb9, 0xde, 0xb3, 0x08, 0xd4, 0x99, 0x43, 0x75, 0x58,
	0x10, 0x57, 0x86, 0x8e, 0x82, 0xda, 0x50, 0x8f, 0x75, 0xeb, 0x9d, 0x12, 0x05, 0xec, 0xf8, 0xe3,
	0x81, 0xe8, 0xdb, 0xb9, 0x08, 0xd4, 0xc5, 0xb7, 0xbd, 0x67, 0x6e, 0xa7, 0x72, 0x73, 0x13, 0x16,
	0xc3, 0x94, 0x4a, 0x51, 0x39, 0x75, 0x97, 0x2e, 0x3b, 0x73, 0x68, 0x09, 0x9a, 0x89, 0x69, 0x67,
	0x47, 0x41, 0x08, 0x5a, 0xc9, 0x49, 0x74, 0xa7, 0xb4, 0xf1, 0xa7, 0x3a, 0x00, 0x6f, 0x3b, 0x3d,
	0xcf, 0x37, 0xd1, 0x18, 0xd0, 0x0e, 0x0e, 0x68, 0x49, 0xf5, 0xdc, 0xb0, 0x1c, 0x12, 0x74, 0x3b,
	0xa7, 0x3b, 0xcb, 0xa2, 0x0a, 0x51, 0x7b, 0xd7, 0x72, 0x76, 0xa4, 0xd0, 0xd5, 0x39, 0xe4, 0x30,
	0x8e, 0x87, 0x96, 0x83, 0x0f, 0xad, 0xc1, 0x93, 0xa8, 0x5f, 0xcd, 0xe7, 0x98, 0x42, 0x0d, 0x39,
	0xa6, 0x4a, 0x97, 0x58, 0x1c, 0x04, 0xbe, 0xe5, 0x8e, 0xc2, 0x61, 0x8a, 0x3a, 0x87, 0x9e, 0xc2,
	0x85, 0x1d, 0xcc, 0xb8, 0x5b, 0x24, 0xb0, 0x06, 0x24, 0x64, 0xb8, 0x91, 0xcf, 0x30, 0x83, 0x3c,
	0x23, 0x4b, 0x1b, 0xda, 0xa9, 0x7f, 0x7e, 0xa0, 0x9b, 0xf2, 0xb8, 0x91, 0xfd, 0x4b, 0xa5, 0xf7,
	0x5e, 0x21, 0xdc, 0x88, 0x9b, 0x05, 0xad, 0xe4, 0xbf, 0x22, 0xd0, 0x17, 0xf2, 0x08, 0x64, 0xe6,
	0xc3, 0xbd, 0x9b, 0x45, 0x50, 0x23, 0x56, 0x8f, 0xb8, 0x3f, 0x9d, 0xc6, 0x4a, 0x3a, 0x74, 0xef,
	0x9d, 0x34, 0xc7, 0x52, 0xe7, 0xd0, 0xf7, 0x61, 0x29, 0x33, 0xc5, 0x46, 0x5f, 0x94, 0x91, 0xcf,
	0x1b, 0x76, 0x9f, 0xc6, 0xe1, 0x51, 0x3a, 0x1a, 0xf2, 0xa5, 0xcf, 0xfc, 0x9d, 0xa1, 0xb8, 0xf4,
	0x31, 0xf2, 0x27, 0x49, 0x3f, 0x33, 0x87, 0x09, 0xa0, 0xec, 0x1c, 0x1b, 0xbd, 0x2f, 0x63, 0x91,
	0x3b, 0x4b, 0xef, 0xad, 0x17, 0x45, 0x8f, 0x4c, 0x3e, 0x61, 0xd1, 0x9a, 0xbe, 0x77, 0x49, 0xd9,
	0xe6, 0xce, 0xae, 0xe5, 0x6c, 0xf3, 0xc7, 0xc7, 0xdc, 0xa9, 0x93, 0xe3, 0x51, 0xb9, 0xad, 0xa4,
	0x23, 0x5d, 0xb9, 0x53, 0xcb, 0xa7, 0xad, 0xea, 0x1c, 0x3a, 0x4c, 0x24, 0x61, 0x74, 0x2d, 0xcf,
	0x27, 0x92, 0x6f, 0x2a, 0xa7, 0x99, 0x4b, 0x07, 0xd8, 0xc1, 0xc1, 0x7d, 0x1c, 0xf8, 0xd6, 0x80,
	0xa4, 0x89, 0x8a, 0xc5, 0x14, 0x21, 0x24, 0x7a, 0xfd, 0x54, 0xbc, 0x50, 0xec, 0x8d, 0x97, 0x00,
	0x35, 0x66, 0x33, 0x5a, 0x1f, 0xfe, 0x97, 0xc6, 0x5f, 0x41, 0x1a, 0x7f, 0x0c, 0xed, 0xd4, 0x6c,
	0x5c, 0x9e, 0xc6, 0xe5, 0x03, 0xf4, 0xd3, 0x1c, 0xa4, 0x0f, 0x28, 0x3b, 0xf9, 0x95, 0x07, 0x56,
	0xee, 0x84, 0xf8, 0x34, 0x1e, 0x8f, 0xa1, 0x9d, 0x1a, 0x73, 0xca, 0x4f, 0x20, 0x9f, 0x85, 0x16,
	0x38, 0x41, 0x76, 0x3a, 0x27, 0x3f, 0x41, 0xee, 0x14, 0xef, 0x34, 0x1e, 0x0f, 0xf9, 0xf0, 0x38,
	0xba, 0x0f, 0x5c, 0xcf, 0x8b, 0xce, 0xd4, 0x03, 0xec, 0xeb, 0xcf, 0xd7, 0xaf, 0xbe, 0x9e, 0x3d,
	0x86, 0x76, 0xea, 0x79, 0x5d, 0x6e, 0x5d, 0xf9, 0x1b, 0xfc, 0x69, 0xd4, 0x3f, 0xc7, 0x0c, 0xfc,
	0xaa, 0x73, 0xe5, 0xe6, 0x97, 0x1f, 0x6d, 0x8c, 0xac, 0xe0, 0x68, 0xd2, 0xa7, 0xa7, 0xbc, 0xc5,
	0x31, 0xdf, 0xb7, 0x3c, 0xf1, 0xeb, 0x56, 0x98, 0x34, 0x6e, 0x31, 0x4a, 0xb7, 0x98, 0xb4, 0xe3,
	0x7e, 0x7f, 0x9e, 0x2d, 0xef, 0xfc, 0x27, 0x00, 0x00, 0xff, 0xff, 0xba, 0x6a, 0xe4, 0x72, 0xc4,
	0x2c, 0x00, 0x00,
>>>>>>> auto balance
=======
	// 2870 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x3a, 0x4b, 0x6f, 0x1c, 0x59,
	0xd5, 0xae, 0x7e, 0xb9, 0xfb, 0xf4, 0x33, 0xd7, 0x89, 0xa7, 0xdd, 0xdf, 0x3c, 0x9c, 0xca, 0xe4,
	0xf1, 0x65, 0x18, 0x27, 0x38, 0x83, 0xc4, 0x68, 0x60, 0x11, 0xdb, 0xc4, 0x63, 0x26, 0xf1, 0x78,
	0xca, 0x4e, 0x80, 0x28, 0x52, 0x4d, 0x75, 0xd7, 0x75, 0xbb, 0x94, 0x7a, 0x74, 0xea, 0x56, 0x8f,
	0xe3, 0xb0, 0x1d, 0x81, 0x78, 0x0b, 0x09, 0xc4, 0x06, 0xb1, 0x02, 0x01, 0x12, 0x23, 0xd6, 0xec,
	0xf8, 0x01, 0x2c, 0x58, 0xb2, 0x42, 0xec, 0xe0, 0x0f, 0xb0, 0x44, 0xa0, 0xfb, 0xa8, 0xea, 0x7a,
	0xdc, 0xb2, 0xdb, 0xf6, 0x78, 0x12, 0x21, 0x76, 0x75, 0x4f, 0x9d, 0x7b, 0xcf, 0xb9, 0xe7, 0x9c,
	0x7b, 0x5e, 0xf7, 0xc2, 0xb9, 0x27, 0x63, 0xec, 0x1f, 0xe8, 0x03, 0xcf, 0xf3, 0xcd, 0xa5, 0x91,
	0xef, 0x05, 0x1e, 0x42, 0x8e, 0x65, 0x7f, 0x34, 0x26, 0x7c, 0xb4, 0xc4, 0xfe, 0xf7, 0x1a, 0x03,
	0xcf, 0x71, 0x3c, 0x97, 0xc3, 0x7a, 0x8d, 0x38, 0x46, 0xaf, 0x65, 0xb9, 0x01, 0xf6, 0x5d, 0xc3,
	0x0e, 0xff, 0x92, 0xc1, 0x1e, 0x76, 0x0c, 0x31, 0xea, 0x98, 0x46, 0x60, 0xc4, 0xd7, 0x57, 0x3f,
	0x56, 0x60, 0x7e, 0x7b, 0xcf, 0xdb, 0x5f, 0xf5, 0x6c, 0x1b, 0x0f, 0x02, 0xcb, 0x73, 0x89, 0x86,
	0x9f, 0x8c, 0x31, 0x09, 0xd0, 0x4d, 0x28, 0xf5, 0x0d, 0x82, 0xbb, 0xca, 0xa2, 0x72, 0xad, 0xbe,
	0xfc, 0xf2, 0x52, 0x82, 0x13, 0xc1, 0xc2, 0x3d, 0x32, 0x5c, 0x31, 0x08, 0xd6, 0x18, 0x26, 0x42,
	0x50, 0x32, 0xfb, 0x1b, 0x6b, 0xdd, 0xc2, 0xa2, 0x72, 0xad, 0xa8, 0xb1, 0x6f, 0xf4, 0x3a, 0x34,
	0x07, 0xd1, 0xda, 0x1b, 0x6b, 0xa4, 0x5b, 0x5c, 0x2c, 0x5e, 0x2b, 0x6a, 0x49, 0xa0, 0xfa, 0x6b,
	0x05, 0x5e, 0xca, 0xb0, 0x41, 0x46, 0x9e, 0x4b, 0x30, 0xba, 0x05, 0x15, 0x12, 0x18, 0xc1, 0x98,
	0x08, 0x4e, 0xfe, 0x4f, 0xca, 0xc9, 0x36, 0x43, 0xd1, 0x04, 0x6a, 0x96, 0x6c, 0x41, 0x42, 0x16,
	0x7d, 0x1e, 0xce, 0x5b, 0xee, 0x3d, 0xec, 0x78, 0xfe, 0x81, 0x3e, 0xc2, 0xfe, 0x00, 0xbb, 0x81,
	0x31, 0xc4, 0x21, 0x8f, 0x73, 0xe1, 0xbf, 0xad, 0xc9, 0x2f, 0xf5, 0x57, 0x0a, 0x5c, 0xa0, 0x9c,
	0x6e, 0x19, 0x7e, 0x60, 0x9d, 0x81, 0xbc, 0x54, 0x68, 0xc4, 0x79, 0xec, 0x16, 0xd9, 0xbf, 0x04,
	0x8c, 0xe2, 0x8c, 0x42, 0xf2, 0x74, 0x6f, 0x25, 0xc6, 0x6e, 0x02, 0xa6, 0xfe, 0x52, 0x28, 0x36,
	0xce, 0xe7, 0x69, 0x04, 0x9a, 0xa6, 0x59, 0xc8, 0xd2, 0x3c, 0x89, 0x38, 0xff, 0xae, 0xc0, 0x85,
	0xbb, 0x9e, 0x61, 0x4e, 0x14, 0xff, 0xd9, 0x8b, 0xf3, 0xcb, 0x50, 0xe1, 0xa7, 0xa4, 0x5b, 0x62,
	0xb4, 0x2e, 0x27, 0x69, 0x89, 0x13, 0x34, 0xe1, 0x70, 0x9b, 0x01, 0x34, 0x31, 0x09, 0x5d, 0x86,
	0x96, 0x8f, 0x47, 0xb6, 0x35, 0x30, 0x74, 0x77, 0xec, 0xf4, 0xb1, 0xdf, 0x2d, 0x2f, 0x2a, 0xd7,
	0xca, 0x5a, 0x53, 0x40, 0x37, 0x19, 0x50, 0xfd, 0xb9, 0x02, 0x5d, 0x0d, 0xdb, 0xd8, 0x20, 0xf8,
	0x79, 0x6e, 0x76, 0x1e, 0x2a, 0xae, 0x67, 0xe2, 0x8d, 0x35, 0xb6, 0xd9, 0xa2, 0x26, 0x46, 0xea,
	0xf7, 0x0a, 0x5c, 0x11, 0x2f, 0xb8, 0x5d, 0xc7, 0x94, 0x55, 0xfe, 0x74, 0x94, 0x55, 0x91, 0x29,
	0xeb, 0x8f, 0x13, 0x65, 0xbd, 0xe8, 0x02, 0x99, 0x28, 0xb4, 0x9c, 0x50, 0xe8, 0x37, 0x60, 0x61,
	0xd5, 0xc7, 0x46, 0x80, 0x3f, 0xa0, 0x41, 0x63, 0x75, 0xcf, 0x70, 0x5d, 0x6c, 0x87, 0x5b, 0x48,
	0x13, 0x57, 0x24, 0xc4, 0xbb, 0x30, 0x3b, 0xf2, 0xbd, 0xa7, 0x07, 0x11, 0xdf, 0xe1, 0x50, 0xfd,
	0x8d, 0x02, 0x3d, 0xd9, 0xda, 0xa7, 0xf1, 0x2f, 0x97, 0xa0, 0x29, 0xa2, 0x1f, 0x5f, 0x8d, 0xd1,
	0xac, 0x69, 0x8d, 0x27, 0x31, 0x0a, 0xe8, 0x26, 0x9c, 0xe7, 0x48, 0x3e, 0x26, 0x63, 0x3b, 0x88,
	0x70, 0x8b, 0x0c, 0x17, 0xb1, 0x7f, 0x1a, 0xfb, 0x25, 0x66, 0xa8, 0xbf, 0x55, 0x60, 0x61, 0x1d,
	0x07, 0x91, 0x12, 0x29, 0x55, 0xfc, 0x82, 0xba, 0xec, 0x4f, 0x14, 0xe8, 0xc9, 0x78, 0x3d, 0x8d,
	0x58, 0x1f, 0xc2, 0x7c, 0x44, 0x43, 0x37, 0x31, 0x19, 0xf8, 0xd6, 0x88, 0x19, 0x33, 0x73, 0xe0,
	0xf5, 0xe5, 0x4b, 0x4b, 0xd9, 0x04, 0x63, 0x29, 0xcd, 0xc1, 0x85, 0x68, 0x89, 0xb5, 0xd8, 0x0a,
	0xea, 0x0f, 0x14, 0xb8, 0xb0, 0x8e, 0x83, 0x6d, 0x3c, 0x74, 0xb0, 0x1b, 0x6c, 0xb8, 0xbb, 0xde,
	0xc9, 0xe5, 0xfa, 0x2a, 0x00, 0x11, 0xeb, 0x44, 0xc1, 0x25, 0x06, 0x99, 0x46, 0xc6, 0x2c, 0x97,
	0x49, 0xf3, 0x73, 0x1a, 0xd9, 0x7d, 0x01, 0xca, 0x96, 0xbb, 0xeb, 0x85, 0xa2, 0x7a, 0x4d, 0x26,
	0xaa, 0x38, 0x31, 0x8e, 0xad, 0xfe, 0x44, 0x01, 0xb4, 0x8e, 0x03, 0x8d, 0x3b, 0x94, 0x53, 0xd8,
	0x5a, 0x7a, 0xcf, 0x05, 0x89, 0x5d, 0x5d, 0x83, 0xce, 0xbe, 0x15, 0xec, 0xe9, 0x64, 0xcf, 0xf0,
	0x4d, 0x9d, 0x1e, 0x7d, 0xc2, 0x64, 0x53, 0xd5, 0x5a, 0x14, 0xbe, 0x4d, 0xc1, 0x9b, 0x14, 0xaa,
	0x7e, 0x5b, 0x81, 0xb9, 0x04, 0x5b, 0xa7, 0x11, 0xcd, 0x3b, 0x50, 0x15, 0x0e, 0xf3, 0x50, 0xe9,
	0x08, 0x62, 0x4c, 0x3a, 0xd1, 0x04, 0xd5, 0xe5, 0x6a, 0xa2, 0xac, 0xdd, 0xc5, 0x86, 0x89, 0xfd,
	0xb3, 0x95, 0x91, 0xfa, 0x7d, 0x05, 0x5e, 0xca, 0x10, 0x3c, 0xcd, 0xee, 0xbf, 0x04, 0x15, 0x26,
	0xef, 0x70, 0xef, 0xaf, 0x4b, 0x2d, 0x23, 0x46, 0xee, 0xae, 0x45, 0x02, 0x4d, 0xcc, 0x51, 0x3d,
	0xe8, 0xa4, 0xff, 0xa1, 0x8b, 0xd0, 0x10, 0xbe, 0x4c, 0x77, 0x0d, 0x87, 0x0b, 0xa0, 0xa6, 0xd5,
	0x05, 0x6c, 0xd3, 0x70, 0x30, 0x5a, 0x80, 0x2a, 0x55, 0xaf, 0x6e, 0x99, 0xe1, 0xf9, 0x98, 0x65,
	0x9e, 0xde, 0x24, 0xe8, 0x15, 0x00, 0xf6, 0xcb, 0x30, 0x4d, 0x9f, 0x67, 0x5b, 0x35, 0xad, 0x46,
	0x21, 0xb7, 0x29, 0x40, 0xfd, 0x57, 0x01, 0xe6, 0x6f, 0x9b, 0xa6, 0x2c, 0x0e, 0x1c, 0x5f, 0xe0,
	0x93, 0x70, 0x53, 0x88, 0x87, 0x9b, 0xa9, 0x9c, 0x60, 0xc6, 0xc7, 0x97, 0x8e, 0xe1, 0xe3, 0xcb,
	0x79, 0x3e, 0x1e, 0xad, 0x43, 0x93, 0x60, 0xfc, 0x58, 0x1f, 0x79, 0x84, 0x39, 0x29, 0x16, 0xd2,
	0xeb, 0xcb, 0x6a, 0x72, 0x37, 0x51, 0x61, 0x74, 0x8f, 0x0c, 0xb7, 0x04, 0xa6, 0xd6, 0xa0, 0x13,
	0xc3, 0x11, 0xba, 0x0f, 0xf3, 0x43, 0xdb, 0xeb, 0x1b, 0xb6, 0x4e, 0xb0, 0x61, 0x63, 0x53, 0x17,
	0x0e, 0x88, 0x74, 0x67, 0xa7, 0xf3, 0x00, 0xe7, 0xf9, 0xf4, 0x6d, 0x36, 0x5b, 0xfc, 0x20, 0xea,
	0xdf, 0x14, 0x58, 0xd0, 0xb0, 0xe3, 0x7d, 0x84, 0xff, 0x5b, 0x55, 0xa0, 0xfe, 0x58, 0x81, 0x06,
	0xcd, 0x1e, 0xef, 0xe1, 0x80, 0x9d, 0x76, 0xf4, 0x36, 0xd4, 0x6c, 0xcf, 0x30, 0xf5, 0xe0, 0x60,
	0xc4, 0xb7, 0xd6, 0x4a, 0x6f, 0x8d, 0x4b, 0x8f, 0x4e, 0xda, 0x39, 0x18, 0x61, 0xad, 0x6a, 0x8b,
	0xaf, 0xa9, 0xdc, 0x5e, 0x3a, 0x9c, 0x16, 0x65, 0x15, 0x50, 0x11, 0xe6, 0xbf, 0x66, 0x04, 0x83,
	0xbd, 0x35, 0x47, 0xb0, 0x49, 0x9e, 0x8f, 0xcc, 0xa7, 0xc9, 0xe2, 0xa2, 0x58, 0x53, 0x96, 0x59,
	0x1a, 0x2d, 0xdb, 0x97, 0x1e, 0x08, 0x35, 0xc4, 0x62, 0x4d, 0x2c, 0x1b, 0xae, 0x9c, 0x24, 0x1b,
	0x5e, 0x85, 0x26, 0x7e, 0x3a, 0xb0, 0xc7, 0xd4, 0xad, 0x30, 0xea, 0xdc, 0xce, 0x5f, 0x95, 0x50,
	0x8f, 0x9b, 0x79, 0x43, 0x4c, 0xda, 0x10, 0x3c, 0x70, 0x55, 0x3b, 0x38, 0x30, 0xba, 0x55, 0xc6,
	0xc6, 0x62, 0x9e, 0xaa, 0x43, 0xfb, 0xe0, 0xea, 0xa6, 0x23, 0xf5, 0xdf, 0x0a, 0x2c, 0x70, 0x35,
	0x61, 0x3b, 0x30, 0x9e, 0xaf, 0xa6, 0x22, 0x2d, 0x94, 0x8e, 0xa9, 0x85, 0x98, 0x04, 0x6a, 0xc7,
	0x96, 0xc0, 0xcf, 0x4a, 0xd0, 0x16, 0xe2, 0xa5, 0x18, 0xec, 0xfc, 0xbc, 0x0c, 0xb5, 0x28, 0xfb,
	0x11, 0xd9, 0xf9, 0x04, 0x80, 0x16, 0xa1, 0x1e, 0xb3, 0x1e, 0xb1, 0xd1, 0x38, 0x68, 0xaa, 0xdd,
	0x86, 0xb9, 0x6c, 0x29, 0x96, 0xcb, 0xbe, 0x02, 0xb0, 0x6b, 0x8f, 0xc9, 0x9e, 0x1e, 0x58, 0x0e,
	0x16, 0x15, 0x45, 0x8d, 0x41, 0x76, 0x2c, 0x07, 0xa3, 0xdb, 0xd0, 0xe8, 0x5b, 0xae, 0xed, 0x0d,
	0xf5, 0x91, 0x11, 0xec, 0x91, 0x6e, 0x25, 0xd7, 0x5e, 0xee, 0x58, 0xd8, 0x36, 0x57, 0x18, 0xae,
	0x56, 0xe7, 0x73, 0xb6, 0xe8, 0x14, 0xf4, 0x2a, 0xd4, 0xdd, 0xb1, 0xa3, 0x7b, 0xbb, 0xba, 0xef,
	0xed, 0x53, 0x8b, 0x63, 0x24, 0xdc, 0xb1, 0xf3, 0xfe, 0xae, 0xe6, 0xed, 0xd3, 0xe0, 0x5a, 0xa3,
	0x61, 0x96, 0xd8, 0xde, 0x90, 0x74, 0xab, 0x53, 0xad, 0x3f, 0x99, 0x40, 0x67, 0x9b, 0xd4, 0x8e,
	0xd8, 0xec, 0xda, 0x74, 0xb3, 0xa3, 0x09, 0xe8, 0x0a, 0xb4, 0x06, 0x9e, 0x33, 0x32, 0x98, 0x84,
	0xee, 0xf8, 0x9e, 0xd3, 0x05, 0x76, 0x56, 0x53, 0x50, 0xb4, 0x0a, 0x75, 0xcb, 0x35, 0xf1, 0x53,
	0x71, 0x6a, 0xea, 0x8c, 0x8e, 0x2a, 0x53, 0x39, 0x23, 0xb4, 0x41, 0x71, 0x99, 0xd2, 0xc1, 0x0a,
	0x3f, 0x09, 0x8d, 0xf9, 0x42, 0xa3, 0x3a, 0xb1, 0x9e, 0xe1, 0x6e, 0x83, 0x6b, 0x51, 0xc0, 0xb6,
	0xad, 0x67, 0x58, 0xfd, 0x7d, 0x01, 0x5a, 0xc9, 0x15, 0x68, 0x55, 0xb6, 0xcb, 0x20, 0xa1, 0x59,
	0x84, 0x43, 0xba, 0x1e, 0x76, 0x8d, 0xbe, 0x4d, 0xcf, 0xb2, 0x89, 0x9f, 0x32, 0xab, 0xa8, 0x6a,
	0x75, 0x0e, 0x63, 0x0b, 0x50, 0xed, 0x72, 0xbe, 0x59, 0x92, 0xc1, 0xab, 0xa6, 0x1a, 0x83, 0xb0,
	0x14, 0xa3, 0x0b, 0xb3, 0x9c, 0xbf, 0xd0, 0x26, 0xc2, 0x21, 0xfd, 0xd3, 0x1f, 0x5b, 0x8c, 0x2a,
	0xb7, 0x89, 0x70, 0x88, 0xd6, 0xa0, 0xc1, 0x97, 0x1c, 0x19, 0xbe, 0xe1, 0x84, 0x16, 0x71, 0x51,
	0x7a, 0x50, 0xdf, 0xc3, 0x07, 0x0f, 0x0c, 0x7b, 0x8c, 0xb7, 0x0c, 0xcb, 0xd7, 0xb8, 0x04, 0xb7,
	0xd8, 0x2c, 0x9a, 0xc6, 0xf2, 0x55, 0x76, 0x2d, 0x1b, 0x0b, 0xdb, 0x9a, 0x65, 0x79, 0x4c, 0x8b,
	0xc1, 0xef, 0x58, 0x36, 0xe6, 0xe6, 0x13, 0x6d, 0x81, 0xc9, 0xac, 0xca, 0xad, 0x87, 0x41, 0x98,
	0xc4, 0xfe, 0x51, 0x80, 0x39, 0x7a, 0x88, 0xc2, 0xe0, 0x7b, 0x72, 0x3f, 0xf2, 0x0a, 0x80, 0x49,
	0x02, 0x3d, 0xe1, 0x4b, 0x6a, 0x26, 0x09, 0x36, 0xb9, 0x3b, 0x79, 0x3b, 0x74, 0x15, 0xc5, 0xfc,
	0x3a, 0x2a, 0x75, 0xa8, 0xb3, 0x4e, 0xfb, 0x44, 0xfd, 0xa6, 0x4b, 0xd0, 0x24, 0xde, 0xd8, 0x1f,
	0x60, 0x3d, 0x51, 0xf7, 0x37, 0x38, 0x70, 0x53, 0xee, 0xed, 0x2a, 0xd2, 0xbe, 0x57, 0xcc, 0x6d,
	0xcd, 0x1e, 0xdb, 0x6d, 0xfd, 0x55, 0x81, 0x79, 0xd1, 0x23, 0x39, 0xbd, 0xb4, 0xf3, 0xbc, 0x76,
	0xe8, 0xa3, 0x8a, 0x87, 0xd4, 0xdb, 0xa5, 0x29, 0x62, 0x6e, 0x59, 0x12, 0x73, 0x93, 0x35, 0x67,
	0x25, 0x5d, 0x73, 0xaa, 0xdf, 0x52, 0xa0, 0xb9, 0x8d, 0x0d, 0x7f, 0xb0, 0x17, 0xee, 0xeb, 0x2d,
	0x28, 0xfa, 0xf8, 0x89, 0xd8, 0x56, 0xea, 0xbc, 0x8b, 0x41, 0x62, 0x82, 0x46, 0xd1, 0xd1, 0x6b,
	0x50, 0x37, 0x1d, 0x3b, 0xd5, 0xd8, 0x00, 0xd3, 0xb1, 0xc3, 0x7c, 0x2b, 0xc9, 0x48, 0x31, 0xc3,
	0xc8, 0xc7, 0x0a, 0x34, 0x3e, 0xe0, 0x49, 0x17, 0xe7, 0xe3, 0x56, 0x9c, 0x8f, 0x8b, 0x52, 0x3e,
	0xe2, 0xf8, 0x9f, 0x12, 0x1b, 0x3f, 0x52, 0x60, 0xfe, 0x5d, 0xc3, 0x35, 0xbd, 0xdd, 0xdd, 0xd3,
	0x2b, 0x7c, 0x35, 0xf2, 0x7e, 0x1b, 0xc7, 0xa9, 0xb1, 0x13, 0x93, 0xd4, 0xdf, 0x15, 0x00, 0x51,
	0xeb, 0x5c, 0x31, 0x6c, 0xc3, 0x1d, 0xe0, 0x93, 0x73, 0x73, 0x19, 0x5a, 0x89, 0x33, 0x15, 0xdd,
	0x17, 0xc4, 0x0f, 0x15, 0x41, 0xef, 0x41, 0xab, 0xcf, 0x49, 0xe9, 0x3e, 0x36, 0x88, 0xe7, 0x32,
	0xbb, 0x6c, 0xc9, 0x0b, 0xc0, 0x1d, 0xdf, 0x1a, 0x0e, 0xb1, 0xbf, 0xea, 0xb9, 0x26, 0x2f, 0x36,
	0x9a, 0xfd, 0x90, 0x4d, 0x3a, 0x95, 0xe9, 0x23, 0x72, 0x30, 0x61, 0x56, 0x08, 0x91, 0x87, 0x21,
	0xe8, 0x0d, 0x38, 0x97, 0xac, 0x43, 0x26, 0x86, 0xdc, 0x21, 0xf1, 0x12, 0x43, 0xd6, 0x20, 0x91,
	0x1c, 0x78, 0xf5, 0x9b, 0x80, 0xa2, 0x5c, 0x98, 0xa5, 0x5c, 0x2c, 0xa2, 0x4c, 0xd3, 0x0b, 0x7c,
	0x19, 0x6a, 0x66, 0x38, 0x53, 0x58, 0xce, 0x04, 0x40, 0x3d, 0x12, 0xdf, 0x85, 0x4e, 0x9d, 0x03,
	0x36, 0xc3, 0x6c, 0x83, 0x03, 0xef, 0x32, 0x98, 0xfa, 0x49, 0x01, 0x3a, 0xf1, 0xfa, 0x67, 0x6a,
	0xda, 0x67, 0xd3, 0x19, 0x3c, 0xa4, 0xd8, 0x2b, 0x9d, 0xa2, 0xd8, 0xcb, 0x16, 0xa3, 0xe5, 0x93,
	0x15, 0xa3, 0xea, 0x2f, 0x14, 0x68, 0xa7, 0x1a, 0x71, 0xe9, 0xbc, 0x4f, 0xc9, 0xe6, 0x7d, 0x5f,
	0x84, 0x32, 0x4d, 0x86, 0x30, 0x13, 0x52, 0x4b, 0x9e, 0x93, 0x24, 0x57, 0xd5, 0xf8, 0x04, 0x74,
	0x03, 0xe6, 0x24, 0x97, 0x37, 0x42, 0x95, 0x28, 0x7b, 0x77, 0xa3, 0xfe, 0xa1, 0x04, 0xf5, 0x98,
	0x3c, 0x8e, 0x48, 0x59, 0xa7, 0xa9, 0xea, 0x52, 0xdb, 0x2b, 0x66, 0xb7, 0x97, 0x73, 0x7b, 0x81,
	0x16, 0xa0, 0xea, 0x60, 0x87, 0xe7, 0x04, 0x22, 0x41, 0x71, 0xb0, 0x43, 0x33, 0x02, 0xd6, 0x37,
	0x19, 0x3b, 0x3c, 0xd9, 0xe4, 0x87, 0x62, 0xd6, 0x1d, 0x3b, 0x2c, 0xd5, 0x4c, 0xa6, 0x43, 0xb3,
	0x87, 0xa4, 0x43, 0xd5, 0x64, 0x3a, 0x94, 0x38, 0x0e, 0xb5, 0xf4, 0x71, 0x98, 0x36, 0x8b, 0xbc,
	0x09, 0x73, 0x03, 0xd6, 0x45, 0x37, 0x57, 0x0e, 0x56, 0xa3, 0x5f, 0xdd, 0x3a, 0xcb, 0xdb, 0x64,
	0xbf, 0xd0, 0x1d, 0x6a, 0x5c, 0x22, 0x65, 0x64, 0x5a, 0x6e, 0x30, 0x2d, 0xcb, 0xb3, 0x2d, 0xa1,
	0x1b, 0xae, 0xe4, 0xd0, 0x6f, 0xb2, 0x51, 0x3a, 0x7f, 0x6d, 0x9e, 0x28, 0x7f, 0x7d, 0x0d, 0xea,
	0xe1, 0x55, 0x8a, 0x65, 0x92, 0x6e, 0x8b, 0xfb, 0x2f, 0x01, 0xda, 0x30, 0x49, 0xa2, 0x63, 0xd5,
	0x4e, 0x74, 0xac, 0xd4, 0x3f, 0x17, 0xa1, 0x35, 0x49, 0x70, 0xa6, 0x76, 0x05, 0xd3, 0x5c, 0x42,
	0x6e, 0x42, 0x67, 0xd2, 0xf1, 0x66, 0x52, 0x3a, 0x34, 0x47, 0x4b, 0xf7, 0xba, 0xdb, 0xa3, 0xd4,
	0x99, 0x4b, 0x74, 0x32, 0x4a, 0xc7, 0xea, 0x64, 0x9c, 0xf2, 0xae, 0xea, 0x16, 0x5c, 0xf0, 0x79,
	0x7e, 0x65, 0xea, 0x89, 0x6d, 0xf3, 0x54, 0xe5, 0x7c, 0xf8, 0x73, 0x2b, 0xbe, 0xfd, 0x9c, 0x63,
	0x3c, 0x9b, 0x77, 0x8c, 0xd3, 0x6a, 0xac, 0x66, 0xd4, 0x98, 0xbd, 0x32, 0xab, 0xc9, 0xae, 0xcc,
	0xfe, 0xa2, 0x40, 0x3d, 0xd6, 0xef, 0xa5, 0x67, 0x24, 0x5c, 0x24, 0x72, 0x07, 0x11, 0x60, 0x2a,
	0x77, 0x70, 0x09, 0x9a, 0x13, 0x4d, 0x52, 0xde, 0x32, 0x5d, 0x1e, 0x93, 0xfa, 0xdb, 0x16, 0xef,
	0x7d, 0x47, 0xfd, 0x68, 0xee, 0xbe, 0x17, 0x73, 0x7b, 0xb2, 0x82, 0x49, 0xad, 0x49, 0x62, 0xa3,
	0xa4, 0xb5, 0x96, 0x93, 0xd6, 0xfa, 0x43, 0x05, 0x1a, 0xf1, 0xa9, 0xa8, 0x07, 0x55, 0x9b, 0x75,
	0x6f, 0xa3, 0xad, 0x45, 0x63, 0x2a, 0x4f, 0xfe, 0xcd, 0xda, 0xb1, 0x61, 0x9a, 0xc5, 0x41, 0xb7,
	0x4d, 0xd3, 0x47, 0x57, 0xa0, 0x6d, 0x3a, 0x7a, 0xa2, 0xdd, 0xcb, 0xa3, 0x54, 0x33, 0x72, 0x21,
	0x99, 0x86, 0x6f, 0x29, 0xc9, 0xd0, 0x7d, 0x98, 0xbb, 0xef, 0x92, 0x71, 0x9f, 0x0c, 0x7c, 0xab,
	0x8f, 0xc3, 0x9e, 0xc9, 0x54, 0x47, 0xa8, 0x07, 0x55, 0x41, 0x9a, 0x1f, 0x9f, 0x9a, 0x16, 0x8d,
	0xd5, 0xef, 0x2a, 0x30, 0x9f, 0x5d, 0x97, 0x69, 0x73, 0xe2, 0x78, 0x95, 0x84, 0xe3, 0xfd, 0x3a,
	0xcc, 0x4d, 0x96, 0xd7, 0x13, 0x2b, 0xd7, 0x97, 0xaf, 0xca, 0x74, 0x20, 0x61, 0x5c, 0x43, 0x93,
	0x35, 0x42, 0x98, 0xfa, 0x4f, 0x05, 0xce, 0x09, 0x17, 0x46, 0x61, 0x43, 0xd6, 0x6d, 0xa2, 0x36,
	0xe1, 0xb9, 0xb6, 0xe5, 0x46, 0xc5, 0x8f, 0xd8, 0x23, 0x07, 0x8a, 0xe2, 0xe7, 0x5d, 0x68, 0x0b,
	0xa4, 0x28, 0xa6, 0x4f, 0x99, 0x5e, 0xb6, 0xf8, 0xbc, 0x28, 0x9a, 0x5f, 0x86, 0x96, 0xb7, 0xbb,
	0x1b, 0xa7, 0xc7, 0x83, 0x52, 0x53, 0x40, 0x05, 0xc1, 0xaf, 0x42, 0x27, 0x44, 0x3b, 0x6e, 0x16,
	0xd1, 0x16, 0x13, 0xa3, 0x6e, 0xf1, 0x77, 0x14, 0xe8, 0x26, 0x73, 0x8a, 0xd8, 0xf6, 0x8f, 0x9f,
	0xd9, 0xbe, 0x93, 0xbc, 0xc4, 0xba, 0x7c, 0x08, 0x3f, 0x13, 0x3a, 0xa2, 0x52, 0xbd, 0xfe, 0x0c,
	0x5a, 0x49, 0xff, 0x88, 0x1a, 0x50, 0xdd, 0xf4, 0x82, 0xaf, 0x3c, 0xb5, 0x48, 0xd0, 0x99, 0x41,
	0x2d, 0x80, 0x4d, 0x2f, 0xd8, 0xf2, 0x31, 0xc1, 0x6e, 0xd0, 0x51, 0x10, 0x40, 0xe5, 0x7d, 0x77,
	0xcd, 0x22, 0x8f, 0x3b, 0x05, 0x34, 0x27, 0xd2, 0x17, 0xc3, 0xde, 0x10, 0x4e, 0xa7, 0x53, 0xa4,
	0xd3, 0xa3, 0x51, 0x09, 0x75, 0xa0, 0x11, 0xa1, 0xac, 0x6f, 0xdd, 0xef, 0x94, 0x51, 0x0d, 0xca,
	0xfc, 0xb3, 0x72, 0xdd, 0x84, 0x4e, 0x3a, 0x83, 0xa6, 0x6b, 0xde, 0x77, 0xdf, 0x73, 0xbd, 0xfd,
	0x08, 0xd4, 0x99, 0x41, 0x75, 0x98, 0x15, 0x55, 0x49, 0x47, 0x41, 0x6d, 0xa8, 0xc7, 0x0a, 0x82,
	0x4e, 0x81, 0x02, 0xd6, 0xfd, 0xd1, 0x40, 0x94, 0x06, 0x9c, 0x05, 0xaa, 0xb5, 0x35, 0x6f, 0xdf,
	0xed, 0x94, 0xae, 0xaf, 0x40, 0x35, 0x74, 0xdc, 0x14, 0x95, 0xaf, 0xee, 0xd2, 0x61, 0x67, 0x06,
	0x9d, 0x83, 0x66, 0xe2, 0x49, 0x44, 0x47, 0x41, 0x08, 0x5a, 0xc9, 0xe7, 0x2a, 0x9d, 0xc2, 0xf2,
	0x4f, 0x9b, 0x00, 0x3c, 0xb3, 0xf5, 0x3c, 0xdf, 0x44, 0x23, 0x76, 0xfd, 0x47, 0xa3, 0xb6, 0xe7,
	0x86, 0x11, 0x97, 0xa0, 0x9b, 0x39, 0x09, 0x60, 0x16, 0x55, 0xb0, 0xda, 0xbb, 0x92, 0x33, 0x23,
	0x85, 0xae, 0xce, 0x20, 0x87, 0x51, 0xdc, 0xb1, 0x1c, 0xbc, 0x63, 0x0d, 0x1e, 0x47, 0x29, 0x71,
	0x3e, 0xc5, 0x14, 0x6a, 0x48, 0xf1, 0x92, 0xbc, 0xa2, 0x0d, 0x7c, 0xcb, 0x1d, 0x86, 0x37, 0x66,
	0xea, 0x0c, 0x7a, 0x02, 0xe7, 0xd7, 0x31, 0xa3, 0x6e, 0x91, 0xc0, 0x1a, 0x90, 0x90, 0xe0, 0x72,
	0x3e, 0xc1, 0x0c, 0xf2, 0x31, 0x49, 0xda, 0xd0, 0x4e, 0x3d, 0x0f, 0x43, 0xd7, 0xe5, 0x0e, 0x5e,
	0xf6, 0x94, 0xad, 0xf7, 0xc6, 0x54, 0xb8, 0x11, 0x35, 0x0b, 0x5a, 0xc9, 0xa7, 0x53, 0xe8, 0xff,
	0xf3, 0x16, 0xc8, 0xbc, 0x0e, 0xe9, 0x5d, 0x9f, 0x06, 0x35, 0x22, 0xf5, 0x90, 0xdb, 0xd3, 0x51,
	0xa4, 0xa4, 0x2f, 0x73, 0x7a, 0x87, 0x5d, 0x56, 0xaa, 0x33, 0xe8, 0x43, 0x38, 0x97, 0x79, 0xc3,
	0x82, 0x3e, 0x27, 0xbf, 0xa7, 0x95, 0x3f, 0x75, 0x39, 0x8a, 0xc2, 0xc3, 0xf4, 0x69, 0xc8, 0xe7,
	0x3e, 0xf3, 0xe6, 0x69, 0x7a, 0xee, 0x63, 0xcb, 0x1f, 0xc6, 0xfd, 0xb1, 0x29, 0x8c, 0x01, 0x65,
	0x5f, 0xb1, 0xa0, 0x37, 0x65, 0x24, 0x72, 0x5f, 0xd2, 0xf4, 0x96, 0xa6, 0x45, 0x8f, 0x54, 0x3e,
	0x66, 0xa7, 0x35, 0x5d, 0xda, 0x49, 0xc9, 0xe6, 0xbe, 0x5c, 0x91, 0x93, 0xcd, 0x7f, 0x3c, 0xc2,
	0x8d, 0x3a, 0xf9, 0x38, 0x42, 0xae, 0x2b, 0xe9, 0x83, 0x0e, 0xb9, 0x51, 0xcb, 0xdf, 0x5a, 0xa8,
	0x33, 0x68, 0x27, 0xe1, 0x84, 0xd1, 0x95, 0x3c, 0x9b, 0x48, 0xb6, 0x6d, 0x8e, 0x52, 0x97, 0x0e,
	0xb0, 0x8e, 0x83, 0x7b, 0x38, 0xf0, 0xad, 0x01, 0x49, 0x2f, 0x2a, 0x06, 0x13, 0x84, 0x70, 0xd1,
	0xab, 0x47, 0xe2, 0x45, 0x6c, 0x7f, 0x08, 0xf5, 0xd8, 0x03, 0x09, 0x39, 0xdb, 0xd9, 0x87, 0x1d,
	0xbd, 0xab, 0x47, 0xe2, 0xc5, 0xdd, 0x58, 0xea, 0x21, 0x02, 0xca, 0x95, 0x6c, 0xf6, 0x79, 0x84,
	0xdc, 0x8d, 0xe5, 0xbc, 0x6c, 0x50, 0x67, 0x96, 0xff, 0x54, 0x87, 0x1a, 0xb3, 0x41, 0x1a, 0xef,
	0xfe, 0x17, 0x96, 0xce, 0x20, 0x2c, 0x3d, 0x82, 0x76, 0xea, 0x61, 0x85, 0x5c, 0x9f, 0xf2, 0xd7,
	0x17, 0x47, 0x19, 0x7c, 0x1f, 0x50, 0xf6, 0xd9, 0x80, 0xdc, 0x51, 0xe4, 0x3e, 0x2f, 0x38, 0x8a,
	0xc6, 0x23, 0x68, 0xa7, 0xee, 0xc8, 0xe5, 0x3b, 0x90, 0x5f, 0xa4, 0x4f, 0xb1, 0x83, 0xec, 0xd5,
	0xae, 0x7c, 0x07, 0xb9, 0x57, 0xc0, 0x47, 0xd1, 0x78, 0xc0, 0x5f, 0x1e, 0x44, 0x29, 0xfb, 0xd5,
	0x3c, 0x6f, 0x93, 0xea, 0x59, 0x3f, 0xff, 0xf8, 0x73, 0xf6, 0xf1, 0xf9, 0x11, 0xb4, 0x53, 0x37,
	0x34, 0x72, 0xed, 0xca, 0xaf, 0x71, 0x8e, 0x5a, 0xfd, 0x33, 0x8c, 0x28, 0x1f, 0x40, 0x85, 0x5f,
	0xac, 0xa0, 0x8b, 0xf2, 0x02, 0x26, 0x76, 0xe9, 0xd2, 0x3b, 0xfc, 0x62, 0x86, 0x8c, 0xed, 0x80,
	0x72, 0xbf, 0x09, 0x65, 0x76, 0x5e, 0x90, 0xb4, 0x53, 0x10, 0xbf, 0x3e, 0xe9, 0x1d, 0x7a, 0xc3,
	0x12, 0xae, 0x77, 0xd6, 0xe1, 0x69, 0xe5, 0xad, 0x87, 0xcb, 0x43, 0x2b, 0xd8, 0x1b, 0xf7, 0xa9,
	0x22, 0x6e, 0x70, 0xcc, 0x37, 0x2d, 0x4f, 0x7c, 0xdd, 0x08, 0xfd, 0xda, 0x0d, 0xb6, 0xd2, 0x0d,
	0xb6, 0x8d, 0x51, 0xbf, 0x5f, 0x61, 0xc3, 0x5b, 0xff, 0x09, 0x00, 0x00, 0xff, 0xff, 0x3f, 0x55,
	0xe8, 0x02, 0x5c, 0x32, 0x00, 0x00,
>>>>>>> merge with yah01/mem_replica
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// QueryCoordClient is the client API for QueryCoord service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryCoordClient interface {
	GetComponentStates(ctx context.Context, in *internalpb.GetComponentStatesRequest, opts ...grpc.CallOption) (*internalpb.ComponentStates, error)
	GetTimeTickChannel(ctx context.Context, in *internalpb.GetTimeTickChannelRequest, opts ...grpc.CallOption) (*milvuspb.StringResponse, error)
	GetStatisticsChannel(ctx context.Context, in *internalpb.GetStatisticsChannelRequest, opts ...grpc.CallOption) (*milvuspb.StringResponse, error)
	ShowCollections(ctx context.Context, in *ShowCollectionsRequest, opts ...grpc.CallOption) (*ShowCollectionsResponse, error)
	ShowPartitions(ctx context.Context, in *ShowPartitionsRequest, opts ...grpc.CallOption) (*ShowPartitionsResponse, error)
	LoadPartitions(ctx context.Context, in *LoadPartitionsRequest, opts ...grpc.CallOption) (*commonpb.Status, error)
	ReleasePartitions(ctx context.Context, in *ReleasePartitionsRequest, opts ...grpc.CallOption) (*commonpb.Status, error)
	LoadCollection(ctx context.Context, in *LoadCollectionRequest, opts ...grpc.CallOption) (*commonpb.Status, error)
	ReleaseCollection(ctx context.Context, in *ReleaseCollectionRequest, opts ...grpc.CallOption) (*commonpb.Status, error)
	CreateQueryChannel(ctx context.Context, in *CreateQueryChannelRequest, opts ...grpc.CallOption) (*CreateQueryChannelResponse, error)
	GetPartitionStates(ctx context.Context, in *GetPartitionStatesRequest, opts ...grpc.CallOption) (*GetPartitionStatesResponse, error)
	GetSegmentInfo(ctx context.Context, in *GetSegmentInfoRequest, opts ...grpc.CallOption) (*GetSegmentInfoResponse, error)
	LoadBalance(ctx context.Context, in *LoadBalanceRequest, opts ...grpc.CallOption) (*commonpb.Status, error)
	// https://wiki.lfaidata.foundation/display/MIL/MEP+8+--+Add+metrics+for+proxy
	GetMetrics(ctx context.Context, in *milvuspb.GetMetricsRequest, opts ...grpc.CallOption) (*milvuspb.GetMetricsResponse, error)
<<<<<<< HEAD
<<<<<<< HEAD
	// https://wiki.lfaidata.foundation/display/MIL/MEP+23+--+Multiple+memory+replication+design
	GetReplicas(ctx context.Context, in *milvuspb.GetReplicasRequest, opts ...grpc.CallOption) (*milvuspb.GetReplicasResponse, error)
	GetShardLeaders(ctx context.Context, in *GetShardLeadersRequest, opts ...grpc.CallOption) (*GetShardLeadersResponse, error)
=======
>>>>>>> auto balance
=======
	// https://wiki.lfaidata.foundation/display/MIL/MEP+23+--+Multiple+memory+replication+design
	GetReplicas(ctx context.Context, in *GetReplicasRequest, opts ...grpc.CallOption) (*GetReplicasResponse, error)
	GetShardLeaders(ctx context.Context, in *GetShardLeadersRequest, opts ...grpc.CallOption) (*GetShardLeadersResponse, error)
>>>>>>> merge with yah01/mem_replica
}

type queryCoordClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryCoordClient(cc grpc.ClientConnInterface) QueryCoordClient {
	return &queryCoordClient{cc}
}

func (c *queryCoordClient) GetComponentStates(ctx context.Context, in *internalpb.GetComponentStatesRequest, opts ...grpc.CallOption) (*internalpb.ComponentStates, error) {
	out := new(internalpb.ComponentStates)
	err := c.cc.Invoke(ctx, "/milvus.proto.query.QueryCoord/GetComponentStates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryCoordClient) GetTimeTickChannel(ctx context.Context, in *internalpb.GetTimeTickChannelRequest, opts ...grpc.CallOption) (*milvuspb.StringResponse, error) {
	out := new(milvuspb.StringResponse)
	err := c.cc.Invoke(ctx, "/milvus.proto.query.QueryCoord/GetTimeTickChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryCoordClient) GetStatisticsChannel(ctx context.Context, in *internalpb.GetStatisticsChannelRequest, opts ...grpc.CallOption) (*milvuspb.StringResponse, error) {
	out := new(milvuspb.StringResponse)
	err := c.cc.Invoke(ctx, "/milvus.proto.query.QueryCoord/GetStatisticsChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryCoordClient) ShowCollections(ctx context.Context, in *ShowCollectionsRequest, opts ...grpc.CallOption) (*ShowCollectionsResponse, error) {
	out := new(ShowCollectionsResponse)
	err := c.cc.Invoke(ctx, "/milvus.proto.query.QueryCoord/ShowCollections", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryCoordClient) ShowPartitions(ctx context.Context, in *ShowPartitionsRequest, opts ...grpc.CallOption) (*ShowPartitionsResponse, error) {
	out := new(ShowPartitionsResponse)
	err := c.cc.Invoke(ctx, "/milvus.proto.query.QueryCoord/ShowPartitions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryCoordClient) LoadPartitions(ctx context.Context, in *LoadPartitionsRequest, opts ...grpc.CallOption) (*commonpb.Status, error) {
	out := new(commonpb.Status)
	err := c.cc.Invoke(ctx, "/milvus.proto.query.QueryCoord/LoadPartitions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryCoordClient) ReleasePartitions(ctx context.Context, in *ReleasePartitionsRequest, opts ...grpc.CallOption) (*commonpb.Status, error) {
	out := new(commonpb.Status)
	err := c.cc.Invoke(ctx, "/milvus.proto.query.QueryCoord/ReleasePartitions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryCoordClient) LoadCollection(ctx context.Context, in *LoadCollectionRequest, opts ...grpc.CallOption) (*commonpb.Status, error) {
	out := new(commonpb.Status)
	err := c.cc.Invoke(ctx, "/milvus.proto.query.QueryCoord/LoadCollection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryCoordClient) ReleaseCollection(ctx context.Context, in *ReleaseCollectionRequest, opts ...grpc.CallOption) (*commonpb.Status, error) {
	out := new(commonpb.Status)
	err := c.cc.Invoke(ctx, "/milvus.proto.query.QueryCoord/ReleaseCollection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryCoordClient) CreateQueryChannel(ctx context.Context, in *CreateQueryChannelRequest, opts ...grpc.CallOption) (*CreateQueryChannelResponse, error) {
	out := new(CreateQueryChannelResponse)
	err := c.cc.Invoke(ctx, "/milvus.proto.query.QueryCoord/CreateQueryChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryCoordClient) GetPartitionStates(ctx context.Context, in *GetPartitionStatesRequest, opts ...grpc.CallOption) (*GetPartitionStatesResponse, error) {
	out := new(GetPartitionStatesResponse)
	err := c.cc.Invoke(ctx, "/milvus.proto.query.QueryCoord/GetPartitionStates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryCoordClient) GetSegmentInfo(ctx context.Context, in *GetSegmentInfoRequest, opts ...grpc.CallOption) (*GetSegmentInfoResponse, error) {
	out := new(GetSegmentInfoResponse)
	err := c.cc.Invoke(ctx, "/milvus.proto.query.QueryCoord/GetSegmentInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryCoordClient) LoadBalance(ctx context.Context, in *LoadBalanceRequest, opts ...grpc.CallOption) (*commonpb.Status, error) {
	out := new(commonpb.Status)
	err := c.cc.Invoke(ctx, "/milvus.proto.query.QueryCoord/LoadBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryCoordClient) GetMetrics(ctx context.Context, in *milvuspb.GetMetricsRequest, opts ...grpc.CallOption) (*milvuspb.GetMetricsResponse, error) {
	out := new(milvuspb.GetMetricsResponse)
	err := c.cc.Invoke(ctx, "/milvus.proto.query.QueryCoord/GetMetrics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

<<<<<<< HEAD
<<<<<<< HEAD
func (c *queryCoordClient) GetReplicas(ctx context.Context, in *milvuspb.GetReplicasRequest, opts ...grpc.CallOption) (*milvuspb.GetReplicasResponse, error) {
	out := new(milvuspb.GetReplicasResponse)
=======
func (c *queryCoordClient) GetReplicas(ctx context.Context, in *GetReplicasRequest, opts ...grpc.CallOption) (*GetReplicasResponse, error) {
	out := new(GetReplicasResponse)
>>>>>>> merge with yah01/mem_replica
	err := c.cc.Invoke(ctx, "/milvus.proto.query.QueryCoord/GetReplicas", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryCoordClient) GetShardLeaders(ctx context.Context, in *GetShardLeadersRequest, opts ...grpc.CallOption) (*GetShardLeadersResponse, error) {
	out := new(GetShardLeadersResponse)
	err := c.cc.Invoke(ctx, "/milvus.proto.query.QueryCoord/GetShardLeaders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

<<<<<<< HEAD
=======
>>>>>>> auto balance
=======
>>>>>>> merge with yah01/mem_replica
// QueryCoordServer is the server API for QueryCoord service.
type QueryCoordServer interface {
	GetComponentStates(context.Context, *internalpb.GetComponentStatesRequest) (*internalpb.ComponentStates, error)
	GetTimeTickChannel(context.Context, *internalpb.GetTimeTickChannelRequest) (*milvuspb.StringResponse, error)
	GetStatisticsChannel(context.Context, *internalpb.GetStatisticsChannelRequest) (*milvuspb.StringResponse, error)
	ShowCollections(context.Context, *ShowCollectionsRequest) (*ShowCollectionsResponse, error)
	ShowPartitions(context.Context, *ShowPartitionsRequest) (*ShowPartitionsResponse, error)
	LoadPartitions(context.Context, *LoadPartitionsRequest) (*commonpb.Status, error)
	ReleasePartitions(context.Context, *ReleasePartitionsRequest) (*commonpb.Status, error)
	LoadCollection(context.Context, *LoadCollectionRequest) (*commonpb.Status, error)
	ReleaseCollection(context.Context, *ReleaseCollectionRequest) (*commonpb.Status, error)
	CreateQueryChannel(context.Context, *CreateQueryChannelRequest) (*CreateQueryChannelResponse, error)
	GetPartitionStates(context.Context, *GetPartitionStatesRequest) (*GetPartitionStatesResponse, error)
	GetSegmentInfo(context.Context, *GetSegmentInfoRequest) (*GetSegmentInfoResponse, error)
	LoadBalance(context.Context, *LoadBalanceRequest) (*commonpb.Status, error)
	// https://wiki.lfaidata.foundation/display/MIL/MEP+8+--+Add+metrics+for+proxy
	GetMetrics(context.Context, *milvuspb.GetMetricsRequest) (*milvuspb.GetMetricsResponse, error)
<<<<<<< HEAD
<<<<<<< HEAD
	// https://wiki.lfaidata.foundation/display/MIL/MEP+23+--+Multiple+memory+replication+design
	GetReplicas(context.Context, *milvuspb.GetReplicasRequest) (*milvuspb.GetReplicasResponse, error)
	GetShardLeaders(context.Context, *GetShardLeadersRequest) (*GetShardLeadersResponse, error)
=======
>>>>>>> auto balance
=======
	// https://wiki.lfaidata.foundation/display/MIL/MEP+23+--+Multiple+memory+replication+design
	GetReplicas(context.Context, *GetReplicasRequest) (*GetReplicasResponse, error)
	GetShardLeaders(context.Context, *GetShardLeadersRequest) (*GetShardLeadersResponse, error)
>>>>>>> merge with yah01/mem_replica
}

// UnimplementedQueryCoordServer can be embedded to have forward compatible implementations.
type UnimplementedQueryCoordServer struct {
}

func (*UnimplementedQueryCoordServer) GetComponentStates(context.Context, *internalpb.GetComponentStatesRequest) (*internalpb.ComponentStates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetComponentStates not implemented")
}
func (*UnimplementedQueryCoordServer) GetTimeTickChannel(context.Context, *internalpb.GetTimeTickChannelRequest) (*milvuspb.StringResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTimeTickChannel not implemented")
}
func (*UnimplementedQueryCoordServer) GetStatisticsChannel(context.Context, *internalpb.GetStatisticsChannelRequest) (*milvuspb.StringResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatisticsChannel not implemented")
}
func (*UnimplementedQueryCoordServer) ShowCollections(context.Context, *ShowCollectionsRequest) (*ShowCollectionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowCollections not implemented")
}
func (*UnimplementedQueryCoordServer) ShowPartitions(context.Context, *ShowPartitionsRequest) (*ShowPartitionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowPartitions not implemented")
}
func (*UnimplementedQueryCoordServer) LoadPartitions(context.Context, *LoadPartitionsRequest) (*commonpb.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoadPartitions not implemented")
}
func (*UnimplementedQueryCoordServer) ReleasePartitions(context.Context, *ReleasePartitionsRequest) (*commonpb.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReleasePartitions not implemented")
}
func (*UnimplementedQueryCoordServer) LoadCollection(context.Context, *LoadCollectionRequest) (*commonpb.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoadCollection not implemented")
}
func (*UnimplementedQueryCoordServer) ReleaseCollection(context.Context, *ReleaseCollectionRequest) (*commonpb.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReleaseCollection not implemented")
}
func (*UnimplementedQueryCoordServer) CreateQueryChannel(context.Context, *CreateQueryChannelRequest) (*CreateQueryChannelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateQueryChannel not implemented")
}
func (*UnimplementedQueryCoordServer) GetPartitionStates(context.Context, *GetPartitionStatesRequest) (*GetPartitionStatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPartitionStates not implemented")
}
func (*UnimplementedQueryCoordServer) GetSegmentInfo(context.Context, *GetSegmentInfoRequest) (*GetSegmentInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSegmentInfo not implemented")
}
func (*UnimplementedQueryCoordServer) LoadBalance(context.Context, *LoadBalanceRequest) (*commonpb.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoadBalance not implemented")
}
func (*UnimplementedQueryCoordServer) GetMetrics(context.Context, *milvuspb.GetMetricsRequest) (*milvuspb.GetMetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMetrics not implemented")
}
<<<<<<< HEAD
<<<<<<< HEAD
func (*UnimplementedQueryCoordServer) GetReplicas(context.Context, *milvuspb.GetReplicasRequest) (*milvuspb.GetReplicasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReplicas not implemented")
}
func (*UnimplementedQueryCoordServer) GetShardLeaders(context.Context, *GetShardLeadersRequest) (*GetShardLeadersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShardLeaders not implemented")
}
=======
>>>>>>> auto balance
=======
func (*UnimplementedQueryCoordServer) GetReplicas(ctx context.Context, req *GetReplicasRequest) (*GetReplicasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReplicas not implemented")
}
func (*UnimplementedQueryCoordServer) GetShardLeaders(ctx context.Context, req *GetShardLeadersRequest) (*GetShardLeadersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShardLeaders not implemented")
}
>>>>>>> merge with yah01/mem_replica

func RegisterQueryCoordServer(s *grpc.Server, srv QueryCoordServer) {
	s.RegisterService(&_QueryCoord_serviceDesc, srv)
}

func _QueryCoord_GetComponentStates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(internalpb.GetComponentStatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryCoordServer).GetComponentStates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.query.QueryCoord/GetComponentStates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryCoordServer).GetComponentStates(ctx, req.(*internalpb.GetComponentStatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryCoord_GetTimeTickChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(internalpb.GetTimeTickChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryCoordServer).GetTimeTickChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.query.QueryCoord/GetTimeTickChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryCoordServer).GetTimeTickChannel(ctx, req.(*internalpb.GetTimeTickChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryCoord_GetStatisticsChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(internalpb.GetStatisticsChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryCoordServer).GetStatisticsChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.query.QueryCoord/GetStatisticsChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryCoordServer).GetStatisticsChannel(ctx, req.(*internalpb.GetStatisticsChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryCoord_ShowCollections_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShowCollectionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryCoordServer).ShowCollections(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.query.QueryCoord/ShowCollections",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryCoordServer).ShowCollections(ctx, req.(*ShowCollectionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryCoord_ShowPartitions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShowPartitionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryCoordServer).ShowPartitions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.query.QueryCoord/ShowPartitions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryCoordServer).ShowPartitions(ctx, req.(*ShowPartitionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryCoord_LoadPartitions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoadPartitionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryCoordServer).LoadPartitions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.query.QueryCoord/LoadPartitions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryCoordServer).LoadPartitions(ctx, req.(*LoadPartitionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryCoord_ReleasePartitions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReleasePartitionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryCoordServer).ReleasePartitions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.query.QueryCoord/ReleasePartitions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryCoordServer).ReleasePartitions(ctx, req.(*ReleasePartitionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryCoord_LoadCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoadCollectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryCoordServer).LoadCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.query.QueryCoord/LoadCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryCoordServer).LoadCollection(ctx, req.(*LoadCollectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryCoord_ReleaseCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReleaseCollectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryCoordServer).ReleaseCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.query.QueryCoord/ReleaseCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryCoordServer).ReleaseCollection(ctx, req.(*ReleaseCollectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryCoord_CreateQueryChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateQueryChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryCoordServer).CreateQueryChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.query.QueryCoord/CreateQueryChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryCoordServer).CreateQueryChannel(ctx, req.(*CreateQueryChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryCoord_GetPartitionStates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPartitionStatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryCoordServer).GetPartitionStates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.query.QueryCoord/GetPartitionStates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryCoordServer).GetPartitionStates(ctx, req.(*GetPartitionStatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryCoord_GetSegmentInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSegmentInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryCoordServer).GetSegmentInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.query.QueryCoord/GetSegmentInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryCoordServer).GetSegmentInfo(ctx, req.(*GetSegmentInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryCoord_LoadBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoadBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryCoordServer).LoadBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.query.QueryCoord/LoadBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryCoordServer).LoadBalance(ctx, req.(*LoadBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryCoord_GetMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(milvuspb.GetMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryCoordServer).GetMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.query.QueryCoord/GetMetrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryCoordServer).GetMetrics(ctx, req.(*milvuspb.GetMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

<<<<<<< HEAD
<<<<<<< HEAD
func _QueryCoord_GetReplicas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(milvuspb.GetReplicasRequest)
=======
func _QueryCoord_GetReplicas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReplicasRequest)
>>>>>>> merge with yah01/mem_replica
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryCoordServer).GetReplicas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.query.QueryCoord/GetReplicas",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
<<<<<<< HEAD
		return srv.(QueryCoordServer).GetReplicas(ctx, req.(*milvuspb.GetReplicasRequest))
=======
		return srv.(QueryCoordServer).GetReplicas(ctx, req.(*GetReplicasRequest))
>>>>>>> merge with yah01/mem_replica
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryCoord_GetShardLeaders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShardLeadersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryCoordServer).GetShardLeaders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.query.QueryCoord/GetShardLeaders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryCoordServer).GetShardLeaders(ctx, req.(*GetShardLeadersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

<<<<<<< HEAD
=======
>>>>>>> auto balance
=======
>>>>>>> merge with yah01/mem_replica
var _QueryCoord_serviceDesc = grpc.ServiceDesc{
	ServiceName: "milvus.proto.query.QueryCoord",
	HandlerType: (*QueryCoordServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetComponentStates",
			Handler:    _QueryCoord_GetComponentStates_Handler,
		},
		{
			MethodName: "GetTimeTickChannel",
			Handler:    _QueryCoord_GetTimeTickChannel_Handler,
		},
		{
			MethodName: "GetStatisticsChannel",
			Handler:    _QueryCoord_GetStatisticsChannel_Handler,
		},
		{
			MethodName: "ShowCollections",
			Handler:    _QueryCoord_ShowCollections_Handler,
		},
		{
			MethodName: "ShowPartitions",
			Handler:    _QueryCoord_ShowPartitions_Handler,
		},
		{
			MethodName: "LoadPartitions",
			Handler:    _QueryCoord_LoadPartitions_Handler,
		},
		{
			MethodName: "ReleasePartitions",
			Handler:    _QueryCoord_ReleasePartitions_Handler,
		},
		{
			MethodName: "LoadCollection",
			Handler:    _QueryCoord_LoadCollection_Handler,
		},
		{
			MethodName: "ReleaseCollection",
			Handler:    _QueryCoord_ReleaseCollection_Handler,
		},
		{
			MethodName: "CreateQueryChannel",
			Handler:    _QueryCoord_CreateQueryChannel_Handler,
		},
		{
			MethodName: "GetPartitionStates",
			Handler:    _QueryCoord_GetPartitionStates_Handler,
		},
		{
			MethodName: "GetSegmentInfo",
			Handler:    _QueryCoord_GetSegmentInfo_Handler,
		},
		{
			MethodName: "LoadBalance",
			Handler:    _QueryCoord_LoadBalance_Handler,
		},
		{
			MethodName: "GetMetrics",
			Handler:    _QueryCoord_GetMetrics_Handler,
		},
		{
			MethodName: "GetReplicas",
			Handler:    _QueryCoord_GetReplicas_Handler,
		},
		{
			MethodName: "GetShardLeaders",
			Handler:    _QueryCoord_GetShardLeaders_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "query_coord.proto",
}

// QueryNodeClient is the client API for QueryNode service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryNodeClient interface {
	GetComponentStates(ctx context.Context, in *internalpb.GetComponentStatesRequest, opts ...grpc.CallOption) (*internalpb.ComponentStates, error)
	GetTimeTickChannel(ctx context.Context, in *internalpb.GetTimeTickChannelRequest, opts ...grpc.CallOption) (*milvuspb.StringResponse, error)
	GetStatisticsChannel(ctx context.Context, in *internalpb.GetStatisticsChannelRequest, opts ...grpc.CallOption) (*milvuspb.StringResponse, error)
	AddQueryChannel(ctx context.Context, in *AddQueryChannelRequest, opts ...grpc.CallOption) (*commonpb.Status, error)
	RemoveQueryChannel(ctx context.Context, in *RemoveQueryChannelRequest, opts ...grpc.CallOption) (*commonpb.Status, error)
	WatchDmChannels(ctx context.Context, in *WatchDmChannelsRequest, opts ...grpc.CallOption) (*commonpb.Status, error)
	WatchDeltaChannels(ctx context.Context, in *WatchDeltaChannelsRequest, opts ...grpc.CallOption) (*commonpb.Status, error)
	LoadSegments(ctx context.Context, in *LoadSegmentsRequest, opts ...grpc.CallOption) (*commonpb.Status, error)
	ReleaseCollection(ctx context.Context, in *ReleaseCollectionRequest, opts ...grpc.CallOption) (*commonpb.Status, error)
	ReleasePartitions(ctx context.Context, in *ReleasePartitionsRequest, opts ...grpc.CallOption) (*commonpb.Status, error)
	ReleaseSegments(ctx context.Context, in *ReleaseSegmentsRequest, opts ...grpc.CallOption) (*commonpb.Status, error)
	GetSegmentInfo(ctx context.Context, in *GetSegmentInfoRequest, opts ...grpc.CallOption) (*GetSegmentInfoResponse, error)
<<<<<<< HEAD
<<<<<<< HEAD
	Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*internalpb.SearchResults, error)
	Query(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*internalpb.RetrieveResults, error)
=======
>>>>>>> auto balance
=======
	Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*milvuspb.SearchResults, error)
	Query(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*milvuspb.QueryResults, error)
>>>>>>> merge with yah01/mem_replica
	// https://wiki.lfaidata.foundation/display/MIL/MEP+8+--+Add+metrics+for+proxy
	GetMetrics(ctx context.Context, in *milvuspb.GetMetricsRequest, opts ...grpc.CallOption) (*milvuspb.GetMetricsResponse, error)
}

type queryNodeClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryNodeClient(cc grpc.ClientConnInterface) QueryNodeClient {
	return &queryNodeClient{cc}
}

func (c *queryNodeClient) GetComponentStates(ctx context.Context, in *internalpb.GetComponentStatesRequest, opts ...grpc.CallOption) (*internalpb.ComponentStates, error) {
	out := new(internalpb.ComponentStates)
	err := c.cc.Invoke(ctx, "/milvus.proto.query.QueryNode/GetComponentStates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryNodeClient) GetTimeTickChannel(ctx context.Context, in *internalpb.GetTimeTickChannelRequest, opts ...grpc.CallOption) (*milvuspb.StringResponse, error) {
	out := new(milvuspb.StringResponse)
	err := c.cc.Invoke(ctx, "/milvus.proto.query.QueryNode/GetTimeTickChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryNodeClient) GetStatisticsChannel(ctx context.Context, in *internalpb.GetStatisticsChannelRequest, opts ...grpc.CallOption) (*milvuspb.StringResponse, error) {
	out := new(milvuspb.StringResponse)
	err := c.cc.Invoke(ctx, "/milvus.proto.query.QueryNode/GetStatisticsChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryNodeClient) AddQueryChannel(ctx context.Context, in *AddQueryChannelRequest, opts ...grpc.CallOption) (*commonpb.Status, error) {
	out := new(commonpb.Status)
	err := c.cc.Invoke(ctx, "/milvus.proto.query.QueryNode/AddQueryChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryNodeClient) RemoveQueryChannel(ctx context.Context, in *RemoveQueryChannelRequest, opts ...grpc.CallOption) (*commonpb.Status, error) {
	out := new(commonpb.Status)
	err := c.cc.Invoke(ctx, "/milvus.proto.query.QueryNode/RemoveQueryChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryNodeClient) WatchDmChannels(ctx context.Context, in *WatchDmChannelsRequest, opts ...grpc.CallOption) (*commonpb.Status, error) {
	out := new(commonpb.Status)
	err := c.cc.Invoke(ctx, "/milvus.proto.query.QueryNode/WatchDmChannels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryNodeClient) WatchDeltaChannels(ctx context.Context, in *WatchDeltaChannelsRequest, opts ...grpc.CallOption) (*commonpb.Status, error) {
	out := new(commonpb.Status)
	err := c.cc.Invoke(ctx, "/milvus.proto.query.QueryNode/WatchDeltaChannels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryNodeClient) LoadSegments(ctx context.Context, in *LoadSegmentsRequest, opts ...grpc.CallOption) (*commonpb.Status, error) {
	out := new(commonpb.Status)
	err := c.cc.Invoke(ctx, "/milvus.proto.query.QueryNode/LoadSegments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryNodeClient) ReleaseCollection(ctx context.Context, in *ReleaseCollectionRequest, opts ...grpc.CallOption) (*commonpb.Status, error) {
	out := new(commonpb.Status)
	err := c.cc.Invoke(ctx, "/milvus.proto.query.QueryNode/ReleaseCollection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryNodeClient) ReleasePartitions(ctx context.Context, in *ReleasePartitionsRequest, opts ...grpc.CallOption) (*commonpb.Status, error) {
	out := new(commonpb.Status)
	err := c.cc.Invoke(ctx, "/milvus.proto.query.QueryNode/ReleasePartitions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryNodeClient) ReleaseSegments(ctx context.Context, in *ReleaseSegmentsRequest, opts ...grpc.CallOption) (*commonpb.Status, error) {
	out := new(commonpb.Status)
	err := c.cc.Invoke(ctx, "/milvus.proto.query.QueryNode/ReleaseSegments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryNodeClient) GetSegmentInfo(ctx context.Context, in *GetSegmentInfoRequest, opts ...grpc.CallOption) (*GetSegmentInfoResponse, error) {
	out := new(GetSegmentInfoResponse)
	err := c.cc.Invoke(ctx, "/milvus.proto.query.QueryNode/GetSegmentInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

<<<<<<< HEAD
<<<<<<< HEAD
func (c *queryNodeClient) Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*internalpb.SearchResults, error) {
	out := new(internalpb.SearchResults)
=======
func (c *queryNodeClient) Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*milvuspb.SearchResults, error) {
	out := new(milvuspb.SearchResults)
>>>>>>> merge with yah01/mem_replica
	err := c.cc.Invoke(ctx, "/milvus.proto.query.QueryNode/Search", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

<<<<<<< HEAD
func (c *queryNodeClient) Query(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*internalpb.RetrieveResults, error) {
	out := new(internalpb.RetrieveResults)
=======
func (c *queryNodeClient) Query(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*milvuspb.QueryResults, error) {
	out := new(milvuspb.QueryResults)
>>>>>>> merge with yah01/mem_replica
	err := c.cc.Invoke(ctx, "/milvus.proto.query.QueryNode/Query", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

<<<<<<< HEAD
=======
>>>>>>> auto balance
=======
>>>>>>> merge with yah01/mem_replica
func (c *queryNodeClient) GetMetrics(ctx context.Context, in *milvuspb.GetMetricsRequest, opts ...grpc.CallOption) (*milvuspb.GetMetricsResponse, error) {
	out := new(milvuspb.GetMetricsResponse)
	err := c.cc.Invoke(ctx, "/milvus.proto.query.QueryNode/GetMetrics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryNodeServer is the server API for QueryNode service.
type QueryNodeServer interface {
	GetComponentStates(context.Context, *internalpb.GetComponentStatesRequest) (*internalpb.ComponentStates, error)
	GetTimeTickChannel(context.Context, *internalpb.GetTimeTickChannelRequest) (*milvuspb.StringResponse, error)
	GetStatisticsChannel(context.Context, *internalpb.GetStatisticsChannelRequest) (*milvuspb.StringResponse, error)
	AddQueryChannel(context.Context, *AddQueryChannelRequest) (*commonpb.Status, error)
	RemoveQueryChannel(context.Context, *RemoveQueryChannelRequest) (*commonpb.Status, error)
	WatchDmChannels(context.Context, *WatchDmChannelsRequest) (*commonpb.Status, error)
	WatchDeltaChannels(context.Context, *WatchDeltaChannelsRequest) (*commonpb.Status, error)
	LoadSegments(context.Context, *LoadSegmentsRequest) (*commonpb.Status, error)
	ReleaseCollection(context.Context, *ReleaseCollectionRequest) (*commonpb.Status, error)
	ReleasePartitions(context.Context, *ReleasePartitionsRequest) (*commonpb.Status, error)
	ReleaseSegments(context.Context, *ReleaseSegmentsRequest) (*commonpb.Status, error)
	GetSegmentInfo(context.Context, *GetSegmentInfoRequest) (*GetSegmentInfoResponse, error)
<<<<<<< HEAD
<<<<<<< HEAD
	Search(context.Context, *SearchRequest) (*internalpb.SearchResults, error)
	Query(context.Context, *QueryRequest) (*internalpb.RetrieveResults, error)
=======
>>>>>>> auto balance
=======
	Search(context.Context, *SearchRequest) (*milvuspb.SearchResults, error)
	Query(context.Context, *QueryRequest) (*milvuspb.QueryResults, error)
>>>>>>> merge with yah01/mem_replica
	// https://wiki.lfaidata.foundation/display/MIL/MEP+8+--+Add+metrics+for+proxy
	GetMetrics(context.Context, *milvuspb.GetMetricsRequest) (*milvuspb.GetMetricsResponse, error)
}

// UnimplementedQueryNodeServer can be embedded to have forward compatible implementations.
type UnimplementedQueryNodeServer struct {
}

func (*UnimplementedQueryNodeServer) GetComponentStates(context.Context, *internalpb.GetComponentStatesRequest) (*internalpb.ComponentStates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetComponentStates not implemented")
}
func (*UnimplementedQueryNodeServer) GetTimeTickChannel(context.Context, *internalpb.GetTimeTickChannelRequest) (*milvuspb.StringResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTimeTickChannel not implemented")
}
func (*UnimplementedQueryNodeServer) GetStatisticsChannel(context.Context, *internalpb.GetStatisticsChannelRequest) (*milvuspb.StringResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatisticsChannel not implemented")
}
func (*UnimplementedQueryNodeServer) AddQueryChannel(context.Context, *AddQueryChannelRequest) (*commonpb.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddQueryChannel not implemented")
}
func (*UnimplementedQueryNodeServer) RemoveQueryChannel(context.Context, *RemoveQueryChannelRequest) (*commonpb.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveQueryChannel not implemented")
}
func (*UnimplementedQueryNodeServer) WatchDmChannels(context.Context, *WatchDmChannelsRequest) (*commonpb.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WatchDmChannels not implemented")
}
func (*UnimplementedQueryNodeServer) WatchDeltaChannels(context.Context, *WatchDeltaChannelsRequest) (*commonpb.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WatchDeltaChannels not implemented")
}
func (*UnimplementedQueryNodeServer) LoadSegments(context.Context, *LoadSegmentsRequest) (*commonpb.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoadSegments not implemented")
}
func (*UnimplementedQueryNodeServer) ReleaseCollection(context.Context, *ReleaseCollectionRequest) (*commonpb.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReleaseCollection not implemented")
}
func (*UnimplementedQueryNodeServer) ReleasePartitions(context.Context, *ReleasePartitionsRequest) (*commonpb.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReleasePartitions not implemented")
}
func (*UnimplementedQueryNodeServer) ReleaseSegments(context.Context, *ReleaseSegmentsRequest) (*commonpb.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReleaseSegments not implemented")
}
func (*UnimplementedQueryNodeServer) GetSegmentInfo(context.Context, *GetSegmentInfoRequest) (*GetSegmentInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSegmentInfo not implemented")
}
<<<<<<< HEAD
<<<<<<< HEAD
func (*UnimplementedQueryNodeServer) Search(context.Context, *SearchRequest) (*internalpb.SearchResults, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (*UnimplementedQueryNodeServer) Query(context.Context, *QueryRequest) (*internalpb.RetrieveResults, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Query not implemented")
}
func (*UnimplementedQueryNodeServer) GetMetrics(context.Context, *milvuspb.GetMetricsRequest) (*milvuspb.GetMetricsResponse, error) {
=======
=======
func (*UnimplementedQueryNodeServer) Search(ctx context.Context, req *SearchRequest) (*milvuspb.SearchResults, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (*UnimplementedQueryNodeServer) Query(ctx context.Context, req *QueryRequest) (*milvuspb.QueryResults, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Query not implemented")
}
>>>>>>> merge with yah01/mem_replica
func (*UnimplementedQueryNodeServer) GetMetrics(ctx context.Context, req *milvuspb.GetMetricsRequest) (*milvuspb.GetMetricsResponse, error) {
>>>>>>> auto balance
	return nil, status.Errorf(codes.Unimplemented, "method GetMetrics not implemented")
}

func RegisterQueryNodeServer(s *grpc.Server, srv QueryNodeServer) {
	s.RegisterService(&_QueryNode_serviceDesc, srv)
}

func _QueryNode_GetComponentStates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(internalpb.GetComponentStatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryNodeServer).GetComponentStates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.query.QueryNode/GetComponentStates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryNodeServer).GetComponentStates(ctx, req.(*internalpb.GetComponentStatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryNode_GetTimeTickChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(internalpb.GetTimeTickChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryNodeServer).GetTimeTickChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.query.QueryNode/GetTimeTickChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryNodeServer).GetTimeTickChannel(ctx, req.(*internalpb.GetTimeTickChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryNode_GetStatisticsChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(internalpb.GetStatisticsChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryNodeServer).GetStatisticsChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.query.QueryNode/GetStatisticsChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryNodeServer).GetStatisticsChannel(ctx, req.(*internalpb.GetStatisticsChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryNode_AddQueryChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddQueryChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryNodeServer).AddQueryChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.query.QueryNode/AddQueryChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryNodeServer).AddQueryChannel(ctx, req.(*AddQueryChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryNode_RemoveQueryChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveQueryChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryNodeServer).RemoveQueryChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.query.QueryNode/RemoveQueryChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryNodeServer).RemoveQueryChannel(ctx, req.(*RemoveQueryChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryNode_WatchDmChannels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WatchDmChannelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryNodeServer).WatchDmChannels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.query.QueryNode/WatchDmChannels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryNodeServer).WatchDmChannels(ctx, req.(*WatchDmChannelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryNode_WatchDeltaChannels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WatchDeltaChannelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryNodeServer).WatchDeltaChannels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.query.QueryNode/WatchDeltaChannels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryNodeServer).WatchDeltaChannels(ctx, req.(*WatchDeltaChannelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryNode_LoadSegments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoadSegmentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryNodeServer).LoadSegments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.query.QueryNode/LoadSegments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryNodeServer).LoadSegments(ctx, req.(*LoadSegmentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryNode_ReleaseCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReleaseCollectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryNodeServer).ReleaseCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.query.QueryNode/ReleaseCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryNodeServer).ReleaseCollection(ctx, req.(*ReleaseCollectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryNode_ReleasePartitions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReleasePartitionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryNodeServer).ReleasePartitions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.query.QueryNode/ReleasePartitions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryNodeServer).ReleasePartitions(ctx, req.(*ReleasePartitionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryNode_ReleaseSegments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReleaseSegmentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryNodeServer).ReleaseSegments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.query.QueryNode/ReleaseSegments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryNodeServer).ReleaseSegments(ctx, req.(*ReleaseSegmentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryNode_GetSegmentInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSegmentInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryNodeServer).GetSegmentInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.query.QueryNode/GetSegmentInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryNodeServer).GetSegmentInfo(ctx, req.(*GetSegmentInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryNode_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryNodeServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.query.QueryNode/Search",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryNodeServer).Search(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryNode_Query_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryNodeServer).Query(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.query.QueryNode/Query",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryNodeServer).Query(ctx, req.(*QueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryNode_GetMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(milvuspb.GetMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryNodeServer).GetMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.query.QueryNode/GetMetrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryNodeServer).GetMetrics(ctx, req.(*milvuspb.GetMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _QueryNode_serviceDesc = grpc.ServiceDesc{
	ServiceName: "milvus.proto.query.QueryNode",
	HandlerType: (*QueryNodeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetComponentStates",
			Handler:    _QueryNode_GetComponentStates_Handler,
		},
		{
			MethodName: "GetTimeTickChannel",
			Handler:    _QueryNode_GetTimeTickChannel_Handler,
		},
		{
			MethodName: "GetStatisticsChannel",
			Handler:    _QueryNode_GetStatisticsChannel_Handler,
		},
		{
			MethodName: "AddQueryChannel",
			Handler:    _QueryNode_AddQueryChannel_Handler,
		},
		{
			MethodName: "RemoveQueryChannel",
			Handler:    _QueryNode_RemoveQueryChannel_Handler,
		},
		{
			MethodName: "WatchDmChannels",
			Handler:    _QueryNode_WatchDmChannels_Handler,
		},
		{
			MethodName: "WatchDeltaChannels",
			Handler:    _QueryNode_WatchDeltaChannels_Handler,
		},
		{
			MethodName: "LoadSegments",
			Handler:    _QueryNode_LoadSegments_Handler,
		},
		{
			MethodName: "ReleaseCollection",
			Handler:    _QueryNode_ReleaseCollection_Handler,
		},
		{
			MethodName: "ReleasePartitions",
			Handler:    _QueryNode_ReleasePartitions_Handler,
		},
		{
			MethodName: "ReleaseSegments",
			Handler:    _QueryNode_ReleaseSegments_Handler,
		},
		{
			MethodName: "GetSegmentInfo",
			Handler:    _QueryNode_GetSegmentInfo_Handler,
		},
		{
			MethodName: "Search",
			Handler:    _QueryNode_Search_Handler,
		},
		{
			MethodName: "Query",
			Handler:    _QueryNode_Query_Handler,
		},
		{
			MethodName: "GetMetrics",
			Handler:    _QueryNode_GetMetrics_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "query_coord.proto",
}
