// Code generated by protoc-gen-go. DO NOT EDIT.
// source: log_coord.proto

package logpb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	commonpb "github.com/milvus-io/milvus-proto/go-api/v2/commonpb"
	milvuspb "github.com/milvus-io/milvus-proto/go-api/v2/milvuspb"
	msgpb "github.com/milvus-io/milvus-proto/go-api/v2/msgpb"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type PChannelState int32

const (
	PChannelState_Waitting PChannelState = 0
	PChannelState_Watching PChannelState = 1
)

var PChannelState_name = map[int32]string{
	0: "Waitting",
	1: "Watching",
}

var PChannelState_value = map[string]int32{
	"Waitting": 0,
	"Watching": 1,
}

func (x PChannelState) String() string {
	return proto.EnumName(PChannelState_name, int32(x))
}

func (PChannelState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5674412121b98d7f, []int{0}
}

type PChannelInfo struct {
	Name                 string        `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	State                PChannelState `protobuf:"varint,2,opt,name=state,proto3,enum=milvus.proto.index.PChannelState" json:"state,omitempty"`
	NodeID               int64         `protobuf:"varint,3,opt,name=nodeID,proto3" json:"nodeID,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *PChannelInfo) Reset()         { *m = PChannelInfo{} }
func (m *PChannelInfo) String() string { return proto.CompactTextString(m) }
func (*PChannelInfo) ProtoMessage()    {}
func (*PChannelInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_5674412121b98d7f, []int{0}
}

func (m *PChannelInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PChannelInfo.Unmarshal(m, b)
}
func (m *PChannelInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PChannelInfo.Marshal(b, m, deterministic)
}
func (m *PChannelInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PChannelInfo.Merge(m, src)
}
func (m *PChannelInfo) XXX_Size() int {
	return xxx_messageInfo_PChannelInfo.Size(m)
}
func (m *PChannelInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PChannelInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PChannelInfo proto.InternalMessageInfo

func (m *PChannelInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PChannelInfo) GetState() PChannelState {
	if m != nil {
		return m.State
	}
	return PChannelState_Waitting
}

func (m *PChannelInfo) GetNodeID() int64 {
	if m != nil {
		return m.NodeID
	}
	return 0
}

type WatchChannelRequest struct {
	Base                 *commonpb.MsgBase `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	PChannel             string            `protobuf:"bytes,2,opt,name=pChannel,proto3" json:"pChannel,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *WatchChannelRequest) Reset()         { *m = WatchChannelRequest{} }
func (m *WatchChannelRequest) String() string { return proto.CompactTextString(m) }
func (*WatchChannelRequest) ProtoMessage()    {}
func (*WatchChannelRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5674412121b98d7f, []int{1}
}

func (m *WatchChannelRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WatchChannelRequest.Unmarshal(m, b)
}
func (m *WatchChannelRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WatchChannelRequest.Marshal(b, m, deterministic)
}
func (m *WatchChannelRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WatchChannelRequest.Merge(m, src)
}
func (m *WatchChannelRequest) XXX_Size() int {
	return xxx_messageInfo_WatchChannelRequest.Size(m)
}
func (m *WatchChannelRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_WatchChannelRequest.DiscardUnknown(m)
}

var xxx_messageInfo_WatchChannelRequest proto.InternalMessageInfo

func (m *WatchChannelRequest) GetBase() *commonpb.MsgBase {
	if m != nil {
		return m.Base
	}
	return nil
}

func (m *WatchChannelRequest) GetPChannel() string {
	if m != nil {
		return m.PChannel
	}
	return ""
}

type InsertRequest struct {
	Base                 *commonpb.MsgBase    `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	Msg                  *msgpb.InsertRequest `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	VChannels            []string             `protobuf:"bytes,3,rep,name=vChannels,proto3" json:"vChannels,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *InsertRequest) Reset()         { *m = InsertRequest{} }
func (m *InsertRequest) String() string { return proto.CompactTextString(m) }
func (*InsertRequest) ProtoMessage()    {}
func (*InsertRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5674412121b98d7f, []int{2}
}

func (m *InsertRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InsertRequest.Unmarshal(m, b)
}
func (m *InsertRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InsertRequest.Marshal(b, m, deterministic)
}
func (m *InsertRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InsertRequest.Merge(m, src)
}
func (m *InsertRequest) XXX_Size() int {
	return xxx_messageInfo_InsertRequest.Size(m)
}
func (m *InsertRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_InsertRequest.DiscardUnknown(m)
}

var xxx_messageInfo_InsertRequest proto.InternalMessageInfo

func (m *InsertRequest) GetBase() *commonpb.MsgBase {
	if m != nil {
		return m.Base
	}
	return nil
}

func (m *InsertRequest) GetMsg() *msgpb.InsertRequest {
	if m != nil {
		return m.Msg
	}
	return nil
}

func (m *InsertRequest) GetVChannels() []string {
	if m != nil {
		return m.VChannels
	}
	return nil
}

func init() {
	proto.RegisterEnum("milvus.proto.index.PChannelState", PChannelState_name, PChannelState_value)
	proto.RegisterType((*PChannelInfo)(nil), "milvus.proto.index.PChannelInfo")
	proto.RegisterType((*WatchChannelRequest)(nil), "milvus.proto.index.WatchChannelRequest")
	proto.RegisterType((*InsertRequest)(nil), "milvus.proto.index.InsertRequest")
}

func init() { proto.RegisterFile("log_coord.proto", fileDescriptor_5674412121b98d7f) }

var fileDescriptor_5674412121b98d7f = []byte{
	// 401 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x92, 0xd1, 0x8b, 0x95, 0x40,
	0x14, 0xc6, 0xd7, 0x75, 0xbb, 0xad, 0x67, 0xdd, 0x8a, 0x13, 0x84, 0xd8, 0x42, 0x26, 0x41, 0x52,
	0xa4, 0x9b, 0x3d, 0xf4, 0xbe, 0x1b, 0xc4, 0x8d, 0x8a, 0x98, 0xa0, 0x0b, 0xbd, 0xc4, 0xa8, 0xd3,
	0x28, 0xe8, 0x8c, 0x39, 0xe3, 0xa5, 0xbf, 0xa3, 0xd7, 0xfe, 0xd9, 0xd0, 0xb1, 0xba, 0xde, 0x2b,
	0x04, 0xbd, 0x9d, 0x6f, 0xee, 0xef, 0x7c, 0xe7, 0xdc, 0xef, 0x08, 0xb7, 0x6b, 0xc9, 0xbf, 0xe4,
	0x52, 0x76, 0x45, 0xdc, 0x76, 0x52, 0x4b, 0xc4, 0xa6, 0xaa, 0xb7, 0xbd, 0x32, 0x2a, 0xae, 0x44,
	0xc1, 0xbe, 0xfb, 0x6e, 0x2e, 0x9b, 0x46, 0x0a, 0xf3, 0xe6, 0xbb, 0xbb, 0x84, 0xef, 0x34, 0x8a,
	0x9b, 0x32, 0x54, 0xe0, 0x7e, 0xb8, 0x2e, 0xa9, 0x10, 0xac, 0x5e, 0x8b, 0xaf, 0x12, 0x11, 0x4e,
	0x04, 0x6d, 0x98, 0x67, 0x05, 0x56, 0xe4, 0x90, 0xb1, 0xc6, 0x97, 0x70, 0x43, 0x69, 0xaa, 0x99,
	0x77, 0x1c, 0x58, 0xd1, 0xad, 0xf4, 0x61, 0x7c, 0x38, 0x2e, 0xfe, 0x6d, 0xf2, 0x71, 0x00, 0x89,
	0xe1, 0xf1, 0x1e, 0xac, 0x84, 0x2c, 0xd8, 0xfa, 0x95, 0x67, 0x07, 0x56, 0x64, 0x93, 0x49, 0x85,
	0x39, 0xdc, 0xdd, 0x50, 0x9d, 0x97, 0x53, 0x0f, 0x61, 0xdf, 0x7a, 0xa6, 0x34, 0x5e, 0xc2, 0x49,
	0x46, 0x95, 0x99, 0x7d, 0x96, 0x5e, 0xcc, 0xc7, 0x4c, 0x7f, 0xe7, 0x9d, 0xe2, 0x57, 0x54, 0x31,
	0x32, 0x92, 0xe8, 0xc3, 0x69, 0x3b, 0x99, 0x8c, 0xcb, 0x39, 0xe4, 0x8f, 0x0e, 0x7f, 0x58, 0x70,
	0xbe, 0x16, 0x8a, 0x75, 0xfa, 0xff, 0xfd, 0x9f, 0x83, 0xdd, 0x28, 0x3e, 0x5a, 0x9f, 0xa5, 0x0f,
	0xe6, 0x0d, 0x43, 0x86, 0x33, 0x7f, 0x32, 0xb0, 0x78, 0x01, 0xce, 0x76, 0x5a, 0x41, 0x79, 0x76,
	0x60, 0x47, 0x0e, 0xf9, 0xfb, 0xf0, 0xe4, 0x29, 0x9c, 0xcf, 0x92, 0x42, 0x17, 0x4e, 0x37, 0xb4,
	0xd2, 0xba, 0x12, 0xfc, 0xce, 0x91, 0x51, 0x3a, 0x2f, 0x07, 0x65, 0xa5, 0x3f, 0x8f, 0xe1, 0xe6,
	0x5b, 0xc9, 0xdf, 0xcb, 0x82, 0x61, 0x0d, 0xf8, 0x9a, 0xe9, 0x6b, 0xd9, 0xb4, 0x52, 0x30, 0xa1,
	0xc7, 0x66, 0x85, 0xf1, 0xde, 0x4a, 0x46, 0x1c, 0x82, 0xd3, 0x86, 0xfe, 0xa3, 0x45, 0x7e, 0x0f,
	0x0e, 0x8f, 0xf0, 0x13, 0xb8, 0xbb, 0x07, 0xc2, 0xc7, 0x4b, 0x27, 0x5f, 0x38, 0xa1, 0x7f, 0x7f,
	0x31, 0xd4, 0xc1, 0xb7, 0x1f, 0x7c, 0xdf, 0xc0, 0xca, 0x44, 0x86, 0x8b, 0x1f, 0xd1, 0x2c, 0xce,
	0x7f, 0x78, 0x5d, 0xa5, 0x9f, 0x2f, 0x79, 0xa5, 0xcb, 0x3e, 0x1b, 0x7e, 0x49, 0x0c, 0xfa, 0xac,
	0x92, 0x53, 0x95, 0x54, 0x42, 0xb3, 0x4e, 0xd0, 0x3a, 0x19, 0xbb, 0x93, 0x5a, 0xf2, 0x36, 0xcb,
	0x56, 0xa3, 0x78, 0xf1, 0x2b, 0x00, 0x00, 0xff, 0xff, 0x68, 0x34, 0x11, 0x36, 0x42, 0x03, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// LogNodeClient is the client API for LogNode service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LogNodeClient interface {
	GetComponentStates(ctx context.Context, in *milvuspb.GetComponentStatesRequest, opts ...grpc.CallOption) (*milvuspb.ComponentStates, error)
	WatchChannel(ctx context.Context, in *WatchChannelRequest, opts ...grpc.CallOption) (*commonpb.Status, error)
	Insert(ctx context.Context, in *InsertRequest, opts ...grpc.CallOption) (*commonpb.Status, error)
}

type logNodeClient struct {
	cc *grpc.ClientConn
}

func NewLogNodeClient(cc *grpc.ClientConn) LogNodeClient {
	return &logNodeClient{cc}
}

func (c *logNodeClient) GetComponentStates(ctx context.Context, in *milvuspb.GetComponentStatesRequest, opts ...grpc.CallOption) (*milvuspb.ComponentStates, error) {
	out := new(milvuspb.ComponentStates)
	err := c.cc.Invoke(ctx, "/milvus.proto.index.LogNode/GetComponentStates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logNodeClient) WatchChannel(ctx context.Context, in *WatchChannelRequest, opts ...grpc.CallOption) (*commonpb.Status, error) {
	out := new(commonpb.Status)
	err := c.cc.Invoke(ctx, "/milvus.proto.index.LogNode/WatchChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logNodeClient) Insert(ctx context.Context, in *InsertRequest, opts ...grpc.CallOption) (*commonpb.Status, error) {
	out := new(commonpb.Status)
	err := c.cc.Invoke(ctx, "/milvus.proto.index.LogNode/Insert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LogNodeServer is the server API for LogNode service.
type LogNodeServer interface {
	GetComponentStates(context.Context, *milvuspb.GetComponentStatesRequest) (*milvuspb.ComponentStates, error)
	WatchChannel(context.Context, *WatchChannelRequest) (*commonpb.Status, error)
	Insert(context.Context, *InsertRequest) (*commonpb.Status, error)
}

// UnimplementedLogNodeServer can be embedded to have forward compatible implementations.
type UnimplementedLogNodeServer struct {
}

func (*UnimplementedLogNodeServer) GetComponentStates(ctx context.Context, req *milvuspb.GetComponentStatesRequest) (*milvuspb.ComponentStates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetComponentStates not implemented")
}
func (*UnimplementedLogNodeServer) WatchChannel(ctx context.Context, req *WatchChannelRequest) (*commonpb.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WatchChannel not implemented")
}
func (*UnimplementedLogNodeServer) Insert(ctx context.Context, req *InsertRequest) (*commonpb.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Insert not implemented")
}

func RegisterLogNodeServer(s *grpc.Server, srv LogNodeServer) {
	s.RegisterService(&_LogNode_serviceDesc, srv)
}

func _LogNode_GetComponentStates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(milvuspb.GetComponentStatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogNodeServer).GetComponentStates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.index.LogNode/GetComponentStates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogNodeServer).GetComponentStates(ctx, req.(*milvuspb.GetComponentStatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogNode_WatchChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WatchChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogNodeServer).WatchChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.index.LogNode/WatchChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogNodeServer).WatchChannel(ctx, req.(*WatchChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogNode_Insert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogNodeServer).Insert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.index.LogNode/Insert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogNodeServer).Insert(ctx, req.(*InsertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _LogNode_serviceDesc = grpc.ServiceDesc{
	ServiceName: "milvus.proto.index.LogNode",
	HandlerType: (*LogNodeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetComponentStates",
			Handler:    _LogNode_GetComponentStates_Handler,
		},
		{
			MethodName: "WatchChannel",
			Handler:    _LogNode_WatchChannel_Handler,
		},
		{
			MethodName: "Insert",
			Handler:    _LogNode_Insert_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "log_coord.proto",
}
